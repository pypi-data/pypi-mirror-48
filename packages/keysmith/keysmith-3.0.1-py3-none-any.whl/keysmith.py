"""Generate passphrases."""

import argparse
import math
import random
import string
import sys
from typing import Callable, Sequence

__version__ = '3.0.1'

CONSOLE_SCRIPT = 'keysmith'

POPULATIONS = {
    'alphanumeric': string.ascii_letters + string.digits,
    'ascii_letters': string.ascii_letters,
    'digits': string.digits,
    'printable': string.printable,
}

SYS_ARGV = tuple(sys.argv[1:])


def build_parser(parser: argparse.ArgumentParser) -> None:
    """Build a parser for CLI arguments and options."""
    parser.add_argument(
        '--delimiter',
        help='a delimiter for the samples (teeth) in the key',
        default=' ',
    )
    parser.add_argument(
        '--encoding',
        help='the encoding of the population file',
        default='utf-8',
    )
    parser.add_argument(
        '--nsamples', '-n',
        help='the number of random samples to take',
        type=int,
        default=6,
        dest='nteeth',
    )
    parser.add_argument(
        '--population', '-p',
        help='{0}, or a path to a file of line-delimited items'.format(
            ', '.join(POPULATIONS.keys()),
        ),
        default='/usr/share/dict/words',
    )
    parser.add_argument(
        '--stats',
        help='show statistics for the key',
        default=False,
        action='store_true',
    )
    parser.add_argument(
        '--version',
        action='version',
        version='%(prog)s {0}'.format(__version__),
    )


def default_parser() -> argparse.ArgumentParser:
    """Create a parser for CLI arguments and options."""
    parser = argparse.ArgumentParser(
        prog=CONSOLE_SCRIPT,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    build_parser(parser)
    return parser


def key(
        seq: Sequence,
        tooth: Callable[[Sequence], str] = (
            lambda seq: str(random.SystemRandom().choice(seq)).strip()
        ),
        nteeth: int = 6,
        delimiter: str = ' ',
) -> str:
    """Concatenate strings generated by the tooth function."""
    return delimiter.join(tooth(seq) for _ in range(nteeth))


def main(argv: Sequence[str] = SYS_ARGV) -> int:
    """Execute CLI commands."""
    args = default_parser().parse_args(argv)

    try:
        seq = POPULATIONS[args.population]  # type: Sequence
    except KeyError:
        try:
            with open(args.population, 'r', encoding=args.encoding) as file_:
                seq = list(file_)
        except (OSError, UnicodeError) as ex:
            print(ex, file=sys.stderr)
            return 1

    main_key = key(seq=seq, nteeth=args.nteeth, delimiter=args.delimiter)
    print(main_key)

    if args.stats:
        print('*', len(main_key), 'characters')
        print('*', args.nteeth, 'samples from a population of', len(seq))
        print(
            '* entropy {sign} {nbits} bits'.format(
                sign='~' if args.delimiter else '<',
                nbits=round(math.log(len(seq), 2) * args.nteeth, 2),
            ),
        )

    return 0


if __name__ == '__main__':
    sys.exit(main())
