//! # CasADi Rust interface
//!
//! This is a Rust interface to CasADi C functions.
//!
//! This is a `no-std` library (however, mind that the CasADi-generated code
//! requires `libm` to call math functions such as `sqrt`, `sin`, etc...)
//!
//! ---
//!
//! Auto-generated header file
//! This file is part of OptimizationEngine
//! (see https://alphaville.github.io/optimization-engine/)
//!
//! Generated at: {{timestamp_created}}
//!

#![no_std]

/// Number of static parameters (this also includes penalty constraints)
pub const NUM_STATIC_PARAMETERS: usize = {{problem.dim_parameters()}} + {{problem.dim_constraints_penalty() or 0}};

/// Number of decision variables
pub const NUM_DECISION_VARIABLES: usize = {{problem.dim_decision_variables()}};

/// Number of penalty constraints
pub const NUM_CONSTAINTS_TYPE_PENALTY: usize = {{problem.dim_constraints_penalty() or 0}};

use libc::{c_double, c_int, c_longlong, c_void};

extern "C" {
    fn {{build_config.cost_function_name or 'phi'}}(
        arg: *const *const c_double,
        casadi_results: *mut *mut c_double,
        iw: *mut c_longlong,
        w: *mut c_double,
        mem: *mut c_void,
    ) -> c_int;

    fn {{build_config.grad_function_name  or 'grad_phi'}}(
        arg: *const *const c_double,
        casadi_results: *mut *mut c_double,
        iw: *mut c_longlong,
        w: *mut c_double,
        mem: *mut c_void,
    ) -> c_int;

    fn {{build_config.constraint_penalty_function_name  or 'constraints_penalty'}}(
        arg: *const *const c_double,
        casadi_results: *mut *mut c_double,
        iw: *mut c_longlong,
        w: *mut c_double,
        mem: *mut c_void,
    ) -> c_int;
}

///
/// Consume the cost function written in C
///
/// # Example
/// ```
/// fn tst_call_casadi_cost() {
///     let u = [1.0, 2.0, 3.0, -5.0, 1.0, 10.0, 14.0, 17.0, 3.0, 5.0];
///     let p = [1.0, -1.0];
///     let mut cost_value = 0.0;
///     icasadi::cost(&u, &p, &mut cost_value);
/// }
/// ```
///
/// # Panics
/// This method does not panic (on purpose). However, users need to be
/// careful when providing the arguments `u` and `static_params`
/// as they must be arrays of appropriate size.
///
/// As a safety measure, you may check whether
///
/// - `u.len() >= NUM_DECISION_VARIABLES`
/// - `static_params.len() >= NUM_STATIC_PARAMETERS`
///
pub fn cost(u: &[f64], static_params: &[f64], cost_value: &mut f64) -> i32 {
    assert_eq!(u.len(), NUM_DECISION_VARIABLES);
    assert_eq!(static_params.len(), NUM_STATIC_PARAMETERS);

    let arguments = &[u.as_ptr(), static_params.as_ptr()];
    let cost = &mut [cost_value as *mut c_double];

    unsafe {
        {{build_config.cost_function_name or 'phi'}}(
            arguments.as_ptr(),
            cost.as_mut_ptr(),
            0 as *mut c_longlong,
            0 as *mut c_double,
            0 as *mut c_void,
        ) as i32
    }
}

///
/// Consume the Jacobian function written in C
///
/// # Example
/// ```
/// fn tst_call_casadi_cost() {
///     let u = [1.0, 2.0, 3.0, -5.0, 1.0, 10.0, 14.0, 17.0, 3.0, 5.0];
///     let p = [1.0, -1.0];
///     let mut jac = [0.0; 10];
///     icasadi::grad(&u, &p, &mut jac);
/// }
/// ```
///
/// # Panics
/// This method does not panic (on purpose). However, users need to be
/// careful when providing the arguments `u` and `static_params`
/// as they must be arrays of appropriate size.
///
/// As a safety measure, you may check whether
///
/// - `u.len() >= icasadi::num_decision_variables()`
/// - `static_params.len() >= icasadi::num_static_parameters()`
/// - `cost_jacobian.len() >= icasadi::num_decision_variables()`
///
pub fn grad(u: &[f64], static_params: &[f64], cost_jacobian: &mut [f64]) -> i32 {
    assert_eq!(u.len(), NUM_DECISION_VARIABLES);
    assert_eq!(cost_jacobian.len(), NUM_DECISION_VARIABLES);
    assert_eq!(static_params.len(), NUM_STATIC_PARAMETERS);

    let arguments = &[u.as_ptr(), static_params.as_ptr()];
    let grad = &mut [cost_jacobian.as_mut_ptr()];

    unsafe {
        {{build_config.grad_function_name  or 'grad_phi'}}(
            arguments.as_ptr(),
            grad.as_mut_ptr(),
            0 as *mut c_longlong,
            0 as *mut c_double,
            0 as *mut c_void,
        ) as i32
    }
}

pub fn constraints_as_penalty(
    u: &[f64],
    static_params: &[f64],
    constraints_as_penalty: &mut [f64],
) -> i32 {
    assert_eq!(u.len(), NUM_DECISION_VARIABLES);
    assert_eq!(static_params.len(), NUM_STATIC_PARAMETERS);
    assert!(constraints_as_penalty.len() == NUM_CONSTAINTS_TYPE_PENALTY ||
            NUM_CONSTAINTS_TYPE_PENALTY == 0);

    let arguments = &[u.as_ptr(), static_params.as_ptr()];
    let constraints = &mut [constraints_as_penalty.as_mut_ptr()];

    unsafe {
        {{build_config.constraint_penalty_function_name  or 'constraints_penalty'}}(
            arguments.as_ptr(),
            constraints.as_mut_ptr(),
            0 as *mut c_longlong,
            0 as *mut c_double,
            0 as *mut c_void,
        ) as i32
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn tst_num_static() {
        let _np = NUM_STATIC_PARAMETERS;
    }

    #[test]
    fn tst_num_decision_var() {
        let _nu = NUM_DECISION_VARIABLES;
    }

}
