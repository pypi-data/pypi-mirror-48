---
- hosts: undercloud
  vars:
    metadata:
      name: Node health check
      description: >
        Check if all overcloud nodes can be connected to before starting a
        scale-up or an upgrade.
      groups:
        - pre-upgrade
    hosts_are_ips: True
  tasks:
  - name: Fail if there are no overcloud hosts in the inventory
    fail: msg="There are no overcloud hosts."
    when: "'overcloud' not in groups"
  - name: Check if hosts are IPs
    set_fact: hosts_are_ips="{{ item | ipaddr == item }}"
    with_items: "{{ groups.overcloud }}"
  - name: Ping all overcloud nodes
    icmp_ping:
        host: "{{ item }}"
    with_items: "{{ groups.overcloud }}"
    ignore_errors: true
    register: ping_results
  - name: Extract failed pings
    set_fact:
      failed_pings: "{{ ping_results.results | selectattr('failed', 'equalto', True) | map(attribute='item') | list }}"
  - name: Lookup nova servers for each failed Ping by IP
    set_fact:
      servers: "{{ lookup('nova_servers', 'ip', 'ctlplane', failed_pings, wantlist=True) }}"
    when: hosts_are_ips == true
  - name: Lookup nova servers for each failed Ping by name
    set_fact:
      servers: "{{ lookup('nova_servers', 'name', failed_pings, wantlist=True) }}"
    when: hosts_are_ips == false
  - name: Extract nova ids
    set_fact:
      server_ids: "{{ servers | map(attribute='id') | list }}"
  - name: Lookup ironic nodes for unreachable nova servers
    set_fact:
      nodes: "{{ lookup('ironic_nodes', 'instance_uuid', server_ids, wantlist=True) }}"
  - name: Fail if there are unreachable nodes
    fail:
      msg: |
           {{ lookup('template', './templates/unreachable_nodes.j2',
           template_vars=dict(nodes=nodes)) }}
    when: nodes|length > 0
