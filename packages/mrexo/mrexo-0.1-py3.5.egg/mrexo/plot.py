import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from matplotlib.lines import Line2D
import numpy as np
import os
from scipy.stats.mstats import mquantiles
from astropy.table import Table

from .predict import find_mass_probability_distribution_function


def plot_m_given_r_relation(result_dir):
    '''
    Use to plot the conditional relationship of mass given radius (log scale).
    INPUTS:
        result_dir : Directory generated by the fitting function.
            Example: result_dir = '~/mrexo_working/trial_result'

    EXAMPLE:
        # Sample script to plot M-R data and fit.
        from mrexo import plot_mr_relation
        import os

        pwd = '~/mrexo_working/'
        result_dir = os.path.join(pwd,'Results_deg_12')

        plot_m_given_r_relation(result_dir)

    '''


    input_location = os.path.join(result_dir, 'input')
    output_location = os.path.join(result_dir, 'output')

    t = Table.read(os.path.join(input_location, 'MR_inputs.csv'))
    Mass = t['pl_masse']
    Mass_sigma = t['pl_masseerr1']
    Radius = t['pl_rade']
    Radius_sigma = t['pl_radeerr1']

    Mass_min, Mass_max = np.loadtxt(os.path.join(input_location, 'Mass_bounds.txt'))
    Radius_min, Radius_max = np.loadtxt(os.path.join(input_location, 'Radius_bounds.txt'))

    R_points = np.loadtxt(os.path.join(output_location, 'R_points.txt'))
    M_cond_R = np.loadtxt(os.path.join(output_location, 'M_cond_R.txt'))
    M_cond_R_upper = np.loadtxt(os.path.join(output_location, 'M_cond_R_upper.txt'))
    M_cond_R_lower = np.loadtxt(os.path.join(output_location, 'M_cond_R_lower.txt'))

    weights_boot = np.loadtxt(os.path.join(output_location, 'weights_boot.txt'))
    M_cond_R_boot = np.loadtxt(os.path.join(output_location, 'M_cond_R_boot.txt'))

    n_boot = np.shape(weights_boot)[0]
    deg_choose = int(np.sqrt(np.shape(weights_boot[1])))

    logMass = np.log10(Mass)
    logRadius = np.log10(Radius)

    logMass_sigma = 0.434 * Mass_sigma/Mass
    logRadius_sigma = 0.434 * Radius_sigma/Radius

    mr_lower_boot, mr_upper_boot = mquantiles(M_cond_R_boot,prob=[0.16, 0.84],axis = 0,alphap=1,betap=1).data

    fig = plt.figure(figsize=(8.5,6))
    plt.rc('axes', labelsize=20)    # fontsize of the x and y labels
    plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
    plt.rc('ytick', labelsize=20)    # fontsize of the tick labels
    ax1 = fig.add_subplot(1,1,1)

    ax1.errorbar(x=logRadius, y=logMass, xerr=logRadius_sigma, yerr=logMass_sigma,fmt='k.',markersize=3, elinewidth=0.3)
    ax1.plot(R_points,M_cond_R,  color='maroon', lw=2) # Full dataset run
    ax1.fill_between(R_points,M_cond_R_lower,M_cond_R_upper,alpha=0.3, color='lightsalmon') # Full dataset run
    lower_boot, upper_boot = mquantiles(M_cond_R_boot,prob=[0.16, 0.84],axis=0,alphap=1,betap=1).data
    ax1.fill_between(R_points,mr_lower_boot,mr_upper_boot,alpha=0.3, color='r') # Bootstrap result

    mr_mean_line = Line2D([0], [0], color='maroon', lw=2,label='Mean of f(m|r) from full dataset run')
    mr_full = mpatches.Patch(color='lightsalmon', alpha=0.3,  label=r'Quantiles of f(m|r) from full dataset run  ')
    mr_boot = mpatches.Patch(color='r', alpha=0.3, label=r'Quantiles of the MEAN of the f(m|r) from bootstrap')

    handles = [mr_mean_line, mr_full, mr_boot]

    plt.legend(handles = handles)


    ax1.set_xlabel('log Radius ($R_{\oplus}$)')
    ax1.set_ylabel('log Mass ($M_{\oplus}$)')
    ax1.set_title('f(m|r) with degree {}, and {} bootstraps'.format(deg_choose, n_boot))

    plt.show()
    plt.ylim(Mass_min, Mass_max)
    plt.xlim(Radius_min, Radius_max)

    return fig, ax1, handles


def plot_r_given_m_relation(result_dir):
    '''
    Use to plot the conditional relationship of radius given mass (log scale).
    INPUTS:
        result_dir : Directory generated by the fitting function.
            Example: result_dir = '~/mrexo_working/trial_result'

    EXAMPLE:
        # Sample script to plot M-R data and fit.
        from mrexo import plot_mr_relation
        import os

        pwd = '~/mrexo_working/'
        result_dir = os.path.join(pwd,'Results_deg_12')

        plot_r_given_m_relation(result_dir)

    '''

    input_location = os.path.join(result_dir, 'input')
    output_location = os.path.join(result_dir, 'output')

    t = Table.read(os.path.join(input_location, 'MR_inputs.csv'))
    Mass = t['pl_masse']
    Mass_sigma = t['pl_masseerr1']
    Radius = t['pl_rade']
    Radius_sigma = t['pl_radeerr1']

    Mass_min, Mass_max = np.loadtxt(os.path.join(input_location, 'Mass_bounds.txt'))
    Radius_min, Radius_max = np.loadtxt(os.path.join(input_location, 'Radius_bounds.txt'))

    R_points = np.loadtxt(os.path.join(output_location, 'R_points.txt'))
    M_points = np.loadtxt(os.path.join(output_location, 'M_points.txt'))
    R_cond_M = np.loadtxt(os.path.join(output_location, 'R_cond_M.txt'))
    R_cond_M_upper = np.loadtxt(os.path.join(output_location, 'R_cond_M_upper.txt'))
    R_cond_M_lower = np.loadtxt(os.path.join(output_location, 'R_cond_M_lower.txt'))

    weights_boot = np.loadtxt(os.path.join(output_location, 'weights_boot.txt'))
    R_cond_M_boot = np.loadtxt(os.path.join(output_location, 'R_cond_M_boot.txt'))

    n_boot = np.shape(weights_boot)[0]
    deg_choose = int(np.sqrt(np.shape(weights_boot[1])))

    logMass = np.log10(Mass)
    logRadius = np.log10(Radius)

    logMass_sigma = 0.434 * Mass_sigma/Mass
    logRadius_sigma = 0.434 * Radius_sigma/Radius

    rm_lower_boot, rm_upper_boot = mquantiles(R_cond_M_boot,prob=[0.16, 0.84],axis=0,alphap=1,betap=1).data

    fig = plt.figure(figsize=(8.5,6))
    plt.rc('axes', labelsize=20)    # fontsize of the x and y labels
    plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
    plt.rc('ytick', labelsize=20)    # fontsize of the tick labels
    ax1 = fig.add_subplot(1,1,1)

    ax1.errorbar(y=logRadius, x=logMass, yerr=logRadius_sigma, xerr=logMass_sigma,fmt='k.',markersize=3, elinewidth=0.3)
    ax1.plot(M_points, R_cond_M,  color='midnightblue', lw=2) # Full dataset run
    ax1.fill_between(M_points,R_cond_M_lower,R_cond_M_upper,alpha=0.3, color='cornflowerblue') # Full dataset run
    ax1.fill_between(M_points,rm_lower_boot,rm_upper_boot,alpha=0.3, color='b') # Bootstrap result


    rm_mean_line = Line2D([0], [0], color='midnightblue', lw=2,label='Mean of f(r|m) from full dataset run')
    rm_full = mpatches.Patch(color='cornflowerblue', alpha=0.3,  label=r'Quantiles of f(r|m) from full dataset run  ')
    rm_boot = mpatches.Patch(color='b', alpha=0.3, label=r'Quantiles of the MEAN of the f(r|m) from bootstrap')
    handles = [rm_mean_line, rm_full, rm_boot]

    plt.legend(handles=handles)
    ax1.set_ylabel('log Radius ($R_{\oplus}$)')
    ax1.set_xlabel('log Mass ($M_{\oplus}$)')

    ax1.set_title('f(r|m) with degree {}, and {} bootstraps'.format(deg_choose, n_boot))


    plt.show()
    plt.xlim(Mass_min, Mass_max)
    plt.ylim(Radius_min, Radius_max)

    return fig, ax1, handles

def plot_mr_and_rm(result_dir):
    '''
    Use to plot the conditional relationship of radius given mass, as well as and mass given radius (log scale) .
    INPUTS:
        result_dir : Directory generated by the fitting function.
            Example: result_dir = '~/mrexo_working/trial_result'

    EXAMPLE:
        # Sample script to plot M-R data and fit.
        from mrexo import plot_mr_relation
        import os

        pwd = '~/mrexo_working/'
        result_dir = os.path.join(pwd,'Results_deg_12')

        plot_mr_and_rm(result_dir)

    '''

    input_location = os.path.join(result_dir, 'input')
    output_location = os.path.join(result_dir, 'output')

    t = Table.read(os.path.join(input_location, 'MR_inputs.csv'))
    Mass = t['pl_masse']
    Mass_sigma = t['pl_masseerr1']
    Radius = t['pl_rade']
    Radius_sigma = t['pl_radeerr1']

    Mass_min, Mass_max = np.loadtxt(os.path.join(input_location, 'Mass_bounds.txt'))
    Radius_min, Radius_max = np.loadtxt(os.path.join(input_location, 'Radius_bounds.txt'))

    R_points = np.loadtxt(os.path.join(output_location, 'R_points.txt'))
    M_points = np.loadtxt(os.path.join(output_location, 'M_points.txt'))

    M_cond_R = np.loadtxt(os.path.join(output_location, 'M_cond_R.txt'))
    M_cond_R_upper = np.loadtxt(os.path.join(output_location, 'M_cond_R_upper.txt'))
    M_cond_R_lower = np.loadtxt(os.path.join(output_location, 'M_cond_R_lower.txt'))
    R_cond_M = np.loadtxt(os.path.join(output_location, 'R_cond_M.txt'))
    R_cond_M_upper = np.loadtxt(os.path.join(output_location, 'R_cond_M_upper.txt'))
    R_cond_M_lower = np.loadtxt(os.path.join(output_location, 'R_cond_M_lower.txt'))

    weights_boot = np.loadtxt(os.path.join(output_location, 'weights_boot.txt'))
    M_cond_R_boot = np.loadtxt(os.path.join(output_location, 'M_cond_R_boot.txt'))
    R_cond_M_boot = np.loadtxt(os.path.join(output_location, 'R_cond_M_boot.txt'))

    n_boot = np.shape(weights_boot)[0]
    deg_choose = int(np.sqrt(np.shape(weights_boot[1])))

    logMass = np.log10(Mass)
    logRadius = np.log10(Radius)
    logMass_sigma = 0.434 * Mass_sigma/Mass
    logRadius_sigma = 0.434 * Radius_sigma/Radius

    mr_lower_boot, mr_upper_boot = mquantiles(M_cond_R_boot,prob=[0.16, 0.84],axis=0,alphap=1,betap=1).data
    rm_lower_boot, rm_upper_boot = mquantiles(R_cond_M_boot,prob=[0.16, 0.84],axis=0,alphap=1,betap=1).data

    fig = plt.figure(figsize=(8.5,6.5))
    plt.rc('axes', labelsize=20)    # fontsize of the x and y labels
    plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
    plt.rc('ytick', labelsize=20)    # fontsize of the tick labels
    ax1 = fig.add_subplot(1,1,1)

    ax1.errorbar(x=logRadius, y=logMass, xerr=logRadius_sigma, yerr=logMass_sigma,fmt='k.',markersize=3, elinewidth=0.3)

    ax1.plot(R_points,M_cond_R,  color='maroon', lw=2) # Full dataset run
    ax1.fill_between(R_points,M_cond_R_lower,M_cond_R_upper,alpha=0.3, color='lightsalmon') # Full dataset run
    ax1.fill_between(R_points,mr_lower_boot,mr_upper_boot,alpha=0.3, color='r') # Bootstrap result

    ax1.plot(R_cond_M, M_points,  color='midnightblue', lw=2) # Full dataset run
    ax1.fill_betweenx(M_points,R_cond_M_lower,R_cond_M_upper,alpha=0.3, color='cornflowerblue') # Full dataset run
    ax1.fill_betweenx(M_points,rm_lower_boot,rm_upper_boot,alpha=0.3, color='b') # Bootstrap result

    mr_mean_line = Line2D([0], [0], color='maroon', lw=2,label='Mean of f(m|r) from full dataset run')
    mr_full = mpatches.Patch(color='lightsalmon', alpha=0.3,  label=r'Quantiles of f(m|r) from full dataset run  ')
    mr_boot = mpatches.Patch(color='r', alpha=0.3, label=r'Quantiles of the MEAN of the f(m|r) from bootstrap')

    rm_mean_line = Line2D([0], [0], color='midnightblue', lw=2,label='Mean of f(r|m) from full dataset run')
    rm_full = mpatches.Patch(color='cornflowerblue', alpha=0.3,  label=r'Quantiles of f(r|m) from full dataset run  ')
    rm_boot = mpatches.Patch(color='b', alpha=0.3, label=r'Quantiles of the MEAN of the f(r|m) from bootstrap')

    handles = [mr_mean_line, mr_full, mr_boot, rm_mean_line, rm_full, rm_boot]

    plt.legend(handles=handles)

    ax1.set_xlabel('log Radius ($R_{\oplus}$)', fontsize = 20)
    ax1.set_ylabel('log Mass ($M_{\oplus}$)', fontsize = 20)
    ax1.set_title('Degrees {}. No. of data points = {}'.format(deg_choose, len(logRadius)))

    plt.rc('axes', labelsize=20)    # fontsize of the x and y labels
    plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
    plt.rc('ytick', labelsize=20)    # fontsize of the tick labels
    plt.show()
    plt.ylim(Mass_min, Mass_max)
    plt.xlim(Radius_min, Radius_max)

    return fig, ax1, handles


def plot_joint_mr_distribution(result_dir, include_conditionals):
    '''
    Use to plot joint distribution of mass AND radius.
    INPUTS:
        result_dir : Directory generated by the fitting function.
            Example: result_dir = '~/mrexo_working/trial_result'

    EXAMPLE:
        # Sample script to plot M-R data and fit.
        from mrexo import plot_mr_relation
        import os

        pwd = '~/mrexo_working/'
        result_dir = os.path.join(pwd,'Results_deg_12')

        plot_joint_mr_distribution(result_dir)

    '''

    input_location = os.path.join(result_dir, 'input')
    output_location = os.path.join(result_dir, 'output')

    t = Table.read(os.path.join(input_location, 'MR_inputs.csv'))
    Mass = t['pl_masse']
    Mass_sigma = t['pl_masseerr1']
    Radius = t['pl_rade']
    Radius_sigma = t['pl_radeerr1']

    logMass = np.log10(Mass)
    logRadius = np.log10(Radius)
    logMass_sigma = 0.434 * Mass_sigma/Mass
    logRadius_sigma = 0.434 * Radius_sigma/Radius

    Mass_min, Mass_max = np.loadtxt(os.path.join(input_location, 'Mass_bounds.txt'))
    Radius_min, Radius_max = np.loadtxt(os.path.join(input_location, 'Radius_bounds.txt'))

    joint = np.loadtxt(os.path.join(output_location,'joint_distribution.txt'))

    if include_conditionals == True:
        fig, ax1, handles = plot_mr_and_rm(result_dir)
    else:
        fig = plt.figure(figsize=(8.5,6.5))
        ax1 = fig.add_subplot(1,1,1)

    plt.rc('axes', labelsize=20)    # fontsize of the x and y labels
    plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
    plt.rc('ytick', labelsize=20)    # fontsize of the tick labels

    ax1.errorbar(x=logRadius, y=logMass, xerr=logRadius_sigma, yerr=logMass_sigma,fmt='k.',markersize=3, elinewidth=0.3)
    ax1.tick_params(which = 'both',  labeltop = False, top = False, labelright = False, right = False, labelsize = 22)

    im = ax1.imshow(joint, cmap = 'coolwarm', extent=[Radius_min, Radius_max, Mass_min, Mass_max], origin = 'lower', aspect = 0.3)
    cbar = fig.colorbar(im, ticks=[np.min(joint), np.max(joint)])
    cbar.ax.set_yticklabels(['Min', 'Max'])
    #plt.colorbar(im)


    plt.ylim(Mass_min, Mass_max)
    plt.xlim(Radius_min, Radius_max)

    plt.xlabel('log Radius ($R_{\oplus}$)', fontsize = 20)
    plt.ylabel('log Mass ($M_{\oplus}$)', fontsize = 20)

    plt.show()

    return ax1
    
    
def plot_mass_pdf(result_dir,query_radius):
    '''
    
    
    
    '''
    
    input_location = os.path.join(result_dir, 'input')
    output_location = os.path.join(result_dir, 'output')

    R_points = np.loadtxt(os.path.join(output_location, 'R_points.txt'))
    M_points = np.loadtxt(os.path.join(output_location, 'M_points.txt'))

    weights_mle = np.loadtxt(os.path.join(output_location,'weights.txt'))
    weights_boot = np.loadtxt(os.path.join(output_location,'weights_boot.txt'))
    degree = int(np.sqrt(len(weights_mle)))
    deg_vec = np.arange(1,degree+1)

    Mass_min, Mass_max = np.loadtxt(os.path.join(input_location, 'Mass_bounds.txt'))
    Radius_min, Radius_max = np.loadtxt(os.path.join(input_location, 'Radius_bounds.txt'))

    for r in query_radius:
        pdf_interp, lower_boot, upper_boot = find_mass_probability_distribution_function(r, Radius_min, Radius_max, Mass_max, Mass_min, weights_mle, weights_boot, degree, deg_vec, M_points)
    
        plt.plot(M_points[:-1], pdf_interp)
        plt.fill_between(M_points[:-1], lower_boot,upper_boot,alpha=0.3)
        
    
    
  


    
