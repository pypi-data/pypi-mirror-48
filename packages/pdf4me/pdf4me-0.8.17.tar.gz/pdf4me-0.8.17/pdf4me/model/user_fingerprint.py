# coding: utf-8

"""
    DmsApi

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserFingerprint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_adress': 'str',
        'browser': 'str'
    }

    attribute_map = {
        'ip_adress': 'ipAdress',
        'browser': 'browser'
    }

    def __init__(self, ip_adress=None, browser=None):  # noqa: E501
        """UserFingerprint - a model defined in Swagger"""  # noqa: E501

        self._ip_adress = None
        self._browser = None
        self.discriminator = None

        if ip_adress is not None:
            self.ip_adress = ip_adress
        if browser is not None:
            self.browser = browser

    @property
    def ip_adress(self):
        """Gets the ip_adress of this UserFingerprint.  # noqa: E501


        :return: The ip_adress of this UserFingerprint.  # noqa: E501
        :rtype: str
        """
        return self._ip_adress

    @ip_adress.setter
    def ip_adress(self, ip_adress):
        """Sets the ip_adress of this UserFingerprint.


        :param ip_adress: The ip_adress of this UserFingerprint.  # noqa: E501
        :type: str
        """

        self._ip_adress = ip_adress

    @property
    def browser(self):
        """Gets the browser of this UserFingerprint.  # noqa: E501


        :return: The browser of this UserFingerprint.  # noqa: E501
        :rtype: str
        """
        return self._browser

    @browser.setter
    def browser(self, browser):
        """Sets the browser of this UserFingerprint.


        :param browser: The browser of this UserFingerprint.  # noqa: E501
        :type: str
        """

        self._browser = browser

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserFingerprint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
