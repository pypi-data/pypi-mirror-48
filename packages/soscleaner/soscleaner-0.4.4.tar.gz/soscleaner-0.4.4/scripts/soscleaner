#!/usr/bin/env python2
# SOSCleaner Executable

from soscleaner import SOSCleaner
from optparse import OptionParser
import os
import sys


def main():

    parser = OptionParser(usage="%prog <OPTIONS> /path/to/sosreport", version="%prog 0.4.4")
    parser.add_option("-l", "--log_level", dest="loglevel", default='INFO',
                            help="The Desired Log Level (default = INFO) Options are DEBUG, INFO, WARNING, ERROR",
                            metavar="LOGLEVEL")
    parser.add_option("-d", "--domain", action="append", default=[], dest="domains",
                            help="additional domain to obfuscate (optional). use a flag for each additional domain",
                            metavar="DOMAIN")
    parser.add_option("-f", "--file", action="append", default=[], dest="files",
                            help="additional files to be analyzed in addition to or in exception of sosreport",
                            metavar="FILES")
    parser.add_option("-q", "--quiet", action="store_true", default=False, dest='quiet',
                            help="disable output to STDOUT",
                            metavar="QUIET")
    parser.add_option("-k", "--keyword", action="append", default=[], dest="keywords",
                            help="additional keywords to obfuscate. use multiple times for multiple keywords",
                            metavar="KEYWORD")
    parser.add_option("-K", "--keywords_file", action="store", dest="keywords_file",
                            help="line-delimited list of keywords to obfuscate",
                            metavar="KEYWORDS_FILE")
    parser.add_option("-H", "--hostname-path", action="store", default="hostname", dest="hostname_path",
                            help="optional path to hostname file.",
                            metavar="HOSTNAMEPATH")
    parser.add_option("-n", "--network", action="append", default=[], dest="networks",
                            help="networks to be obfuscatedi (optional). by default it looks through known routes to generate a list from a sosreport",
                            metavar="NETWORK")
    parser.add_option("-u", "--user", action="append", default=[], dest="users",
                            help="additional usernames to obfuscate in the sosreport or dataset - one user per flag",
                            metavar="USER")
    parser.add_option("-U", "--users-file", action="store", dest="users_file",
                            help="line-delimited list of users to obfuscate",
                            metavar="USERS_FILE")
    parser.add_option("-o", "--output-dir", action="store", default="/tmp", dest="report_dir",
                            help="Directory to store soscleaner obfuscated sosreport or dataset",
                            metavar="DIRECTORY")
    parser.add_option("-m", "--macs", action="store_true", default=False, dest='obfuscate_macs',
                            help="disable MAC address obfuscation",
                            metavar="MACS")

    (options, args) = parser.parse_args()
    if not args and not options.files:  # we don't have an sosreport
        parser.print_help()
        sys.exit(1)

    cleaner = SOSCleaner(quiet=options.quiet)

    sosreport = None
    if args:
        for arg in args:
            file = os.path.isfile(arg)
            if file == True:
                sosreport = args[0]  # grab the sosreport path
            else:
                print("ERROR: No presence of an existing file to sanitize detected")
                sys.exit(1)

    cleaner.clean_report(options, sosreport)


if __name__ == '__main__':
    main()
