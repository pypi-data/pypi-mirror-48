# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_MEDCouplingCompat')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_MEDCouplingCompat')
    _MEDCouplingCompat = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MEDCouplingCompat', [dirname(__file__)])
        except ImportError:
            import _MEDCouplingCompat
            return _MEDCouplingCompat
        try:
            _mod = imp.load_module('_MEDCouplingCompat', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _MEDCouplingCompat = swig_import_helper()
    del swig_import_helper
else:
    import _MEDCouplingCompat
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingCompat.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _MEDCouplingCompat.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _MEDCouplingCompat.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _MEDCouplingCompat.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _MEDCouplingCompat.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _MEDCouplingCompat.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _MEDCouplingCompat.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _MEDCouplingCompat.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _MEDCouplingCompat.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _MEDCouplingCompat.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _MEDCouplingCompat.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _MEDCouplingCompat.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _MEDCouplingCompat.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _MEDCouplingCompat.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _MEDCouplingCompat.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _MEDCouplingCompat.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _MEDCouplingCompat.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _MEDCouplingCompat.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ivec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ivec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ivec, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _MEDCouplingCompat.ivec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _MEDCouplingCompat.ivec___nonzero__(self)

    def __bool__(self) -> "bool":
        return _MEDCouplingCompat.ivec___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _MEDCouplingCompat.ivec___len__(self)

    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        return _MEDCouplingCompat.ivec___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _MEDCouplingCompat.ivec___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        return _MEDCouplingCompat.ivec___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _MEDCouplingCompat.ivec___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _MEDCouplingCompat.ivec___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _MEDCouplingCompat.ivec___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _MEDCouplingCompat.ivec_pop(self)

    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _MEDCouplingCompat.ivec_append(self, x)

    def empty(self) -> "bool":
        return _MEDCouplingCompat.ivec_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _MEDCouplingCompat.ivec_size(self)

    def swap(self, v: 'ivec') -> "void":
        return _MEDCouplingCompat.ivec_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _MEDCouplingCompat.ivec_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _MEDCouplingCompat.ivec_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _MEDCouplingCompat.ivec_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _MEDCouplingCompat.ivec_rend(self)

    def clear(self) -> "void":
        return _MEDCouplingCompat.ivec_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _MEDCouplingCompat.ivec_get_allocator(self)

    def pop_back(self) -> "void":
        return _MEDCouplingCompat.ivec_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _MEDCouplingCompat.ivec_erase(self, *args)

    def __init__(self, *args):
        this = _MEDCouplingCompat.new_ivec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _MEDCouplingCompat.ivec_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _MEDCouplingCompat.ivec_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _MEDCouplingCompat.ivec_back(self)

    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        return _MEDCouplingCompat.ivec_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _MEDCouplingCompat.ivec_resize(self, *args)

    def insert(self, *args) -> "void":
        return _MEDCouplingCompat.ivec_insert(self, *args)

    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        return _MEDCouplingCompat.ivec_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _MEDCouplingCompat.ivec_capacity(self)
    __swig_destroy__ = _MEDCouplingCompat.delete_ivec
    __del__ = lambda self: None
ivec_swigregister = _MEDCouplingCompat.ivec_swigregister
ivec_swigregister(ivec)

class dvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dvec, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _MEDCouplingCompat.dvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _MEDCouplingCompat.dvec___nonzero__(self)

    def __bool__(self) -> "bool":
        return _MEDCouplingCompat.dvec___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _MEDCouplingCompat.dvec___len__(self)

    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        return _MEDCouplingCompat.dvec___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _MEDCouplingCompat.dvec___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        return _MEDCouplingCompat.dvec___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _MEDCouplingCompat.dvec___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _MEDCouplingCompat.dvec___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _MEDCouplingCompat.dvec___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _MEDCouplingCompat.dvec_pop(self)

    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _MEDCouplingCompat.dvec_append(self, x)

    def empty(self) -> "bool":
        return _MEDCouplingCompat.dvec_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _MEDCouplingCompat.dvec_size(self)

    def swap(self, v: 'dvec') -> "void":
        return _MEDCouplingCompat.dvec_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _MEDCouplingCompat.dvec_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _MEDCouplingCompat.dvec_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _MEDCouplingCompat.dvec_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _MEDCouplingCompat.dvec_rend(self)

    def clear(self) -> "void":
        return _MEDCouplingCompat.dvec_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _MEDCouplingCompat.dvec_get_allocator(self)

    def pop_back(self) -> "void":
        return _MEDCouplingCompat.dvec_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _MEDCouplingCompat.dvec_erase(self, *args)

    def __init__(self, *args):
        this = _MEDCouplingCompat.new_dvec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _MEDCouplingCompat.dvec_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _MEDCouplingCompat.dvec_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _MEDCouplingCompat.dvec_back(self)

    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        return _MEDCouplingCompat.dvec_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _MEDCouplingCompat.dvec_resize(self, *args)

    def insert(self, *args) -> "void":
        return _MEDCouplingCompat.dvec_insert(self, *args)

    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        return _MEDCouplingCompat.dvec_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _MEDCouplingCompat.dvec_capacity(self)
    __swig_destroy__ = _MEDCouplingCompat.delete_dvec
    __del__ = lambda self: None
dvec_swigregister = _MEDCouplingCompat.dvec_swigregister
dvec_swigregister(dvec)

class svec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svec, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _MEDCouplingCompat.svec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _MEDCouplingCompat.svec___nonzero__(self)

    def __bool__(self) -> "bool":
        return _MEDCouplingCompat.svec___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _MEDCouplingCompat.svec___len__(self)

    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
        return _MEDCouplingCompat.svec___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _MEDCouplingCompat.svec___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
        return _MEDCouplingCompat.svec___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _MEDCouplingCompat.svec___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _MEDCouplingCompat.svec___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _MEDCouplingCompat.svec___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _MEDCouplingCompat.svec_pop(self)

    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _MEDCouplingCompat.svec_append(self, x)

    def empty(self) -> "bool":
        return _MEDCouplingCompat.svec_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _MEDCouplingCompat.svec_size(self)

    def swap(self, v: 'svec') -> "void":
        return _MEDCouplingCompat.svec_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _MEDCouplingCompat.svec_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _MEDCouplingCompat.svec_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _MEDCouplingCompat.svec_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _MEDCouplingCompat.svec_rend(self)

    def clear(self) -> "void":
        return _MEDCouplingCompat.svec_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _MEDCouplingCompat.svec_get_allocator(self)

    def pop_back(self) -> "void":
        return _MEDCouplingCompat.svec_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _MEDCouplingCompat.svec_erase(self, *args)

    def __init__(self, *args):
        this = _MEDCouplingCompat.new_svec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _MEDCouplingCompat.svec_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _MEDCouplingCompat.svec_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _MEDCouplingCompat.svec_back(self)

    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
        return _MEDCouplingCompat.svec_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _MEDCouplingCompat.svec_resize(self, *args)

    def insert(self, *args) -> "void":
        return _MEDCouplingCompat.svec_insert(self, *args)

    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
        return _MEDCouplingCompat.svec_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _MEDCouplingCompat.svec_capacity(self)
    __swig_destroy__ = _MEDCouplingCompat.delete_svec
    __del__ = lambda self: None
svec_swigregister = _MEDCouplingCompat.svec_swigregister
svec_swigregister(svec)

class InterpKernelException(Exception):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpKernelException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InterpKernelException, name)
    __repr__ = _swig_repr

    def __init__(self, what: 'char const *'):
        """
        __init__(INTERP_KERNEL::Exception self, char const * what) -> InterpKernelException

        1
        """
        this = _MEDCouplingCompat.new_InterpKernelException(what)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MEDCouplingCompat.delete_InterpKernelException
    __del__ = lambda self: None

    def what(self) -> "char const *":
        """
        what(InterpKernelException self) -> char const *

        1
        """
        return _MEDCouplingCompat.InterpKernelException_what(self)


    def __str__(self) -> "std::string":
        """
        __str__(InterpKernelException self) -> std::string

        1
        """
        return _MEDCouplingCompat.InterpKernelException___str__(self)

InterpKernelException_swigregister = _MEDCouplingCompat.InterpKernelException_swigregister
InterpKernelException_swigregister(InterpKernelException)

class TimeLabel(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeLabel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeLabel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def declareAsNew(self) -> "void":
        """
        declareAsNew(TimeLabel self)

        1
        """
        return _MEDCouplingCompat.TimeLabel_declareAsNew(self)


    def updateTime(self) -> "void":
        """
        updateTime(TimeLabel self)

        1
        """
        return _MEDCouplingCompat.TimeLabel_updateTime(self)


    def getTimeOfThis(self) -> "unsigned int":
        """
        getTimeOfThis(TimeLabel self) -> unsigned int

        1
        """
        return _MEDCouplingCompat.TimeLabel_getTimeOfThis(self)

TimeLabel_swigregister = _MEDCouplingCompat.TimeLabel_swigregister
TimeLabel_swigregister(TimeLabel)

DeallocType_C_DEALLOC = _MEDCouplingCompat.DeallocType_C_DEALLOC
DeallocType_CPP_DEALLOC = _MEDCouplingCompat.DeallocType_CPP_DEALLOC

def MEDCouplingVersionStr() -> "char const *":
    """
    MEDCouplingVersionStr() -> char const *

    1
    """
    return _MEDCouplingCompat.MEDCouplingVersionStr()

def MEDCouplingVersion() -> "int":
    """
    MEDCouplingVersion() -> int

    1
    """
    return _MEDCouplingCompat.MEDCouplingVersion()

def MEDCouplingSizeOfVoidStar() -> "int":
    """
    MEDCouplingSizeOfVoidStar() -> int

    1
    """
    return _MEDCouplingCompat.MEDCouplingSizeOfVoidStar()

def MEDCouplingSizeOfIDs() -> "int":
    """
    MEDCouplingSizeOfIDs() -> int

    1
    """
    return _MEDCouplingCompat.MEDCouplingSizeOfIDs()

def MEDCouplingByteOrder() -> "bool":
    """
    MEDCouplingByteOrder() -> bool

    1
    """
    return _MEDCouplingCompat.MEDCouplingByteOrder()

def MEDCouplingByteOrderStr() -> "char const *":
    """
    MEDCouplingByteOrderStr() -> char const *

    1
    """
    return _MEDCouplingCompat.MEDCouplingByteOrderStr()

def IsCXX11Compiled() -> "bool":
    """
    IsCXX11Compiled() -> bool

    1
    """
    return _MEDCouplingCompat.IsCXX11Compiled()
class BigMemoryObject(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BigMemoryObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BigMemoryObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getHeapMemorySize(self) -> "std::size_t":
        """
        getHeapMemorySize(BigMemoryObject self) -> std::size_t

        1
        """
        return _MEDCouplingCompat.BigMemoryObject_getHeapMemorySize(self)


    def getHeapMemorySizeStr(self) -> "std::string":
        """
        getHeapMemorySizeStr(BigMemoryObject self) -> std::string

        1
        """
        return _MEDCouplingCompat.BigMemoryObject_getHeapMemorySizeStr(self)


    def isObjectInTheProgeny(self, obj: 'BigMemoryObject') -> "bool":
        """
        isObjectInTheProgeny(BigMemoryObject self, BigMemoryObject obj) -> bool

        1
        """
        return _MEDCouplingCompat.BigMemoryObject_isObjectInTheProgeny(self, obj)


    def getHeapMemorySizeWithoutChildren(self) -> "std::size_t":
        """
        getHeapMemorySizeWithoutChildren(BigMemoryObject self) -> std::size_t

        1
        """
        return _MEDCouplingCompat.BigMemoryObject_getHeapMemorySizeWithoutChildren(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_BigMemoryObject
    __del__ = lambda self: None

    def getDirectChildren(self) -> "PyObject *":
        """
        getDirectChildren(BigMemoryObject self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.BigMemoryObject_getDirectChildren(self)


    def getAllTheProgeny(self) -> "PyObject *":
        """
        getAllTheProgeny(BigMemoryObject self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.BigMemoryObject_getAllTheProgeny(self)


    def GetHeapMemorySizeOfObjs(objs: 'PyObject *') -> "std::size_t":
        """
        GetHeapMemorySizeOfObjs(PyObject * objs) -> std::size_t

        1
        """
        return _MEDCouplingCompat.BigMemoryObject_GetHeapMemorySizeOfObjs(objs)

    GetHeapMemorySizeOfObjs = staticmethod(GetHeapMemorySizeOfObjs)
BigMemoryObject_swigregister = _MEDCouplingCompat.BigMemoryObject_swigregister
BigMemoryObject_swigregister(BigMemoryObject)

def BigMemoryObject_GetHeapMemorySizeOfObjs(objs: 'PyObject *') -> "std::size_t":
    """
    BigMemoryObject_GetHeapMemorySizeOfObjs(PyObject * objs) -> std::size_t

    1
    """
    return _MEDCouplingCompat.BigMemoryObject_GetHeapMemorySizeOfObjs(objs)

class RefCountObjectOnly(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefCountObjectOnly, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefCountObjectOnly, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def decrRef(self) -> "bool":
        """
        decrRef(RefCountObjectOnly self) -> bool

        1
        """
        return _MEDCouplingCompat.RefCountObjectOnly_decrRef(self)


    def incrRef(self) -> "void":
        """
        incrRef(RefCountObjectOnly self)

        1
        """
        return _MEDCouplingCompat.RefCountObjectOnly_incrRef(self)


    def getRCValue(self) -> "int":
        """
        getRCValue(RefCountObjectOnly self) -> int

        1
        """
        return _MEDCouplingCompat.RefCountObjectOnly_getRCValue(self)

RefCountObjectOnly_swigregister = _MEDCouplingCompat.RefCountObjectOnly_swigregister
RefCountObjectOnly_swigregister(RefCountObjectOnly)

class RefCountObject(RefCountObjectOnly, BigMemoryObject):
    """1"""

    __swig_setmethods__ = {}
    for _s in [RefCountObjectOnly, BigMemoryObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefCountObject, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObjectOnly, BigMemoryObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefCountObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getHiddenCppPointer(self) -> "std::string":
        """
        getHiddenCppPointer(RefCountObject self) -> std::string

        1
        """
        return _MEDCouplingCompat.RefCountObject_getHiddenCppPointer(self)

RefCountObject_swigregister = _MEDCouplingCompat.RefCountObject_swigregister
RefCountObject_swigregister(RefCountObject)

class GlobalDict(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlobalDict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GlobalDict, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetInstance() -> "MEDCoupling::GlobalDict *":
        """
        GetInstance() -> GlobalDict

        1
        """
        return _MEDCouplingCompat.GlobalDict_GetInstance()

    GetInstance = staticmethod(GetInstance)

    def hasKey(self, key: 'std::string const &') -> "bool":
        """
        hasKey(GlobalDict self, std::string const & key) -> bool

        1
        """
        return _MEDCouplingCompat.GlobalDict_hasKey(self, key)


    def value(self, key: 'std::string const &') -> "std::string":
        """
        value(GlobalDict self, std::string const & key) -> std::string

        1
        """
        return _MEDCouplingCompat.GlobalDict_value(self, key)


    def keys(self) -> "std::vector< std::string,std::allocator< std::string > >":
        """
        keys(GlobalDict self) -> svec

        1
        """
        return _MEDCouplingCompat.GlobalDict_keys(self)


    def erase(self, key: 'std::string const &') -> "void":
        """
        erase(GlobalDict self, std::string const & key)

        1
        """
        return _MEDCouplingCompat.GlobalDict_erase(self, key)


    def clear(self) -> "void":
        """
        clear(GlobalDict self)

        1
        """
        return _MEDCouplingCompat.GlobalDict_clear(self)


    def setKeyValue(self, key: 'std::string const &', value: 'std::string const &') -> "void":
        """
        setKeyValue(GlobalDict self, std::string const & key, std::string const & value)

        1
        """
        return _MEDCouplingCompat.GlobalDict_setKeyValue(self, key, value)


    def setKeyValueForce(self, key: 'std::string const &', value: 'std::string const &') -> "void":
        """
        setKeyValueForce(GlobalDict self, std::string const & key, std::string const & value)

        1
        """
        return _MEDCouplingCompat.GlobalDict_setKeyValueForce(self, key, value)


    def __str__(self) -> "std::string":
        """
        __str__(GlobalDict self) -> std::string

        1
        """
        return _MEDCouplingCompat.GlobalDict___str__(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_GlobalDict
    __del__ = lambda self: None
GlobalDict_swigregister = _MEDCouplingCompat.GlobalDict_swigregister
GlobalDict_swigregister(GlobalDict)

def GlobalDict_GetInstance() -> "MEDCoupling::GlobalDict *":
    """
    GlobalDict_GetInstance() -> GlobalDict

    1
    """
    return _MEDCouplingCompat.GlobalDict_GetInstance()


def MEDCouplingVersionMajMinRel() -> "PyObject *":
    """
    MEDCouplingVersionMajMinRel() -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingVersionMajMinRel()

def MEDCouplingHasNumPyBindings() -> "bool":
    """
    MEDCouplingHasNumPyBindings() -> bool

    1
    """
    return _MEDCouplingCompat.MEDCouplingHasNumPyBindings()

def MEDCouplingHasSciPyBindings() -> "bool":
    """
    MEDCouplingHasSciPyBindings() -> bool

    1
    """
    return _MEDCouplingCompat.MEDCouplingHasSciPyBindings()

def MEDCouplingCompletionScript() -> "std::string":
    """
    MEDCouplingCompletionScript() -> std::string

    1
    """
    return _MEDCouplingCompat.MEDCouplingCompletionScript()

def INTERPKERNELExceptionReduceFunct(a,b):
    ret=InterpKernelException.__new__(a)
    ret.__init__(*b)
    return ret
def INTERPKERNELExceptionReduce(self):
    return INTERPKERNELExceptionReduceFunct,(InterpKernelException,(self.what(),))

AX_CART = _MEDCouplingCompat.AX_CART
AX_CYL = _MEDCouplingCompat.AX_CYL
AX_SPHER = _MEDCouplingCompat.AX_SPHER
class MapII(RefCountObject, TimeLabel):
    """1"""

    __swig_setmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapII, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MapII, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New() -> "MCAuto< MEDCoupling::MapII >":
        """
        New() -> MCAuto< MEDCoupling::MapII >

        1
        """
        return _MEDCouplingCompat.MapII_New()

    New = staticmethod(New)
    __swig_destroy__ = _MEDCouplingCompat.delete_MapII
    __del__ = lambda self: None
MapII_swigregister = _MEDCouplingCompat.MapII_swigregister
MapII_swigregister(MapII)

def MapII_New() -> "MCAuto< MEDCoupling::MapII >":
    """
    MapII_New() -> MCAuto< MEDCoupling::MapII >

    1
    """
    return _MEDCouplingCompat.MapII_New()

class PartDefinition(RefCountObject, TimeLabel):
    """1"""

    __swig_setmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PartDefinition, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New(*args) -> "MEDCoupling::PartDefinition *":
        """
        New(int start, int stop, int step) -> PartDefinition
        New(DataArrayInt listOfIds) -> PartDefinition

        1
        """
        return _MEDCouplingCompat.PartDefinition_New(*args)

    New = staticmethod(New)

    def toDAI(self) -> "MEDCoupling::DataArrayInt *":
        """
        toDAI(PartDefinition self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.PartDefinition_toDAI(self)


    def getNumberOfElems(self) -> "int":
        """
        getNumberOfElems(PartDefinition self) -> int

        1
        """
        return _MEDCouplingCompat.PartDefinition_getNumberOfElems(self)


    def getRepr(self) -> "std::string":
        """
        getRepr(PartDefinition self) -> std::string

        1
        """
        return _MEDCouplingCompat.PartDefinition_getRepr(self)


    def composeWith(self, other: 'PartDefinition') -> "MEDCoupling::PartDefinition *":
        """
        composeWith(PartDefinition self, PartDefinition other) -> PartDefinition

        1
        """
        return _MEDCouplingCompat.PartDefinition_composeWith(self, other)


    def checkConsistencyLight(self) -> "void":
        """
        checkConsistencyLight(PartDefinition self)

        1
        """
        return _MEDCouplingCompat.PartDefinition_checkConsistencyLight(self)


    def tryToSimplify(self) -> "MEDCoupling::PartDefinition *":
        """
        tryToSimplify(PartDefinition self) -> PartDefinition

        1
        """
        return _MEDCouplingCompat.PartDefinition_tryToSimplify(self)


    def __add__(self, other: 'PartDefinition') -> "MEDCoupling::PartDefinition *":
        """
        __add__(PartDefinition self, PartDefinition other) -> PartDefinition

        1
        """
        return _MEDCouplingCompat.PartDefinition___add__(self, other)


    def isEqual(self, other: 'PartDefinition') -> "PyObject *":
        """
        isEqual(PartDefinition self, PartDefinition other) -> PyObject *

        1
        """
        return _MEDCouplingCompat.PartDefinition_isEqual(self, other)


    def deepCopy(self) -> "PyObject *":
        """
        deepCopy(PartDefinition self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.PartDefinition_deepCopy(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_PartDefinition
    __del__ = lambda self: None
PartDefinition_swigregister = _MEDCouplingCompat.PartDefinition_swigregister
PartDefinition_swigregister(PartDefinition)

def PartDefinition_New(*args) -> "MEDCoupling::PartDefinition *":
    """
    New(int start, int stop, int step) -> PartDefinition
    PartDefinition_New(DataArrayInt listOfIds) -> PartDefinition

    1
    """
    return _MEDCouplingCompat.PartDefinition_New(*args)

class DataArrayPartDefinition(PartDefinition):
    """1"""

    __swig_setmethods__ = {}
    for _s in [PartDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayPartDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [PartDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayPartDefinition, name)

    def New(listOfIds: 'DataArrayInt') -> "MEDCoupling::DataArrayPartDefinition *":
        """
        New(DataArrayInt listOfIds) -> DataArrayPartDefinition

        1
        """
        return _MEDCouplingCompat.DataArrayPartDefinition_New(listOfIds)

    New = staticmethod(New)

    def __init__(self, listOfIds: 'DataArrayInt'):
        """
        __init__(MEDCoupling::DataArrayPartDefinition self, DataArrayInt listOfIds) -> DataArrayPartDefinition

        1
        """
        this = _MEDCouplingCompat.new_DataArrayPartDefinition(listOfIds)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        """
        __str__(DataArrayPartDefinition self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayPartDefinition___str__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(DataArrayPartDefinition self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayPartDefinition___repr__(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayPartDefinition
    __del__ = lambda self: None
DataArrayPartDefinition_swigregister = _MEDCouplingCompat.DataArrayPartDefinition_swigregister
DataArrayPartDefinition_swigregister(DataArrayPartDefinition)

def DataArrayPartDefinition_New(listOfIds: 'DataArrayInt') -> "MEDCoupling::DataArrayPartDefinition *":
    """
    DataArrayPartDefinition_New(DataArrayInt listOfIds) -> DataArrayPartDefinition

    1
    """
    return _MEDCouplingCompat.DataArrayPartDefinition_New(listOfIds)

class SlicePartDefinition(PartDefinition):
    """1"""

    __swig_setmethods__ = {}
    for _s in [PartDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlicePartDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [PartDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SlicePartDefinition, name)

    def New(start: 'int', stop: 'int', step: 'int') -> "MEDCoupling::SlicePartDefinition *":
        """
        New(int start, int stop, int step) -> SlicePartDefinition

        1
        """
        return _MEDCouplingCompat.SlicePartDefinition_New(start, stop, step)

    New = staticmethod(New)

    def getEffectiveStop(self) -> "int":
        """
        getEffectiveStop(SlicePartDefinition self) -> int

        1
        """
        return _MEDCouplingCompat.SlicePartDefinition_getEffectiveStop(self)


    def __init__(self, start: 'int', stop: 'int', step: 'int'):
        """
        __init__(MEDCoupling::SlicePartDefinition self, int start, int stop, int step) -> SlicePartDefinition

        1
        """
        this = _MEDCouplingCompat.new_SlicePartDefinition(start, stop, step)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getSlice(self) -> "PyObject *":
        """
        getSlice(SlicePartDefinition self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.SlicePartDefinition_getSlice(self)


    def __str__(self) -> "std::string":
        """
        __str__(SlicePartDefinition self) -> std::string

        1
        """
        return _MEDCouplingCompat.SlicePartDefinition___str__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(SlicePartDefinition self) -> std::string

        1
        """
        return _MEDCouplingCompat.SlicePartDefinition___repr__(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_SlicePartDefinition
    __del__ = lambda self: None
SlicePartDefinition_swigregister = _MEDCouplingCompat.SlicePartDefinition_swigregister
SlicePartDefinition_swigregister(SlicePartDefinition)

def SlicePartDefinition_New(start: 'int', stop: 'int', step: 'int') -> "MEDCoupling::SlicePartDefinition *":
    """
    SlicePartDefinition_New(int start, int stop, int step) -> SlicePartDefinition

    1
    """
    return _MEDCouplingCompat.SlicePartDefinition_New(start, stop, step)

class DataArray(RefCountObject, TimeLabel):
    """1"""

    __swig_setmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArray, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArray, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setName(self, name: 'std::string const &') -> "void":
        """
        setName(DataArray self, std::string const & name)

        1
        """
        return _MEDCouplingCompat.DataArray_setName(self, name)


    def copyStringInfoFrom(self, other: 'DataArray') -> "void":
        """
        copyStringInfoFrom(DataArray self, DataArray other)

        1
        """
        return _MEDCouplingCompat.DataArray_copyStringInfoFrom(self, other)


    def areInfoEqualsIfNotWhy(self, other: 'DataArray', reason: 'std::string &') -> "bool":
        """
        areInfoEqualsIfNotWhy(DataArray self, DataArray other, std::string & reason) -> bool

        1
        """
        return _MEDCouplingCompat.DataArray_areInfoEqualsIfNotWhy(self, other, reason)


    def areInfoEquals(self, other: 'DataArray') -> "bool":
        """
        areInfoEquals(DataArray self, DataArray other) -> bool

        1
        """
        return _MEDCouplingCompat.DataArray_areInfoEquals(self, other)


    def cppRepr(self, varName: 'std::string const &') -> "std::string":
        """
        cppRepr(DataArray self, std::string const & varName) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArray_cppRepr(self, varName)


    def getName(self) -> "std::string":
        """
        getName(DataArray self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArray_getName(self)


    def setInfoOnComponents(self, info: 'svec') -> "void":
        """
        setInfoOnComponents(DataArray self, svec info)

        1
        """
        return _MEDCouplingCompat.DataArray_setInfoOnComponents(self, info)


    def setInfoAndChangeNbOfCompo(self, info: 'svec') -> "void":
        """
        setInfoAndChangeNbOfCompo(DataArray self, svec info)

        1
        """
        return _MEDCouplingCompat.DataArray_setInfoAndChangeNbOfCompo(self, info)


    def getVarsOnComponent(self) -> "std::vector< std::string,std::allocator< std::string > >":
        """
        getVarsOnComponent(DataArray self) -> svec

        1
        """
        return _MEDCouplingCompat.DataArray_getVarsOnComponent(self)


    def getUnitsOnComponent(self) -> "std::vector< std::string,std::allocator< std::string > >":
        """
        getUnitsOnComponent(DataArray self) -> svec

        1
        """
        return _MEDCouplingCompat.DataArray_getUnitsOnComponent(self)


    def getInfoOnComponent(self, i: 'int') -> "std::string":
        """
        getInfoOnComponent(DataArray self, int i) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArray_getInfoOnComponent(self, i)


    def getVarOnComponent(self, i: 'int') -> "std::string":
        """
        getVarOnComponent(DataArray self, int i) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArray_getVarOnComponent(self, i)


    def getUnitOnComponent(self, i: 'int') -> "std::string":
        """
        getUnitOnComponent(DataArray self, int i) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArray_getUnitOnComponent(self, i)


    def setInfoOnComponent(self, i: 'int', info: 'std::string const &') -> "void":
        """
        setInfoOnComponent(DataArray self, int i, std::string const & info)

        1
        """
        return _MEDCouplingCompat.DataArray_setInfoOnComponent(self, i, info)


    def getNumberOfComponents(self) -> "int":
        """
        getNumberOfComponents(DataArray self) -> int

        1
        """
        return _MEDCouplingCompat.DataArray_getNumberOfComponents(self)


    def alloc(self, nbOfTuple: 'int', nbOfCompo: 'int'=1) -> "void":
        """
        alloc(DataArray self, int nbOfTuple, int nbOfCompo=1)
        alloc(DataArray self, int nbOfTuple)

        1
        """
        return _MEDCouplingCompat.DataArray_alloc(self, nbOfTuple, nbOfCompo)


    def reAlloc(self, nbOfTuples: 'int') -> "void":
        """
        reAlloc(DataArray self, int nbOfTuples)

        1
        """
        return _MEDCouplingCompat.DataArray_reAlloc(self, nbOfTuples)


    def isAllocated(self) -> "bool":
        """
        isAllocated(DataArray self) -> bool

        1
        """
        return _MEDCouplingCompat.DataArray_isAllocated(self)


    def checkAllocated(self) -> "void":
        """
        checkAllocated(DataArray self)

        1
        """
        return _MEDCouplingCompat.DataArray_checkAllocated(self)


    def desallocate(self) -> "void":
        """
        desallocate(DataArray self)

        1
        """
        return _MEDCouplingCompat.DataArray_desallocate(self)


    def getNumberOfTuples(self) -> "int":
        """
        getNumberOfTuples(DataArray self) -> int

        1
        """
        return _MEDCouplingCompat.DataArray_getNumberOfTuples(self)


    def getNbOfElems(self) -> "std::size_t":
        """
        getNbOfElems(DataArray self) -> std::size_t

        1
        """
        return _MEDCouplingCompat.DataArray_getNbOfElems(self)


    def getNbOfElemAllocated(self) -> "std::size_t":
        """
        getNbOfElemAllocated(DataArray self) -> std::size_t

        1
        """
        return _MEDCouplingCompat.DataArray_getNbOfElemAllocated(self)


    def deepCopy(self) -> "MEDCoupling::DataArray *":
        """
        deepCopy(DataArray self) -> DataArray

        1
        """
        return _MEDCouplingCompat.DataArray_deepCopy(self)


    def buildNewEmptyInstance(self) -> "MEDCoupling::DataArray *":
        """
        buildNewEmptyInstance(DataArray self) -> DataArray

        1
        """
        return _MEDCouplingCompat.DataArray_buildNewEmptyInstance(self)


    def selectByTupleIdSafeSlice(self, bg: 'int', end2: 'int', step: 'int') -> "MEDCoupling::DataArray *":
        """
        selectByTupleIdSafeSlice(DataArray self, int bg, int end2, int step) -> DataArray

        1
        """
        return _MEDCouplingCompat.DataArray_selectByTupleIdSafeSlice(self, bg, end2, step)


    def rearrange(self, newNbOfCompo: 'int') -> "void":
        """
        rearrange(DataArray self, int newNbOfCompo)

        1
        """
        return _MEDCouplingCompat.DataArray_rearrange(self, newNbOfCompo)


    def circularPermutation(self, nbOfShift: 'int'=1) -> "void":
        """
        circularPermutation(DataArray self, int nbOfShift=1)
        circularPermutation(DataArray self)

        1
        """
        return _MEDCouplingCompat.DataArray_circularPermutation(self, nbOfShift)


    def circularPermutationPerTuple(self, nbOfShift: 'int'=1) -> "void":
        """
        circularPermutationPerTuple(DataArray self, int nbOfShift=1)
        circularPermutationPerTuple(DataArray self)

        1
        """
        return _MEDCouplingCompat.DataArray_circularPermutationPerTuple(self, nbOfShift)


    def reversePerTuple(self) -> "void":
        """
        reversePerTuple(DataArray self)

        1
        """
        return _MEDCouplingCompat.DataArray_reversePerTuple(self)


    def checkNbOfTuples(self, nbOfTuples: 'int', msg: 'std::string const &') -> "void":
        """
        checkNbOfTuples(DataArray self, int nbOfTuples, std::string const & msg)

        1
        """
        return _MEDCouplingCompat.DataArray_checkNbOfTuples(self, nbOfTuples, msg)


    def checkNbOfComps(self, nbOfCompo: 'int', msg: 'std::string const &') -> "void":
        """
        checkNbOfComps(DataArray self, int nbOfCompo, std::string const & msg)

        1
        """
        return _MEDCouplingCompat.DataArray_checkNbOfComps(self, nbOfCompo, msg)


    def checkNbOfTuplesAndComp(self, *args) -> "void":
        """
        checkNbOfTuplesAndComp(DataArray self, DataArray other, std::string const & msg)
        checkNbOfTuplesAndComp(DataArray self, int nbOfTuples, int nbOfCompo, std::string const & msg)

        1
        """
        return _MEDCouplingCompat.DataArray_checkNbOfTuplesAndComp(self, *args)


    def checkNbOfElems(self, nbOfElems: 'std::size_t', msg: 'std::string const &') -> "void":
        """
        checkNbOfElems(DataArray self, std::size_t nbOfElems, std::string const & msg)

        1
        """
        return _MEDCouplingCompat.DataArray_checkNbOfElems(self, nbOfElems, msg)


    def GetPosOfItemGivenBESRelativeNoThrow(value: 'int', begin: 'int', end: 'int', step: 'int') -> "int":
        """
        GetPosOfItemGivenBESRelativeNoThrow(int value, int begin, int end, int step) -> int

        1
        """
        return _MEDCouplingCompat.DataArray_GetPosOfItemGivenBESRelativeNoThrow(value, begin, end, step)

    GetPosOfItemGivenBESRelativeNoThrow = staticmethod(GetPosOfItemGivenBESRelativeNoThrow)

    def GetVarNameFromInfo(info: 'std::string const &') -> "std::string":
        """
        GetVarNameFromInfo(std::string const & info) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArray_GetVarNameFromInfo(info)

    GetVarNameFromInfo = staticmethod(GetVarNameFromInfo)

    def GetUnitFromInfo(info: 'std::string const &') -> "std::string":
        """
        GetUnitFromInfo(std::string const & info) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArray_GetUnitFromInfo(info)

    GetUnitFromInfo = staticmethod(GetUnitFromInfo)

    def BuildInfoFromVarAndUnit(var: 'std::string const &', unit: 'std::string const &') -> "std::string":
        """
        BuildInfoFromVarAndUnit(std::string const & var, std::string const & unit) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArray_BuildInfoFromVarAndUnit(var, unit)

    BuildInfoFromVarAndUnit = staticmethod(BuildInfoFromVarAndUnit)

    def GetAxisTypeRepr(at: 'MEDCoupling::MEDCouplingAxisType') -> "std::string":
        """
        GetAxisTypeRepr(MEDCoupling::MEDCouplingAxisType at) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArray_GetAxisTypeRepr(at)

    GetAxisTypeRepr = staticmethod(GetAxisTypeRepr)

    def updateTime(self) -> "void":
        """
        updateTime(DataArray self)

        1
        """
        return _MEDCouplingCompat.DataArray_updateTime(self)


    def getInfoOnComponents(self) -> "PyObject *":
        """
        getInfoOnComponents(DataArray self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArray_getInfoOnComponents(self)


    def copyPartOfStringInfoFrom(self, *args) -> "void":
        """
        copyPartOfStringInfoFrom(DataArray self, DataArray other, ivec compoIds)
        copyPartOfStringInfoFrom(DataArray self, DataArray other, PyObject * li)

        1
        """
        return _MEDCouplingCompat.DataArray_copyPartOfStringInfoFrom(self, *args)


    def copyPartOfStringInfoFrom2(self, *args) -> "void":
        """
        copyPartOfStringInfoFrom2(DataArray self, ivec compoIds, DataArray other)
        copyPartOfStringInfoFrom2(DataArray self, PyObject * li, DataArray other)

        1
        """
        return _MEDCouplingCompat.DataArray_copyPartOfStringInfoFrom2(self, *args)


    def renumberInPlace(self, li: 'PyObject *') -> "void":
        """
        renumberInPlace(DataArray self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.DataArray_renumberInPlace(self, li)


    def renumberInPlaceR(self, li: 'PyObject *') -> "void":
        """
        renumberInPlaceR(DataArray self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.DataArray_renumberInPlaceR(self, li)


    def setContigPartOfSelectedValues(self, tupleIdStart: 'int', aBase: 'PyObject *', tuplesSelec: 'PyObject *') -> "void":
        """
        setContigPartOfSelectedValues(DataArray self, int tupleIdStart, PyObject * aBase, PyObject * tuplesSelec)

        1
        """
        return _MEDCouplingCompat.DataArray_setContigPartOfSelectedValues(self, tupleIdStart, aBase, tuplesSelec)


    def setContigPartOfSelectedValuesSlice(self, tupleIdStart: 'int', aBase: 'PyObject *', bg: 'int', end2: 'int', step: 'int') -> "void":
        """
        setContigPartOfSelectedValuesSlice(DataArray self, int tupleIdStart, PyObject * aBase, int bg, int end2, int step)

        1
        """
        return _MEDCouplingCompat.DataArray_setContigPartOfSelectedValuesSlice(self, tupleIdStart, aBase, bg, end2, step)


    def selectByTupleRanges(self, li: 'PyObject *') -> "MEDCoupling::DataArray *":
        """
        selectByTupleRanges(DataArray self, PyObject * li) -> DataArray

        1
        """
        return _MEDCouplingCompat.DataArray_selectByTupleRanges(self, li)


    def selectByTupleId(self, li: 'PyObject *') -> "MEDCoupling::DataArray *":
        """
        selectByTupleId(DataArray self, PyObject * li) -> DataArray

        1
        """
        return _MEDCouplingCompat.DataArray_selectByTupleId(self, li)


    def selectByTupleIdSafe(self, li: 'PyObject *') -> "MEDCoupling::DataArray *":
        """
        selectByTupleIdSafe(DataArray self, PyObject * li) -> DataArray

        1
        """
        return _MEDCouplingCompat.DataArray_selectByTupleIdSafe(self, li)


    def keepSelectedComponents(self, li: 'PyObject *') -> "PyObject *":
        """
        keepSelectedComponents(DataArray self, PyObject * li) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArray_keepSelectedComponents(self, li)


    def GetSlice(slic: 'PyObject *', sliceId: 'int', nbOfSlices: 'int') -> "PyObject *":
        """
        GetSlice(PyObject * slic, int sliceId, int nbOfSlices) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArray_GetSlice(slic, sliceId, nbOfSlices)

    GetSlice = staticmethod(GetSlice)

    def getSlice(self, slic: 'PyObject *', sliceId: 'int', nbOfSlices: 'int') -> "PyObject *":
        """
        getSlice(DataArray self, PyObject * slic, int sliceId, int nbOfSlices) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArray_getSlice(self, slic, sliceId, nbOfSlices)


    def GetNumberOfItemGivenBES(*args) -> "int":
        """
        GetNumberOfItemGivenBES(int begin, int end, int step, std::string const & msg) -> int
        GetNumberOfItemGivenBES(PyObject * slic) -> int

        1
        """
        return _MEDCouplingCompat.DataArray_GetNumberOfItemGivenBES(*args)

    GetNumberOfItemGivenBES = staticmethod(GetNumberOfItemGivenBES)

    def GetNumberOfItemGivenBESRelative(*args) -> "int":
        """
        GetNumberOfItemGivenBESRelative(int begin, int end, int step, std::string const & msg) -> int
        GetNumberOfItemGivenBESRelative(PyObject * slic) -> int

        1
        """
        return _MEDCouplingCompat.DataArray_GetNumberOfItemGivenBESRelative(*args)

    GetNumberOfItemGivenBESRelative = staticmethod(GetNumberOfItemGivenBESRelative)

    def Aggregate(arrs: 'PyObject *') -> "MEDCoupling::DataArray *":
        """
        Aggregate(PyObject * arrs) -> DataArray

        1
        """
        return _MEDCouplingCompat.DataArray_Aggregate(arrs)

    Aggregate = staticmethod(Aggregate)

    def getNumberOfItemGivenBES(self, slic: 'PyObject *') -> "int":
        """
        getNumberOfItemGivenBES(DataArray self, PyObject * slic) -> int

        1
        """
        return _MEDCouplingCompat.DataArray_getNumberOfItemGivenBES(self, slic)


    def getNumberOfItemGivenBESRelative(self, slic: 'PyObject *') -> "int":
        """
        getNumberOfItemGivenBESRelative(DataArray self, PyObject * slic) -> int

        1
        """
        return _MEDCouplingCompat.DataArray_getNumberOfItemGivenBESRelative(self, slic)


    def __getstate__(self) -> "PyObject *":
        """
        __getstate__(DataArray self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArray___getstate__(self)


    def __setstate__(self, inp: 'PyObject *') -> "void":
        """
        __setstate__(DataArray self, PyObject * inp)

        1
        """
        return _MEDCouplingCompat.DataArray___setstate__(self, inp)

    __swig_destroy__ = _MEDCouplingCompat.delete_DataArray
    __del__ = lambda self: None
DataArray_swigregister = _MEDCouplingCompat.DataArray_swigregister
DataArray_swigregister(DataArray)

def DataArray_GetPosOfItemGivenBESRelativeNoThrow(value: 'int', begin: 'int', end: 'int', step: 'int') -> "int":
    """
    DataArray_GetPosOfItemGivenBESRelativeNoThrow(int value, int begin, int end, int step) -> int

    1
    """
    return _MEDCouplingCompat.DataArray_GetPosOfItemGivenBESRelativeNoThrow(value, begin, end, step)

def DataArray_GetVarNameFromInfo(info: 'std::string const &') -> "std::string":
    """
    DataArray_GetVarNameFromInfo(std::string const & info) -> std::string

    1
    """
    return _MEDCouplingCompat.DataArray_GetVarNameFromInfo(info)

def DataArray_GetUnitFromInfo(info: 'std::string const &') -> "std::string":
    """
    DataArray_GetUnitFromInfo(std::string const & info) -> std::string

    1
    """
    return _MEDCouplingCompat.DataArray_GetUnitFromInfo(info)

def DataArray_BuildInfoFromVarAndUnit(var: 'std::string const &', unit: 'std::string const &') -> "std::string":
    """
    DataArray_BuildInfoFromVarAndUnit(std::string const & var, std::string const & unit) -> std::string

    1
    """
    return _MEDCouplingCompat.DataArray_BuildInfoFromVarAndUnit(var, unit)

def DataArray_GetAxisTypeRepr(at: 'MEDCoupling::MEDCouplingAxisType') -> "std::string":
    """
    DataArray_GetAxisTypeRepr(MEDCoupling::MEDCouplingAxisType at) -> std::string

    1
    """
    return _MEDCouplingCompat.DataArray_GetAxisTypeRepr(at)

def DataArray_GetSlice(slic: 'PyObject *', sliceId: 'int', nbOfSlices: 'int') -> "PyObject *":
    """
    DataArray_GetSlice(PyObject * slic, int sliceId, int nbOfSlices) -> PyObject *

    1
    """
    return _MEDCouplingCompat.DataArray_GetSlice(slic, sliceId, nbOfSlices)

def DataArray_GetNumberOfItemGivenBES(*args) -> "int":
    """
    GetNumberOfItemGivenBES(int begin, int end, int step, std::string const & msg) -> int
    DataArray_GetNumberOfItemGivenBES(PyObject * slic) -> int

    1
    """
    return _MEDCouplingCompat.DataArray_GetNumberOfItemGivenBES(*args)

def DataArray_GetNumberOfItemGivenBESRelative(*args) -> "int":
    """
    GetNumberOfItemGivenBESRelative(int begin, int end, int step, std::string const & msg) -> int
    DataArray_GetNumberOfItemGivenBESRelative(PyObject * slic) -> int

    1
    """
    return _MEDCouplingCompat.DataArray_GetNumberOfItemGivenBESRelative(*args)

def DataArray_Aggregate(arrs: 'PyObject *') -> "MEDCoupling::DataArray *":
    """
    DataArray_Aggregate(PyObject * arrs) -> DataArray

    1
    """
    return _MEDCouplingCompat.DataArray_Aggregate(arrs)

class DataArrayFloat(DataArray):
    """1"""

    __swig_setmethods__ = {}
    for _s in [DataArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [DataArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayFloat, name)

    def fillWithValue(self, val: 'float') -> "void":
        """
        fillWithValue(DataArrayFloat self, float val)

        1
        """
        return _MEDCouplingCompat.DataArrayFloat_fillWithValue(self, val)


    def isEqual(self, other: 'DataArrayFloat', prec: 'float') -> "bool":
        """
        isEqual(DataArrayFloat self, DataArrayFloat other, float prec) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayFloat_isEqual(self, other, prec)


    def isEqualWithoutConsideringStr(self, other: 'DataArrayFloat', prec: 'float') -> "bool":
        """
        isEqualWithoutConsideringStr(DataArrayFloat self, DataArrayFloat other, float prec) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayFloat_isEqualWithoutConsideringStr(self, other, prec)


    def isUniform(self, val: 'float', eps: 'float') -> "bool":
        """
        isUniform(DataArrayFloat self, float val, float eps) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayFloat_isUniform(self, val, eps)


    def pushBackSilent(self, val: 'float') -> "void":
        """
        pushBackSilent(DataArrayFloat self, float val)

        1
        """
        return _MEDCouplingCompat.DataArrayFloat_pushBackSilent(self, val)


    def iota(self, init: 'float'=0.) -> "void":
        """
        iota(DataArrayFloat self, float init=0.)
        iota(DataArrayFloat self)

        1
        """
        return _MEDCouplingCompat.DataArrayFloat_iota(self, init)


    def iterator(self) -> "DataArrayFloatIterator *":
        """
        iterator(DataArrayFloat self) -> DataArrayFloatIterator *

        1
        """
        return _MEDCouplingCompat.DataArrayFloat_iterator(self)


    def convertToDblArr(self) -> "MCAuto< MEDCoupling::DataArrayDouble >":
        """
        convertToDblArr(DataArrayFloat self) -> MCAuto< MEDCoupling::DataArrayDouble >

        1
        """
        return _MEDCouplingCompat.DataArrayFloat_convertToDblArr(self)


    def Meld(a1: 'DataArrayFloat', a2: 'DataArrayFloat') -> "MEDCoupling::DataArrayFloat *":
        """
        Meld(DataArrayFloat a1, DataArrayFloat a2) -> DataArrayFloat

        1
        """
        return _MEDCouplingCompat.DataArrayFloat_Meld(a1, a2)

    Meld = staticmethod(Meld)

    def New(*args) -> "MEDCoupling::DataArrayFloat *":
        """
        New() -> DataArrayFloat
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayFloat
        New(PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayFloat
        New(PyObject * elt0) -> DataArrayFloat

        1
        """
        return _MEDCouplingCompat.DataArrayFloat_New(*args)

    New = staticmethod(New)

    def __init__(self, *args):
        """
        __init__(MEDCoupling::DataArrayFloat self) -> DataArrayFloat
        __init__(MEDCoupling::DataArrayFloat self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayFloat
        __init__(MEDCoupling::DataArrayFloat self, PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayFloat
        __init__(MEDCoupling::DataArrayFloat self, PyObject * elt0) -> DataArrayFloat

        1
        """
        this = _MEDCouplingCompat.new_DataArrayFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iter__(self) -> "DataArrayFloatIterator *":
        """
        __iter__(DataArrayFloat self) -> DataArrayFloatIterator *

        1
        """
        return _MEDCouplingCompat.DataArrayFloat___iter__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(DataArrayFloat self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayFloat___repr__(self)


    def __str__(self) -> "std::string":
        """
        __str__(DataArrayFloat self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayFloat___str__(self)


    def __len__(self) -> "int":
        """
        __len__(DataArrayFloat self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayFloat___len__(self)


    def getValues(self) -> "PyObject *":
        """
        getValues(DataArrayFloat self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayFloat_getValues(self)


    def getValuesAsTuple(self) -> "PyObject *":
        """
        getValuesAsTuple(DataArrayFloat self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayFloat_getValuesAsTuple(self)


    def isEqualIfNotWhy(self, other: 'DataArrayFloat', prec: 'float') -> "PyObject *":
        """
        isEqualIfNotWhy(DataArrayFloat self, DataArrayFloat other, float prec) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayFloat_isEqualIfNotWhy(self, other, prec)


    def __getitem__(self, obj: 'PyObject *') -> "PyObject *":
        """
        __getitem__(DataArrayFloat self, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayFloat___getitem__(self, obj)


    def __setitem__(self, obj: 'PyObject *', value: 'PyObject *') -> "MEDCoupling::DataArrayFloat *":
        """
        __setitem__(DataArrayFloat self, PyObject * obj, PyObject * value) -> DataArrayFloat

        1
        """
        return _MEDCouplingCompat.DataArrayFloat___setitem__(self, obj, value)


    def ___iadd___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___iadd___(DataArrayFloat self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayFloat____iadd___(self, trueSelf, obj)


    def ___isub___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___isub___(DataArrayFloat self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayFloat____isub___(self, trueSelf, obj)


    def ___imul___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___imul___(DataArrayFloat self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayFloat____imul___(self, trueSelf, obj)


    def __rmul__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayFloat *":
        """
        __rmul__(DataArrayFloat self, PyObject * obj) -> DataArrayFloat

        1
        """
        return _MEDCouplingCompat.DataArrayFloat___rmul__(self, obj)


    def ___idiv___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___idiv___(DataArrayFloat self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayFloat____idiv___(self, trueSelf, obj)


    def toNumPyArray(self) -> "PyObject *":
        """
        toNumPyArray(DataArrayFloat self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayFloat_toNumPyArray(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayFloat
    __del__ = lambda self: None
DataArrayFloat_swigregister = _MEDCouplingCompat.DataArrayFloat_swigregister
DataArrayFloat_swigregister(DataArrayFloat)

def DataArrayFloat_Meld(a1: 'DataArrayFloat', a2: 'DataArrayFloat') -> "MEDCoupling::DataArrayFloat *":
    """
    DataArrayFloat_Meld(DataArrayFloat a1, DataArrayFloat a2) -> DataArrayFloat

    1
    """
    return _MEDCouplingCompat.DataArrayFloat_Meld(a1, a2)

def DataArrayFloat_New(*args) -> "MEDCoupling::DataArrayFloat *":
    """
    New() -> DataArrayFloat
    New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayFloat
    New(PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayFloat
    DataArrayFloat_New(PyObject * elt0) -> DataArrayFloat

    1
    """
    return _MEDCouplingCompat.DataArrayFloat_New(*args)

class DataArrayFloatIterator(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayFloatIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayFloatIterator, name)
    __repr__ = _swig_repr

    def __init__(self, da: 'DataArrayFloat'):
        """
        __init__(MEDCoupling::DataArrayFloatIterator self, DataArrayFloat da) -> DataArrayFloatIterator

        1
        """
        this = _MEDCouplingCompat.new_DataArrayFloatIterator(da)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayFloatIterator
    __del__ = lambda self: None

    def next(self) -> "PyObject *":
        """
        next(DataArrayFloatIterator self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayFloatIterator_next(self)

DataArrayFloatIterator_swigregister = _MEDCouplingCompat.DataArrayFloatIterator_swigregister
DataArrayFloatIterator_swigregister(DataArrayFloatIterator)

class DataArrayFloatTuple(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayFloatTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayFloatTuple, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCompo(self) -> "int":
        """
        getNumberOfCompo(DataArrayFloatTuple self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayFloatTuple_getNumberOfCompo(self)


    def __str__(self) -> "std::string":
        """
        __str__(DataArrayFloatTuple self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayFloatTuple___str__(self)


    def __float__(self) -> "float":
        """
        __float__(DataArrayFloatTuple self) -> float

        1
        """
        return _MEDCouplingCompat.DataArrayFloatTuple___float__(self)


    def buildDAFloat(self, *args) -> "MEDCoupling::DataArrayFloat *":
        """
        buildDAFloat(DataArrayFloatTuple self, int nbOfTuples, int nbOfCompo) -> DataArrayFloat
        buildDAFloat(DataArrayFloatTuple self) -> DataArrayFloat

        1
        """
        return _MEDCouplingCompat.DataArrayFloatTuple_buildDAFloat(self, *args)


    def __len__(self) -> "PyObject *":
        """
        __len__(DataArrayFloatTuple self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayFloatTuple___len__(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayFloatTuple
    __del__ = lambda self: None
DataArrayFloatTuple_swigregister = _MEDCouplingCompat.DataArrayFloatTuple_swigregister
DataArrayFloatTuple_swigregister(DataArrayFloatTuple)

class DataArrayDouble(DataArray):
    """1"""

    __swig_setmethods__ = {}
    for _s in [DataArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [DataArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayDouble, name)

    def doubleValue(self) -> "double":
        """
        doubleValue(DataArrayDouble self) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_doubleValue(self)


    def empty(self) -> "bool":
        """
        empty(DataArrayDouble self) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_empty(self)


    def aggregate(self, other: 'DataArrayDouble') -> "void":
        """
        aggregate(DataArrayDouble self, DataArrayDouble other)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_aggregate(self, other)


    def performCopyOrIncrRef(self, deepCopy: 'bool') -> "MEDCoupling::DataArrayDouble *":
        """
        performCopyOrIncrRef(DataArrayDouble self, bool deepCopy) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_performCopyOrIncrRef(self, deepCopy)


    def deepCopyFrom(self, other: 'DataArrayDouble') -> "void":
        """
        deepCopyFrom(DataArrayDouble self, DataArrayDouble other)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_deepCopyFrom(self, other)


    def reserve(self, nbOfElems: 'std::size_t') -> "void":
        """
        reserve(DataArrayDouble self, std::size_t nbOfElems)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_reserve(self, nbOfElems)


    def pushBackSilent(self, val: 'double') -> "void":
        """
        pushBackSilent(DataArrayDouble self, double val)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_pushBackSilent(self, val)


    def popBackSilent(self) -> "double":
        """
        popBackSilent(DataArrayDouble self) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_popBackSilent(self)


    def pack(self) -> "void":
        """
        pack(DataArrayDouble self)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_pack(self)


    def allocIfNecessary(self, nbOfTuple: 'int', nbOfCompo: 'int') -> "void":
        """
        allocIfNecessary(DataArrayDouble self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_allocIfNecessary(self, nbOfTuple, nbOfCompo)


    def fillWithZero(self) -> "void":
        """
        fillWithZero(DataArrayDouble self)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_fillWithZero(self)


    def fillWithValue(self, val: 'double') -> "void":
        """
        fillWithValue(DataArrayDouble self, double val)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_fillWithValue(self, val)


    def iota(self, init: 'double'=0.) -> "void":
        """
        iota(DataArrayDouble self, double init=0.)
        iota(DataArrayDouble self)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_iota(self, init)


    def isUniform(self, val: 'double', eps: 'double') -> "bool":
        """
        isUniform(DataArrayDouble self, double val, double eps) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_isUniform(self, val, eps)


    def sort(self, asc: 'bool'=True) -> "void":
        """
        sort(DataArrayDouble self, bool asc=True)
        sort(DataArrayDouble self)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_sort(self, asc)


    def reverse(self) -> "void":
        """
        reverse(DataArrayDouble self)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_reverse(self)


    def checkMonotonic(self, increasing: 'bool', eps: 'double') -> "void":
        """
        checkMonotonic(DataArrayDouble self, bool increasing, double eps)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_checkMonotonic(self, increasing, eps)


    def isMonotonic(self, increasing: 'bool', eps: 'double') -> "bool":
        """
        isMonotonic(DataArrayDouble self, bool increasing, double eps) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_isMonotonic(self, increasing, eps)


    def repr(self) -> "std::string":
        """
        repr(DataArrayDouble self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_repr(self)


    def reprZip(self) -> "std::string":
        """
        reprZip(DataArrayDouble self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_reprZip(self)


    def reprNotTooLong(self) -> "std::string":
        """
        reprNotTooLong(DataArrayDouble self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_reprNotTooLong(self)


    def isEqual(self, other: 'DataArrayDouble', prec: 'double') -> "bool":
        """
        isEqual(DataArrayDouble self, DataArrayDouble other, double prec) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_isEqual(self, other, prec)


    def isEqualWithoutConsideringStr(self, other: 'DataArrayDouble', prec: 'double') -> "bool":
        """
        isEqualWithoutConsideringStr(DataArrayDouble self, DataArrayDouble other, double prec) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_isEqualWithoutConsideringStr(self, other, prec)


    def fromNoInterlace(self) -> "MEDCoupling::DataArrayDouble *":
        """
        fromNoInterlace(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_fromNoInterlace(self)


    def toNoInterlace(self) -> "MEDCoupling::DataArrayDouble *":
        """
        toNoInterlace(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_toNoInterlace(self)


    def subArray(self, tupleIdBg: 'int', tupleIdEnd: 'int'=-1) -> "MEDCoupling::DataArrayDouble *":
        """
        subArray(DataArrayDouble self, int tupleIdBg, int tupleIdEnd=-1) -> DataArrayDouble
        subArray(DataArrayDouble self, int tupleIdBg) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_subArray(self, tupleIdBg, tupleIdEnd)


    def transpose(self) -> "void":
        """
        transpose(DataArrayDouble self)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_transpose(self)


    def changeNbOfComponents(self, newNbOfComp: 'int', dftValue: 'double') -> "MEDCoupling::DataArrayDouble *":
        """
        changeNbOfComponents(DataArrayDouble self, int newNbOfComp, double dftValue) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_changeNbOfComponents(self, newNbOfComp, dftValue)


    def meldWith(self, other: 'DataArrayDouble') -> "void":
        """
        meldWith(DataArrayDouble self, DataArrayDouble other)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_meldWith(self, other)


    def duplicateEachTupleNTimes(self, nbTimes: 'int') -> "MEDCoupling::DataArrayDouble *":
        """
        duplicateEachTupleNTimes(DataArrayDouble self, int nbTimes) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_duplicateEachTupleNTimes(self, nbTimes)


    def getDifferentValues(self, prec: 'double', limitTupleId: 'int'=-1) -> "MEDCoupling::DataArrayDouble *":
        """
        getDifferentValues(DataArrayDouble self, double prec, int limitTupleId=-1) -> DataArrayDouble
        getDifferentValues(DataArrayDouble self, double prec) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getDifferentValues(self, prec, limitTupleId)


    def findClosestTupleId(self, other: 'DataArrayDouble') -> "MEDCoupling::DataArrayInt *":
        """
        findClosestTupleId(DataArrayDouble self, DataArrayDouble other) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_findClosestTupleId(self, other)


    def computeNbOfInteractionsWith(self, otherBBoxFrmt: 'DataArrayDouble', eps: 'double') -> "MEDCoupling::DataArrayInt *":
        """
        computeNbOfInteractionsWith(DataArrayDouble self, DataArrayDouble otherBBoxFrmt, double eps) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_computeNbOfInteractionsWith(self, otherBBoxFrmt, eps)


    def setPartOfValues1(self, a: 'DataArrayDouble', bgTuples: 'int', endTuples: 'int', stepTuples: 'int', bgComp: 'int', endComp: 'int', stepComp: 'int', strictCompoCompare: 'bool'=True) -> "void":
        """
        setPartOfValues1(DataArrayDouble self, DataArrayDouble a, int bgTuples, int endTuples, int stepTuples, int bgComp, int endComp, int stepComp, bool strictCompoCompare=True)
        setPartOfValues1(DataArrayDouble self, DataArrayDouble a, int bgTuples, int endTuples, int stepTuples, int bgComp, int endComp, int stepComp)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_setPartOfValues1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp, strictCompoCompare)


    def setPartOfValuesSimple1(self, a: 'double', bgTuples: 'int', endTuples: 'int', stepTuples: 'int', bgComp: 'int', endComp: 'int', stepComp: 'int') -> "void":
        """
        setPartOfValuesSimple1(DataArrayDouble self, double a, int bgTuples, int endTuples, int stepTuples, int bgComp, int endComp, int stepComp)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_setPartOfValuesSimple1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp)


    def setPartOfValuesAdv(self, a: 'DataArrayDouble', tuplesSelec: 'DataArrayInt') -> "void":
        """
        setPartOfValuesAdv(DataArrayDouble self, DataArrayDouble a, DataArrayInt tuplesSelec)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_setPartOfValuesAdv(self, a, tuplesSelec)


    def getIJ(self, tupleId: 'int', compoId: 'int') -> "double":
        """
        getIJ(DataArrayDouble self, int tupleId, int compoId) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getIJ(self, tupleId, compoId)


    def front(self) -> "double":
        """
        front(DataArrayDouble self) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_front(self)


    def back(self) -> "double":
        """
        back(DataArrayDouble self) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_back(self)


    def getIJSafe(self, tupleId: 'int', compoId: 'int') -> "double":
        """
        getIJSafe(DataArrayDouble self, int tupleId, int compoId) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getIJSafe(self, tupleId, compoId)


    def setIJ(self, tupleId: 'int', compoId: 'int', newVal: 'double') -> "void":
        """
        setIJ(DataArrayDouble self, int tupleId, int compoId, double newVal)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_setIJ(self, tupleId, compoId, newVal)


    def setIJSilent(self, tupleId: 'int', compoId: 'int', newVal: 'double') -> "void":
        """
        setIJSilent(DataArrayDouble self, int tupleId, int compoId, double newVal)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_setIJSilent(self, tupleId, compoId, newVal)


    def getPointer(self) -> "double *":
        """
        getPointer(DataArrayDouble self) -> double *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getPointer(self)


    def checkNoNullValues(self) -> "void":
        """
        checkNoNullValues(DataArrayDouble self)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_checkNoNullValues(self)


    def computeBBoxPerTuple(self, epsilon: 'double'=0.0) -> "MEDCoupling::DataArrayDouble *":
        """
        computeBBoxPerTuple(DataArrayDouble self, double epsilon=0.0) -> DataArrayDouble
        computeBBoxPerTuple(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_computeBBoxPerTuple(self, epsilon)


    def recenterForMaxPrecision(self, eps: 'double') -> "void":
        """
        recenterForMaxPrecision(DataArrayDouble self, double eps)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_recenterForMaxPrecision(self, eps)


    def getMaxValueInArray(self) -> "double":
        """
        getMaxValueInArray(DataArrayDouble self) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getMaxValueInArray(self)


    def getMaxAbsValueInArray(self) -> "double":
        """
        getMaxAbsValueInArray(DataArrayDouble self) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getMaxAbsValueInArray(self)


    def getMinValueInArray(self) -> "double":
        """
        getMinValueInArray(DataArrayDouble self) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getMinValueInArray(self)


    def count(self, value: 'double', eps: 'double') -> "int":
        """
        count(DataArrayDouble self, double value, double eps) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_count(self, value, eps)


    def getAverageValue(self) -> "double":
        """
        getAverageValue(DataArrayDouble self) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getAverageValue(self)


    def norm2(self) -> "double":
        """
        norm2(DataArrayDouble self) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_norm2(self)


    def normMax(self) -> "double":
        """
        normMax(DataArrayDouble self) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_normMax(self)


    def normMin(self) -> "double":
        """
        normMin(DataArrayDouble self) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_normMin(self)


    def fromPolarToCart(self) -> "MEDCoupling::DataArrayDouble *":
        """
        fromPolarToCart(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_fromPolarToCart(self)


    def fromCylToCart(self) -> "MEDCoupling::DataArrayDouble *":
        """
        fromCylToCart(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_fromCylToCart(self)


    def fromSpherToCart(self) -> "MEDCoupling::DataArrayDouble *":
        """
        fromSpherToCart(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_fromSpherToCart(self)


    def fromCartToPolar(self) -> "MEDCoupling::DataArrayDouble *":
        """
        fromCartToPolar(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_fromCartToPolar(self)


    def fromCartToCyl(self) -> "MEDCoupling::DataArrayDouble *":
        """
        fromCartToCyl(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_fromCartToCyl(self)


    def fromCartToSpher(self) -> "MEDCoupling::DataArrayDouble *":
        """
        fromCartToSpher(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_fromCartToSpher(self)


    def cartesianize(self, atOfThis: 'MEDCoupling::MEDCouplingAxisType') -> "MEDCoupling::DataArrayDouble *":
        """
        cartesianize(DataArrayDouble self, MEDCoupling::MEDCouplingAxisType atOfThis) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_cartesianize(self, atOfThis)


    def doublyContractedProduct(self) -> "MEDCoupling::DataArrayDouble *":
        """
        doublyContractedProduct(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_doublyContractedProduct(self)


    def determinant(self) -> "MEDCoupling::DataArrayDouble *":
        """
        determinant(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_determinant(self)


    def eigenValues(self) -> "MEDCoupling::DataArrayDouble *":
        """
        eigenValues(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_eigenValues(self)


    def eigenVectors(self) -> "MEDCoupling::DataArrayDouble *":
        """
        eigenVectors(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_eigenVectors(self)


    def inverse(self) -> "MEDCoupling::DataArrayDouble *":
        """
        inverse(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_inverse(self)


    def trace(self) -> "MEDCoupling::DataArrayDouble *":
        """
        trace(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_trace(self)


    def deviator(self) -> "MEDCoupling::DataArrayDouble *":
        """
        deviator(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_deviator(self)


    def magnitude(self) -> "MEDCoupling::DataArrayDouble *":
        """
        magnitude(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_magnitude(self)


    def maxPerTuple(self) -> "MEDCoupling::DataArrayDouble *":
        """
        maxPerTuple(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_maxPerTuple(self)


    def sumPerTuple(self) -> "MEDCoupling::DataArrayDouble *":
        """
        sumPerTuple(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_sumPerTuple(self)


    def buildEuclidianDistanceDenseMatrix(self) -> "MEDCoupling::DataArrayDouble *":
        """
        buildEuclidianDistanceDenseMatrix(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_buildEuclidianDistanceDenseMatrix(self)


    def buildEuclidianDistanceDenseMatrixWith(self, other: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        """
        buildEuclidianDistanceDenseMatrixWith(DataArrayDouble self, DataArrayDouble other) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_buildEuclidianDistanceDenseMatrixWith(self, other)


    def sortPerTuple(self, asc: 'bool') -> "void":
        """
        sortPerTuple(DataArrayDouble self, bool asc)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_sortPerTuple(self, asc)


    def abs(self) -> "void":
        """
        abs(DataArrayDouble self)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_abs(self)


    def computeAbs(self) -> "MEDCoupling::DataArrayDouble *":
        """
        computeAbs(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_computeAbs(self)


    def applyLin(self, *args) -> "void":
        """
        applyLin(DataArrayDouble self, double a, double b, int compoId)
        applyLin(DataArrayDouble self, double a, double b)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_applyLin(self, *args)


    def applyInv(self, numerator: 'double') -> "void":
        """
        applyInv(DataArrayDouble self, double numerator)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_applyInv(self, numerator)


    def applyPow(self, val: 'double') -> "void":
        """
        applyPow(DataArrayDouble self, double val)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_applyPow(self, val)


    def applyRPow(self, val: 'double') -> "void":
        """
        applyRPow(DataArrayDouble self, double val)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_applyRPow(self, val)


    def negate(self) -> "MEDCoupling::DataArrayDouble *":
        """
        negate(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_negate(self)


    def applyFunc(self, *args) -> "MEDCoupling::DataArrayDouble *":
        """
        applyFunc(DataArrayDouble self, int nbOfComp, FunctionToEvaluate func) -> DataArrayDouble
        applyFunc(DataArrayDouble self, int nbOfComp, std::string const & func, bool isSafe=True) -> DataArrayDouble
        applyFunc(DataArrayDouble self, int nbOfComp, std::string const & func) -> DataArrayDouble
        applyFunc(DataArrayDouble self, std::string const & func, bool isSafe=True) -> DataArrayDouble
        applyFunc(DataArrayDouble self, std::string const & func) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_applyFunc(self, *args)


    def applyFuncOnThis(self, func: 'std::string const &', isSafe: 'bool'=True) -> "void":
        """
        applyFuncOnThis(DataArrayDouble self, std::string const & func, bool isSafe=True)
        applyFuncOnThis(DataArrayDouble self, std::string const & func)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_applyFuncOnThis(self, func, isSafe)


    def applyFuncCompo(self, nbOfComp: 'int', func: 'std::string const &', isSafe: 'bool'=True) -> "MEDCoupling::DataArrayDouble *":
        """
        applyFuncCompo(DataArrayDouble self, int nbOfComp, std::string const & func, bool isSafe=True) -> DataArrayDouble
        applyFuncCompo(DataArrayDouble self, int nbOfComp, std::string const & func) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_applyFuncCompo(self, nbOfComp, func, isSafe)


    def applyFuncNamedCompo(self, nbOfComp: 'int', varsOrder: 'svec', func: 'std::string const &', isSafe: 'bool'=True) -> "MEDCoupling::DataArrayDouble *":
        """
        applyFuncNamedCompo(DataArrayDouble self, int nbOfComp, svec varsOrder, std::string const & func, bool isSafe=True) -> DataArrayDouble
        applyFuncNamedCompo(DataArrayDouble self, int nbOfComp, svec varsOrder, std::string const & func) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_applyFuncNamedCompo(self, nbOfComp, varsOrder, func, isSafe)


    def applyFuncFast32(self, func: 'std::string const &') -> "void":
        """
        applyFuncFast32(DataArrayDouble self, std::string const & func)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_applyFuncFast32(self, func)


    def applyFuncFast64(self, func: 'std::string const &') -> "void":
        """
        applyFuncFast64(DataArrayDouble self, std::string const & func)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_applyFuncFast64(self, func)


    def findIdsInRange(self, vmin: 'double', vmax: 'double') -> "MEDCoupling::DataArrayInt *":
        """
        findIdsInRange(DataArrayDouble self, double vmin, double vmax) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_findIdsInRange(self, vmin, vmax)


    def findIdsNotInRange(self, vmin: 'double', vmax: 'double') -> "MEDCoupling::DataArrayInt *":
        """
        findIdsNotInRange(DataArrayDouble self, double vmin, double vmax) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_findIdsNotInRange(self, vmin, vmax)


    def findIdsStrictlyNegative(self) -> "MEDCoupling::DataArrayInt *":
        """
        findIdsStrictlyNegative(DataArrayDouble self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_findIdsStrictlyNegative(self)


    def Dot(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        """
        Dot(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_Dot(a1, a2)

    Dot = staticmethod(Dot)

    def CrossProduct(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        """
        CrossProduct(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_CrossProduct(a1, a2)

    CrossProduct = staticmethod(CrossProduct)

    def Max(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        """
        Max(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_Max(a1, a2)

    Max = staticmethod(Max)

    def Min(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        """
        Min(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_Min(a1, a2)

    Min = staticmethod(Min)

    def Add(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        """
        Add(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_Add(a1, a2)

    Add = staticmethod(Add)

    def addEqual(self, other: 'DataArrayDouble') -> "void":
        """
        addEqual(DataArrayDouble self, DataArrayDouble other)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_addEqual(self, other)


    def Substract(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        """
        Substract(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_Substract(a1, a2)

    Substract = staticmethod(Substract)

    def substractEqual(self, other: 'DataArrayDouble') -> "void":
        """
        substractEqual(DataArrayDouble self, DataArrayDouble other)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_substractEqual(self, other)


    def Multiply(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        """
        Multiply(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_Multiply(a1, a2)

    Multiply = staticmethod(Multiply)

    def multiplyEqual(self, other: 'DataArrayDouble') -> "void":
        """
        multiplyEqual(DataArrayDouble self, DataArrayDouble other)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_multiplyEqual(self, other)


    def Divide(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        """
        Divide(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_Divide(a1, a2)

    Divide = staticmethod(Divide)

    def divideEqual(self, other: 'DataArrayDouble') -> "void":
        """
        divideEqual(DataArrayDouble self, DataArrayDouble other)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_divideEqual(self, other)


    def Pow(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        """
        Pow(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_Pow(a1, a2)

    Pow = staticmethod(Pow)

    def powEqual(self, other: 'DataArrayDouble') -> "void":
        """
        powEqual(DataArrayDouble self, DataArrayDouble other)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_powEqual(self, other)


    def findIdsGreaterOrEqualTo(self, val: 'double') -> "MCAuto< MEDCoupling::DataArrayInt >":
        """
        findIdsGreaterOrEqualTo(DataArrayDouble self, double val) -> MCAuto< MEDCoupling::DataArrayInt >

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_findIdsGreaterOrEqualTo(self, val)


    def findIdsGreaterThan(self, val: 'double') -> "MCAuto< MEDCoupling::DataArrayInt >":
        """
        findIdsGreaterThan(DataArrayDouble self, double val) -> MCAuto< MEDCoupling::DataArrayInt >

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_findIdsGreaterThan(self, val)


    def findIdsLowerOrEqualTo(self, val: 'double') -> "MCAuto< MEDCoupling::DataArrayInt >":
        """
        findIdsLowerOrEqualTo(DataArrayDouble self, double val) -> MCAuto< MEDCoupling::DataArrayInt >

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_findIdsLowerOrEqualTo(self, val)


    def findIdsLowerThan(self, val: 'double') -> "MCAuto< MEDCoupling::DataArrayInt >":
        """
        findIdsLowerThan(DataArrayDouble self, double val) -> MCAuto< MEDCoupling::DataArrayInt >

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_findIdsLowerThan(self, val)


    def convertToIntArr(self) -> "MCAuto< MEDCoupling::DataArrayInt >":
        """
        convertToIntArr(DataArrayDouble self) -> MCAuto< MEDCoupling::DataArrayInt >

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_convertToIntArr(self)


    def selectPartDef(self, pd: 'PartDefinition') -> "MCAuto< MEDCoupling::DataArrayDouble >":
        """
        selectPartDef(DataArrayDouble self, PartDefinition pd) -> MCAuto< MEDCoupling::DataArrayDouble >

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_selectPartDef(self, pd)


    def cumSum(self) -> "MCAuto< MEDCoupling::DataArrayDouble >":
        """
        cumSum(DataArrayDouble self) -> MCAuto< MEDCoupling::DataArrayDouble >

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_cumSum(self)


    def convertToFloatArr(self) -> "MCAuto< MEDCoupling::DataArrayFloat >":
        """
        convertToFloatArr(DataArrayDouble self) -> MCAuto< MEDCoupling::DataArrayFloat >

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_convertToFloatArr(self)


    def New(*args) -> "MEDCoupling::DataArrayDouble *":
        """
        New() -> DataArrayDouble
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayDouble
        New(PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayDouble
        New(PyObject * elt0) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_New(*args)

    New = staticmethod(New)

    def __init__(self, *args):
        """
        __init__(MEDCoupling::DataArrayDouble self) -> DataArrayDouble
        __init__(MEDCoupling::DataArrayDouble self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayDouble
        __init__(MEDCoupling::DataArrayDouble self, PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayDouble
        __init__(MEDCoupling::DataArrayDouble self, PyObject * elt0) -> DataArrayDouble

        1
        """
        this = _MEDCouplingCompat.new_DataArrayDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def pushBackValsSilent(self, li: 'PyObject *') -> "void":
        """
        pushBackValsSilent(DataArrayDouble self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_pushBackValsSilent(self, li)


    def __repr__(self) -> "std::string":
        """
        __repr__(DataArrayDouble self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___repr__(self)


    def __str__(self) -> "std::string":
        """
        __str__(DataArrayDouble self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___str__(self)


    def __float__(self) -> "double":
        """
        __float__(DataArrayDouble self) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___float__(self)


    def __len__(self) -> "int":
        """
        __len__(DataArrayDouble self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___len__(self)


    def asArcOfCircle(self) -> "PyObject *":
        """
        asArcOfCircle(DataArrayDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_asArcOfCircle(self)


    def __iter__(self) -> "MEDCoupling::DataArrayDoubleIterator *":
        """
        __iter__(DataArrayDouble self) -> DataArrayDoubleIterator

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___iter__(self)


    def setValues(self, li: 'PyObject *', nbOfTuples: 'PyObject *'=None, nbOfComp: 'PyObject *'=None) -> "void":
        """
        setValues(DataArrayDouble self, PyObject * li, PyObject * nbOfTuples=None, PyObject * nbOfComp=None)
        setValues(DataArrayDouble self, PyObject * li, PyObject * nbOfTuples=None)
        setValues(DataArrayDouble self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_setValues(self, li, nbOfTuples, nbOfComp)


    def getValues(self) -> "PyObject *":
        """
        getValues(DataArrayDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getValues(self)


    def toNumPyArray(self) -> "PyObject *":
        """
        toNumPyArray(DataArrayDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_toNumPyArray(self)


    def isEqualIfNotWhy(self, other: 'DataArrayDouble', prec: 'double') -> "PyObject *":
        """
        isEqualIfNotWhy(DataArrayDouble self, DataArrayDouble other, double prec) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_isEqualIfNotWhy(self, other, prec)


    def getValuesAsTuple(self) -> "PyObject *":
        """
        getValuesAsTuple(DataArrayDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getValuesAsTuple(self)


    def ComputeIntegralOfSeg2IntoTri3(seg2: 'PyObject *', tri3: 'PyObject *') -> "PyObject *":
        """
        ComputeIntegralOfSeg2IntoTri3(PyObject * seg2, PyObject * tri3) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_ComputeIntegralOfSeg2IntoTri3(seg2, tri3)

    ComputeIntegralOfSeg2IntoTri3 = staticmethod(ComputeIntegralOfSeg2IntoTri3)

    def symmetry3DPlane(self, point: 'PyObject *', normalVector: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        symmetry3DPlane(DataArrayDouble self, PyObject * point, PyObject * normalVector) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_symmetry3DPlane(self, point, normalVector)


    def GiveBaseForPlane(normalVector: 'PyObject *') -> "PyObject *":
        """
        GiveBaseForPlane(PyObject * normalVector) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_GiveBaseForPlane(normalVector)

    GiveBaseForPlane = staticmethod(GiveBaseForPlane)

    def fromCartToCylGiven(self, coords: 'DataArrayDouble', center: 'PyObject *', vector: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        fromCartToCylGiven(DataArrayDouble self, DataArrayDouble coords, PyObject * center, PyObject * vector) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_fromCartToCylGiven(self, coords, center, vector)


    def renumber(self, li: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        renumber(DataArrayDouble self, PyObject * li) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_renumber(self, li)


    def renumberR(self, li: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        renumberR(DataArrayDouble self, PyObject * li) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_renumberR(self, li)


    def renumberAndReduce(self, li: 'PyObject *', newNbOfTuple: 'int') -> "MEDCoupling::DataArrayDouble *":
        """
        renumberAndReduce(DataArrayDouble self, PyObject * li, int newNbOfTuple) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_renumberAndReduce(self, li, newNbOfTuple)


    def minimalDistanceTo(self, other: 'DataArrayDouble') -> "PyObject *":
        """
        minimalDistanceTo(DataArrayDouble self, DataArrayDouble other) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_minimalDistanceTo(self, other)


    def getMaxValue(self) -> "PyObject *":
        """
        getMaxValue(DataArrayDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getMaxValue(self)


    def getMaxAbsValue(self) -> "PyObject *":
        """
        getMaxAbsValue(DataArrayDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getMaxAbsValue(self)


    def getMaxValue2(self) -> "PyObject *":
        """
        getMaxValue2(DataArrayDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getMaxValue2(self)


    def getMinValue(self) -> "PyObject *":
        """
        getMinValue(DataArrayDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getMinValue(self)


    def getMinValue2(self) -> "PyObject *":
        """
        getMinValue2(DataArrayDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getMinValue2(self)


    def getMinMaxPerComponent(self) -> "PyObject *":
        """
        getMinMaxPerComponent(DataArrayDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getMinMaxPerComponent(self)


    def normMaxPerComponent(self) -> "PyObject *":
        """
        normMaxPerComponent(DataArrayDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_normMaxPerComponent(self)


    def accumulate(self, *args) -> "PyObject *":
        """
        accumulate(DataArrayDouble self, int compId) -> double
        accumulate(DataArrayDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_accumulate(self, *args)


    def accumulatePerChunck(self, indexArr: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        accumulatePerChunck(DataArrayDouble self, PyObject * indexArr) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_accumulatePerChunck(self, indexArr)


    def findCommonTuples(self, prec: 'double', limitNodeId: 'int'=-1) -> "PyObject *":
        """
        findCommonTuples(DataArrayDouble self, double prec, int limitNodeId=-1) -> PyObject
        findCommonTuples(DataArrayDouble self, double prec) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_findCommonTuples(self, prec, limitNodeId)


    def distanceToTuple(self, tuple: 'PyObject *') -> "PyObject *":
        """
        distanceToTuple(DataArrayDouble self, PyObject * tuple) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_distanceToTuple(self, tuple)


    def setSelectedComponents(self, a: 'DataArrayDouble', li: 'PyObject *') -> "void":
        """
        setSelectedComponents(DataArrayDouble self, DataArrayDouble a, PyObject * li)

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_setSelectedComponents(self, a, li)


    def explodeComponents(self) -> "PyObject *":
        """
        explodeComponents(DataArrayDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_explodeComponents(self)


    def getTuple(self, tupleId: 'int') -> "PyObject *":
        """
        getTuple(DataArrayDouble self, int tupleId) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_getTuple(self, tupleId)


    def Aggregate(*args) -> "MEDCoupling::DataArrayDouble *":
        """
        Aggregate(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        Aggregate(PyObject * li) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_Aggregate(*args)

    Aggregate = staticmethod(Aggregate)

    def Meld(*args) -> "MEDCoupling::DataArrayDouble *":
        """
        Meld(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        Meld(PyObject * li) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_Meld(*args)

    Meld = staticmethod(Meld)

    def areIncludedInMe(self, other: 'DataArrayDouble', prec: 'double') -> "PyObject *":
        """
        areIncludedInMe(DataArrayDouble self, DataArrayDouble other, double prec) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_areIncludedInMe(self, other, prec)


    def __getitem__(self, obj: 'PyObject *') -> "PyObject *":
        """
        __getitem__(DataArrayDouble self, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___getitem__(self, obj)


    def __setitem__(self, obj: 'PyObject *', value: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        __setitem__(DataArrayDouble self, PyObject * obj, PyObject * value) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___setitem__(self, obj, value)


    def __neg__(self) -> "MEDCoupling::DataArrayDouble *":
        """
        __neg__(DataArrayDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___neg__(self)


    def __add__(self, obj: 'PyObject *') -> "PyObject *":
        """
        __add__(DataArrayDouble self, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___add__(self, obj)


    def __radd__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        __radd__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___radd__(self, obj)


    def ___iadd___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___iadd___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble____iadd___(self, trueSelf, obj)


    def __sub__(self, obj: 'PyObject *') -> "PyObject *":
        """
        __sub__(DataArrayDouble self, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___sub__(self, obj)


    def __rsub__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        __rsub__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___rsub__(self, obj)


    def ___isub___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___isub___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble____isub___(self, trueSelf, obj)


    def __mul__(self, obj: 'PyObject *') -> "PyObject *":
        """
        __mul__(DataArrayDouble self, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___mul__(self, obj)


    def __rmul__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        __rmul__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___rmul__(self, obj)


    def ___imul___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___imul___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble____imul___(self, trueSelf, obj)


    def __div__(self, obj: 'PyObject *') -> "PyObject *":
        """
        __div__(DataArrayDouble self, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___div__(self, obj)


    def __rdiv__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        __rdiv__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___rdiv__(self, obj)


    def ___idiv___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___idiv___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble____idiv___(self, trueSelf, obj)


    def __pow__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        __pow__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___pow__(self, obj)


    def __rpow__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        __rpow__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDouble___rpow__(self, obj)


    def ___ipow___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___ipow___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble____ipow___(self, trueSelf, obj)


    def computeTupleIdsNearTuples(self, *args) -> "PyObject *":
        """
        computeTupleIdsNearTuples(DataArrayDouble self, PyObject * pt, double eps) -> PyObject
        computeTupleIdsNearTuples(DataArrayDouble self, DataArrayDouble other, double eps) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_computeTupleIdsNearTuples(self, *args)


    def maxPerTupleWithCompoId(self) -> "PyObject *":
        """
        maxPerTupleWithCompoId(DataArrayDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDouble_maxPerTupleWithCompoId(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayDouble
    __del__ = lambda self: None
DataArrayDouble_swigregister = _MEDCouplingCompat.DataArrayDouble_swigregister
DataArrayDouble_swigregister(DataArrayDouble)

def DataArrayDouble_Dot(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    """
    DataArrayDouble_Dot(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.DataArrayDouble_Dot(a1, a2)

def DataArrayDouble_CrossProduct(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    """
    DataArrayDouble_CrossProduct(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.DataArrayDouble_CrossProduct(a1, a2)

def DataArrayDouble_Max(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    """
    DataArrayDouble_Max(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.DataArrayDouble_Max(a1, a2)

def DataArrayDouble_Min(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    """
    DataArrayDouble_Min(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.DataArrayDouble_Min(a1, a2)

def DataArrayDouble_Add(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    """
    DataArrayDouble_Add(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.DataArrayDouble_Add(a1, a2)

def DataArrayDouble_Substract(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    """
    DataArrayDouble_Substract(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.DataArrayDouble_Substract(a1, a2)

def DataArrayDouble_Multiply(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    """
    DataArrayDouble_Multiply(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.DataArrayDouble_Multiply(a1, a2)

def DataArrayDouble_Divide(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    """
    DataArrayDouble_Divide(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.DataArrayDouble_Divide(a1, a2)

def DataArrayDouble_Pow(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    """
    DataArrayDouble_Pow(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.DataArrayDouble_Pow(a1, a2)

def DataArrayDouble_New(*args) -> "MEDCoupling::DataArrayDouble *":
    """
    New() -> DataArrayDouble
    New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayDouble
    New(PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayDouble
    DataArrayDouble_New(PyObject * elt0) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.DataArrayDouble_New(*args)

def DataArrayDouble_ComputeIntegralOfSeg2IntoTri3(seg2: 'PyObject *', tri3: 'PyObject *') -> "PyObject *":
    """
    DataArrayDouble_ComputeIntegralOfSeg2IntoTri3(PyObject * seg2, PyObject * tri3) -> PyObject *

    1
    """
    return _MEDCouplingCompat.DataArrayDouble_ComputeIntegralOfSeg2IntoTri3(seg2, tri3)

def DataArrayDouble_GiveBaseForPlane(normalVector: 'PyObject *') -> "PyObject *":
    """
    DataArrayDouble_GiveBaseForPlane(PyObject * normalVector) -> PyObject *

    1
    """
    return _MEDCouplingCompat.DataArrayDouble_GiveBaseForPlane(normalVector)

def DataArrayDouble_Aggregate(*args) -> "MEDCoupling::DataArrayDouble *":
    """
    Aggregate(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    DataArrayDouble_Aggregate(PyObject * li) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.DataArrayDouble_Aggregate(*args)

def DataArrayDouble_Meld(*args) -> "MEDCoupling::DataArrayDouble *":
    """
    Meld(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    DataArrayDouble_Meld(PyObject * li) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.DataArrayDouble_Meld(*args)

class DataArrayDoubleIterator(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayDoubleIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayDoubleIterator, name)
    __repr__ = _swig_repr

    def __init__(self, da: 'DataArrayDouble'):
        """
        __init__(MEDCoupling::DataArrayDoubleIterator self, DataArrayDouble da) -> DataArrayDoubleIterator

        1
        """
        this = _MEDCouplingCompat.new_DataArrayDoubleIterator(da)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayDoubleIterator
    __del__ = lambda self: None

    def next(self) -> "PyObject *":
        """
        next(DataArrayDoubleIterator self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDoubleIterator_next(self)

DataArrayDoubleIterator_swigregister = _MEDCouplingCompat.DataArrayDoubleIterator_swigregister
DataArrayDoubleIterator_swigregister(DataArrayDoubleIterator)

class DataArrayDoubleTuple(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayDoubleTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayDoubleTuple, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCompo(self) -> "int":
        """
        getNumberOfCompo(DataArrayDoubleTuple self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayDoubleTuple_getNumberOfCompo(self)


    def __str__(self) -> "std::string":
        """
        __str__(DataArrayDoubleTuple self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayDoubleTuple___str__(self)


    def __float__(self) -> "double":
        """
        __float__(DataArrayDoubleTuple self) -> double

        1
        """
        return _MEDCouplingCompat.DataArrayDoubleTuple___float__(self)


    def buildDADouble(self, *args) -> "MEDCoupling::DataArrayDouble *":
        """
        buildDADouble(DataArrayDoubleTuple self, int nbOfTuples, int nbOfCompo) -> DataArrayDouble
        buildDADouble(DataArrayDoubleTuple self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DataArrayDoubleTuple_buildDADouble(self, *args)


    def ___iadd___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___iadd___(DataArrayDoubleTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDoubleTuple____iadd___(self, trueSelf, obj)


    def ___isub___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___isub___(DataArrayDoubleTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDoubleTuple____isub___(self, trueSelf, obj)


    def ___imul___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___imul___(DataArrayDoubleTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDoubleTuple____imul___(self, trueSelf, obj)


    def ___idiv___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___idiv___(DataArrayDoubleTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDoubleTuple____idiv___(self, trueSelf, obj)


    def __len__(self) -> "PyObject *":
        """
        __len__(DataArrayDoubleTuple self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDoubleTuple___len__(self)


    def __getitem__(self, obj: 'PyObject *') -> "PyObject *":
        """
        __getitem__(DataArrayDoubleTuple self, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayDoubleTuple___getitem__(self, obj)


    def __setitem__(self, obj: 'PyObject *', value: 'PyObject *') -> "MEDCoupling::DataArrayDoubleTuple *":
        """
        __setitem__(DataArrayDoubleTuple self, PyObject * obj, PyObject * value) -> DataArrayDoubleTuple

        1
        """
        return _MEDCouplingCompat.DataArrayDoubleTuple___setitem__(self, obj, value)

    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayDoubleTuple
    __del__ = lambda self: None
DataArrayDoubleTuple_swigregister = _MEDCouplingCompat.DataArrayDoubleTuple_swigregister
DataArrayDoubleTuple_swigregister(DataArrayDoubleTuple)

class DataArrayInt(DataArray):
    """1"""

    __swig_setmethods__ = {}
    for _s in [DataArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayInt, name, value)
    __swig_getmethods__ = {}
    for _s in [DataArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayInt, name)

    def intValue(self) -> "int":
        """
        intValue(DataArrayInt self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_intValue(self)


    def getHashCode(self) -> "int":
        """
        getHashCode(DataArrayInt self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getHashCode(self)


    def empty(self) -> "bool":
        """
        empty(DataArrayInt self) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayInt_empty(self)


    def aggregate(self, other: 'DataArrayInt') -> "void":
        """
        aggregate(DataArrayInt self, DataArrayInt other)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_aggregate(self, other)


    def performCopyOrIncrRef(self, deepCopy: 'bool') -> "MEDCoupling::DataArrayInt *":
        """
        performCopyOrIncrRef(DataArrayInt self, bool deepCopy) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_performCopyOrIncrRef(self, deepCopy)


    def deepCopyFrom(self, other: 'DataArrayInt') -> "void":
        """
        deepCopyFrom(DataArrayInt self, DataArrayInt other)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_deepCopyFrom(self, other)


    def reserve(self, nbOfElems: 'std::size_t') -> "void":
        """
        reserve(DataArrayInt self, std::size_t nbOfElems)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_reserve(self, nbOfElems)


    def pushBackSilent(self, val: 'int') -> "void":
        """
        pushBackSilent(DataArrayInt self, int val)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_pushBackSilent(self, val)


    def popBackSilent(self) -> "int":
        """
        popBackSilent(DataArrayInt self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_popBackSilent(self)


    def pack(self) -> "void":
        """
        pack(DataArrayInt self)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_pack(self)


    def allocIfNecessary(self, nbOfTuple: 'int', nbOfCompo: 'int') -> "void":
        """
        allocIfNecessary(DataArrayInt self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_allocIfNecessary(self, nbOfTuple, nbOfCompo)


    def isEqual(self, other: 'DataArrayInt') -> "bool":
        """
        isEqual(DataArrayInt self, DataArrayInt other) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayInt_isEqual(self, other)


    def isEqualWithoutConsideringStr(self, other: 'DataArrayInt') -> "bool":
        """
        isEqualWithoutConsideringStr(DataArrayInt self, DataArrayInt other) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayInt_isEqualWithoutConsideringStr(self, other)


    def isEqualWithoutConsideringStrAndOrder(self, other: 'DataArrayInt') -> "bool":
        """
        isEqualWithoutConsideringStrAndOrder(DataArrayInt self, DataArrayInt other) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayInt_isEqualWithoutConsideringStrAndOrder(self, other)


    def buildPermutationArr(self, other: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        buildPermutationArr(DataArrayInt self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_buildPermutationArr(self, other)


    def sumPerTuple(self) -> "MEDCoupling::DataArrayInt *":
        """
        sumPerTuple(DataArrayInt self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_sumPerTuple(self)


    def sort(self, asc: 'bool'=True) -> "void":
        """
        sort(DataArrayInt self, bool asc=True)
        sort(DataArrayInt self)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_sort(self, asc)


    def reverse(self) -> "void":
        """
        reverse(DataArrayInt self)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_reverse(self)


    def checkMonotonic(self, increasing: 'bool') -> "void":
        """
        checkMonotonic(DataArrayInt self, bool increasing)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_checkMonotonic(self, increasing)


    def isMonotonic(self, increasing: 'bool') -> "bool":
        """
        isMonotonic(DataArrayInt self, bool increasing) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayInt_isMonotonic(self, increasing)


    def checkStrictlyMonotonic(self, increasing: 'bool') -> "void":
        """
        checkStrictlyMonotonic(DataArrayInt self, bool increasing)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_checkStrictlyMonotonic(self, increasing)


    def isStrictlyMonotonic(self, increasing: 'bool') -> "bool":
        """
        isStrictlyMonotonic(DataArrayInt self, bool increasing) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayInt_isStrictlyMonotonic(self, increasing)


    def fillWithZero(self) -> "void":
        """
        fillWithZero(DataArrayInt self)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_fillWithZero(self)


    def fillWithValue(self, val: 'int') -> "void":
        """
        fillWithValue(DataArrayInt self, int val)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_fillWithValue(self, val)


    def iota(self, init: 'int'=0) -> "void":
        """
        iota(DataArrayInt self, int init=0)
        iota(DataArrayInt self)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_iota(self, init)


    def repr(self) -> "std::string":
        """
        repr(DataArrayInt self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayInt_repr(self)


    def reprZip(self) -> "std::string":
        """
        reprZip(DataArrayInt self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayInt_reprZip(self)


    def reprNotTooLong(self) -> "std::string":
        """
        reprNotTooLong(DataArrayInt self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayInt_reprNotTooLong(self)


    def invertArrayO2N2N2O(self, newNbOfElem: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        invertArrayO2N2N2O(DataArrayInt self, int newNbOfElem) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_invertArrayO2N2N2O(self, newNbOfElem)


    def invertArrayN2O2O2N(self, oldNbOfElem: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        invertArrayN2O2O2N(DataArrayInt self, int oldNbOfElem) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_invertArrayN2O2O2N(self, oldNbOfElem)


    def invertArrayO2N2N2OBis(self, newNbOfElem: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        invertArrayO2N2N2OBis(DataArrayInt self, int newNbOfElem) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_invertArrayO2N2N2OBis(self, newNbOfElem)


    def invertArrayN2O2O2NOptimized(self) -> "MCAuto< MEDCoupling::MapII >":
        """
        invertArrayN2O2O2NOptimized(DataArrayInt self) -> MCAuto< MEDCoupling::MapII >

        1
        """
        return _MEDCouplingCompat.DataArrayInt_invertArrayN2O2O2NOptimized(self)


    def giveN2OOptimized(self) -> "MCAuto< MEDCoupling::MapII >":
        """
        giveN2OOptimized(DataArrayInt self) -> MCAuto< MEDCoupling::MapII >

        1
        """
        return _MEDCouplingCompat.DataArrayInt_giveN2OOptimized(self)


    def indicesOfSubPart(self, partOfThis: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        indicesOfSubPart(DataArrayInt self, DataArrayInt partOfThis) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_indicesOfSubPart(self, partOfThis)


    def fromNoInterlace(self) -> "MEDCoupling::DataArrayInt *":
        """
        fromNoInterlace(DataArrayInt self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_fromNoInterlace(self)


    def toNoInterlace(self) -> "MEDCoupling::DataArrayInt *":
        """
        toNoInterlace(DataArrayInt self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_toNoInterlace(self)


    def selectByTupleIdSafeSlice(self, bg: 'int', end: 'int', step: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        selectByTupleIdSafeSlice(DataArrayInt self, int bg, int end, int step) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_selectByTupleIdSafeSlice(self, bg, end, step)


    def checkAndPreparePermutation(self) -> "MEDCoupling::DataArrayInt *":
        """
        checkAndPreparePermutation(DataArrayInt self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_checkAndPreparePermutation(self)


    def buildPermArrPerLevel(self) -> "MEDCoupling::DataArrayInt *":
        """
        buildPermArrPerLevel(DataArrayInt self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_buildPermArrPerLevel(self)


    def isIota(self, sizeExpected: 'int') -> "bool":
        """
        isIota(DataArrayInt self, int sizeExpected) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayInt_isIota(self, sizeExpected)


    def isUniform(self, val: 'int') -> "bool":
        """
        isUniform(DataArrayInt self, int val) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayInt_isUniform(self, val)


    def checkUniformAndGuess(self) -> "int":
        """
        checkUniformAndGuess(DataArrayInt self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_checkUniformAndGuess(self)


    def hasUniqueValues(self) -> "bool":
        """
        hasUniqueValues(DataArrayInt self) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayInt_hasUniqueValues(self)


    def subArray(self, tupleIdBg: 'int', tupleIdEnd: 'int'=-1) -> "MEDCoupling::DataArrayInt *":
        """
        subArray(DataArrayInt self, int tupleIdBg, int tupleIdEnd=-1) -> DataArrayInt
        subArray(DataArrayInt self, int tupleIdBg) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_subArray(self, tupleIdBg, tupleIdEnd)


    def transpose(self) -> "void":
        """
        transpose(DataArrayInt self)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_transpose(self)


    def changeNbOfComponents(self, newNbOfComp: 'int', dftValue: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        changeNbOfComponents(DataArrayInt self, int newNbOfComp, int dftValue) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_changeNbOfComponents(self, newNbOfComp, dftValue)


    def meldWith(self, other: 'DataArrayInt') -> "void":
        """
        meldWith(DataArrayInt self, DataArrayInt other)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_meldWith(self, other)


    def setPartOfValues1(self, a: 'DataArrayInt', bgTuples: 'int', endTuples: 'int', stepTuples: 'int', bgComp: 'int', endComp: 'int', stepComp: 'int', strictCompoCompare: 'bool'=True) -> "void":
        """
        setPartOfValues1(DataArrayInt self, DataArrayInt a, int bgTuples, int endTuples, int stepTuples, int bgComp, int endComp, int stepComp, bool strictCompoCompare=True)
        setPartOfValues1(DataArrayInt self, DataArrayInt a, int bgTuples, int endTuples, int stepTuples, int bgComp, int endComp, int stepComp)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_setPartOfValues1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp, strictCompoCompare)


    def setPartOfValuesSimple1(self, a: 'int', bgTuples: 'int', endTuples: 'int', stepTuples: 'int', bgComp: 'int', endComp: 'int', stepComp: 'int') -> "void":
        """
        setPartOfValuesSimple1(DataArrayInt self, int a, int bgTuples, int endTuples, int stepTuples, int bgComp, int endComp, int stepComp)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_setPartOfValuesSimple1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp)


    def setPartOfValuesAdv(self, a: 'DataArrayInt', tuplesSelec: 'DataArrayInt') -> "void":
        """
        setPartOfValuesAdv(DataArrayInt self, DataArrayInt a, DataArrayInt tuplesSelec)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_setPartOfValuesAdv(self, a, tuplesSelec)


    def getIJ(self, tupleId: 'int', compoId: 'int') -> "int":
        """
        getIJ(DataArrayInt self, int tupleId, int compoId) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getIJ(self, tupleId, compoId)


    def getIJSafe(self, tupleId: 'int', compoId: 'int') -> "int":
        """
        getIJSafe(DataArrayInt self, int tupleId, int compoId) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getIJSafe(self, tupleId, compoId)


    def front(self) -> "int":
        """
        front(DataArrayInt self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_front(self)


    def back(self) -> "int":
        """
        back(DataArrayInt self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_back(self)


    def setIJ(self, tupleId: 'int', compoId: 'int', newVal: 'int') -> "void":
        """
        setIJ(DataArrayInt self, int tupleId, int compoId, int newVal)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_setIJ(self, tupleId, compoId, newVal)


    def setIJSilent(self, tupleId: 'int', compoId: 'int', newVal: 'int') -> "void":
        """
        setIJSilent(DataArrayInt self, int tupleId, int compoId, int newVal)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_setIJSilent(self, tupleId, compoId, newVal)


    def getPointer(self) -> "int *":
        """
        getPointer(DataArrayInt self) -> int *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getPointer(self)


    def getConstPointer(self) -> "int const *":
        """
        getConstPointer(DataArrayInt self) -> int const *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getConstPointer(self)


    def iterator(self) -> "MEDCoupling::DataArrayIntIterator *":
        """
        iterator(DataArrayInt self) -> DataArrayIntIterator

        1
        """
        return _MEDCouplingCompat.DataArrayInt_iterator(self)


    def begin(self) -> "int const *":
        """
        begin(DataArrayInt self) -> int const *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_begin(self)


    def end(self) -> "int const *":
        """
        end(DataArrayInt self) -> int const *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_end(self)


    def findIdsEqual(self, val: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        findIdsEqual(DataArrayInt self, int val) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdsEqual(self, val)


    def findIdsNotEqual(self, val: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        findIdsNotEqual(DataArrayInt self, int val) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdsNotEqual(self, val)


    def changeValue(self, oldValue: 'int', newValue: 'int') -> "int":
        """
        changeValue(DataArrayInt self, int oldValue, int newValue) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_changeValue(self, oldValue, newValue)


    def findIdFirstEqualTuple(self, tupl: 'ivec') -> "int":
        """
        findIdFirstEqualTuple(DataArrayInt self, ivec tupl) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdFirstEqualTuple(self, tupl)


    def findIdFirstEqual(self, *args) -> "int":
        """
        findIdFirstEqual(DataArrayInt self, int value) -> int
        findIdFirstEqual(DataArrayInt self, ivec vals) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdFirstEqual(self, *args)


    def findIdSequence(self, vals: 'ivec') -> "int":
        """
        findIdSequence(DataArrayInt self, ivec vals) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdSequence(self, vals)


    def presenceOfTuple(self, tupl: 'ivec') -> "bool":
        """
        presenceOfTuple(DataArrayInt self, ivec tupl) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayInt_presenceOfTuple(self, tupl)


    def presenceOfValue(self, *args) -> "bool":
        """
        presenceOfValue(DataArrayInt self, int value) -> bool
        presenceOfValue(DataArrayInt self, ivec vals) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayInt_presenceOfValue(self, *args)


    def count(self, value: 'int') -> "int":
        """
        count(DataArrayInt self, int value) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_count(self, value)


    def getMaxValueInArray(self) -> "int":
        """
        getMaxValueInArray(DataArrayInt self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getMaxValueInArray(self)


    def getMaxAbsValueInArray(self) -> "int":
        """
        getMaxAbsValueInArray(DataArrayInt self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getMaxAbsValueInArray(self)


    def getMinValueInArray(self) -> "int":
        """
        getMinValueInArray(DataArrayInt self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getMinValueInArray(self)


    def abs(self) -> "void":
        """
        abs(DataArrayInt self)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_abs(self)


    def computeAbs(self) -> "MEDCoupling::DataArrayInt *":
        """
        computeAbs(DataArrayInt self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_computeAbs(self)


    def applyLin(self, *args) -> "void":
        """
        applyLin(DataArrayInt self, int a, int b, int compoId)
        applyLin(DataArrayInt self, int a, int b)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_applyLin(self, *args)


    def applyInv(self, numerator: 'int') -> "void":
        """
        applyInv(DataArrayInt self, int numerator)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_applyInv(self, numerator)


    def negate(self) -> "MEDCoupling::DataArrayInt *":
        """
        negate(DataArrayInt self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_negate(self)


    def applyDivideBy(self, val: 'int') -> "void":
        """
        applyDivideBy(DataArrayInt self, int val)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_applyDivideBy(self, val)


    def applyModulus(self, val: 'int') -> "void":
        """
        applyModulus(DataArrayInt self, int val)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_applyModulus(self, val)


    def applyRModulus(self, val: 'int') -> "void":
        """
        applyRModulus(DataArrayInt self, int val)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_applyRModulus(self, val)


    def applyPow(self, val: 'int') -> "void":
        """
        applyPow(DataArrayInt self, int val)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_applyPow(self, val)


    def applyRPow(self, val: 'int') -> "void":
        """
        applyRPow(DataArrayInt self, int val)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_applyRPow(self, val)


    def findIdsInRange(self, vmin: 'int', vmax: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        findIdsInRange(DataArrayInt self, int vmin, int vmax) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdsInRange(self, vmin, vmax)


    def findIdsNotInRange(self, vmin: 'int', vmax: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        findIdsNotInRange(DataArrayInt self, int vmin, int vmax) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdsNotInRange(self, vmin, vmax)


    def findIdsStrictlyNegative(self) -> "MEDCoupling::DataArrayInt *":
        """
        findIdsStrictlyNegative(DataArrayInt self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdsStrictlyNegative(self)


    def checkAllIdsInRange(self, vmin: 'int', vmax: 'int') -> "bool":
        """
        checkAllIdsInRange(DataArrayInt self, int vmin, int vmax) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayInt_checkAllIdsInRange(self, vmin, vmax)


    def FindPermutationFromFirstToSecond(ids1: 'DataArrayInt', ids2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        FindPermutationFromFirstToSecond(DataArrayInt ids1, DataArrayInt ids2) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_FindPermutationFromFirstToSecond(ids1, ids2)

    FindPermutationFromFirstToSecond = staticmethod(FindPermutationFromFirstToSecond)

    def buildComplement(self, nbOfElement: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        buildComplement(DataArrayInt self, int nbOfElement) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_buildComplement(self, nbOfElement)


    def buildSubstraction(self, other: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        buildSubstraction(DataArrayInt self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_buildSubstraction(self, other)


    def buildSubstractionOptimized(self, other: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        buildSubstractionOptimized(DataArrayInt self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_buildSubstractionOptimized(self, other)


    def buildUnion(self, other: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        buildUnion(DataArrayInt self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_buildUnion(self, other)


    def buildIntersection(self, other: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        buildIntersection(DataArrayInt self, DataArrayInt other) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_buildIntersection(self, other)


    def buildUnique(self) -> "MEDCoupling::DataArrayInt *":
        """
        buildUnique(DataArrayInt self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_buildUnique(self)


    def buildUniqueNotSorted(self) -> "MEDCoupling::DataArrayInt *":
        """
        buildUniqueNotSorted(DataArrayInt self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_buildUniqueNotSorted(self)


    def deltaShiftIndex(self) -> "MEDCoupling::DataArrayInt *":
        """
        deltaShiftIndex(DataArrayInt self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_deltaShiftIndex(self)


    def computeOffsets(self) -> "void":
        """
        computeOffsets(DataArrayInt self)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_computeOffsets(self)


    def computeOffsetsFull(self) -> "void":
        """
        computeOffsetsFull(DataArrayInt self)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_computeOffsetsFull(self)


    def buildExplicitArrByRanges(self, offsets: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        buildExplicitArrByRanges(DataArrayInt self, DataArrayInt offsets) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_buildExplicitArrByRanges(self, offsets)


    def findRangeIdForEachTuple(self, ranges: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        findRangeIdForEachTuple(DataArrayInt self, DataArrayInt ranges) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findRangeIdForEachTuple(self, ranges)


    def findIdInRangeForEachTuple(self, ranges: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        findIdInRangeForEachTuple(DataArrayInt self, DataArrayInt ranges) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdInRangeForEachTuple(self, ranges)


    def sortEachPairToMakeALinkedList(self) -> "void":
        """
        sortEachPairToMakeALinkedList(DataArrayInt self)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_sortEachPairToMakeALinkedList(self)


    def duplicateEachTupleNTimes(self, nbTimes: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        duplicateEachTupleNTimes(DataArrayInt self, int nbTimes) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_duplicateEachTupleNTimes(self, nbTimes)


    def getDifferentValues(self) -> "MEDCoupling::DataArrayInt *":
        """
        getDifferentValues(DataArrayInt self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getDifferentValues(self)


    def Add(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        Add(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_Add(a1, a2)

    Add = staticmethod(Add)

    def addEqual(self, other: 'DataArrayInt') -> "void":
        """
        addEqual(DataArrayInt self, DataArrayInt other)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_addEqual(self, other)


    def Substract(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        Substract(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_Substract(a1, a2)

    Substract = staticmethod(Substract)

    def substractEqual(self, other: 'DataArrayInt') -> "void":
        """
        substractEqual(DataArrayInt self, DataArrayInt other)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_substractEqual(self, other)


    def Multiply(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        Multiply(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_Multiply(a1, a2)

    Multiply = staticmethod(Multiply)

    def multiplyEqual(self, other: 'DataArrayInt') -> "void":
        """
        multiplyEqual(DataArrayInt self, DataArrayInt other)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_multiplyEqual(self, other)


    def Divide(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        Divide(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_Divide(a1, a2)

    Divide = staticmethod(Divide)

    def divideEqual(self, other: 'DataArrayInt') -> "void":
        """
        divideEqual(DataArrayInt self, DataArrayInt other)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_divideEqual(self, other)


    def Modulus(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        Modulus(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_Modulus(a1, a2)

    Modulus = staticmethod(Modulus)

    def modulusEqual(self, other: 'DataArrayInt') -> "void":
        """
        modulusEqual(DataArrayInt self, DataArrayInt other)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_modulusEqual(self, other)


    def Pow(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        Pow(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_Pow(a1, a2)

    Pow = staticmethod(Pow)

    def powEqual(self, other: 'DataArrayInt') -> "void":
        """
        powEqual(DataArrayInt self, DataArrayInt other)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_powEqual(self, other)


    def fromLinkedListOfPairToList(self) -> "MCAuto< MEDCoupling::DataArrayInt >":
        """
        fromLinkedListOfPairToList(DataArrayInt self) -> MCAuto< MEDCoupling::DataArrayInt >

        1
        """
        return _MEDCouplingCompat.DataArrayInt_fromLinkedListOfPairToList(self)


    def findIdsGreaterOrEqualTo(self, val: 'int') -> "MCAuto< MEDCoupling::DataArrayInt >":
        """
        findIdsGreaterOrEqualTo(DataArrayInt self, int val) -> MCAuto< MEDCoupling::DataArrayInt >

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdsGreaterOrEqualTo(self, val)


    def findIdsGreaterThan(self, val: 'int') -> "MCAuto< MEDCoupling::DataArrayInt >":
        """
        findIdsGreaterThan(DataArrayInt self, int val) -> MCAuto< MEDCoupling::DataArrayInt >

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdsGreaterThan(self, val)


    def findIdsLowerOrEqualTo(self, val: 'int') -> "MCAuto< MEDCoupling::DataArrayInt >":
        """
        findIdsLowerOrEqualTo(DataArrayInt self, int val) -> MCAuto< MEDCoupling::DataArrayInt >

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdsLowerOrEqualTo(self, val)


    def findIdsLowerThan(self, val: 'int') -> "MCAuto< MEDCoupling::DataArrayInt >":
        """
        findIdsLowerThan(DataArrayInt self, int val) -> MCAuto< MEDCoupling::DataArrayInt >

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdsLowerThan(self, val)


    def selectPartDef(self, pd: 'PartDefinition') -> "MCAuto< MEDCoupling::DataArrayInt >":
        """
        selectPartDef(DataArrayInt self, PartDefinition pd) -> MCAuto< MEDCoupling::DataArrayInt >

        1
        """
        return _MEDCouplingCompat.DataArrayInt_selectPartDef(self, pd)


    def convertToDblArr(self) -> "MCAuto< MEDCoupling::DataArrayDouble >":
        """
        convertToDblArr(DataArrayInt self) -> MCAuto< MEDCoupling::DataArrayDouble >

        1
        """
        return _MEDCouplingCompat.DataArrayInt_convertToDblArr(self)


    def convertToFloatArr(self) -> "MCAuto< MEDCoupling::DataArrayFloat >":
        """
        convertToFloatArr(DataArrayInt self) -> MCAuto< MEDCoupling::DataArrayFloat >

        1
        """
        return _MEDCouplingCompat.DataArrayInt_convertToFloatArr(self)


    def Range(begin: 'int', end: 'int', step: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        Range(int begin, int end, int step) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_Range(begin, end, step)

    Range = staticmethod(Range)

    def New(*args) -> "MEDCoupling::DataArrayInt *":
        """
        New() -> DataArrayInt
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayInt
        New(PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayInt
        New(PyObject * elt0) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_New(*args)

    New = staticmethod(New)

    def __init__(self, *args):
        """
        __init__(MEDCoupling::DataArrayInt self) -> DataArrayInt
        __init__(MEDCoupling::DataArrayInt self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayInt
        __init__(MEDCoupling::DataArrayInt self, PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayInt
        __init__(MEDCoupling::DataArrayInt self, PyObject * elt0) -> DataArrayInt

        1
        """
        this = _MEDCouplingCompat.new_DataArrayInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        """
        __str__(DataArrayInt self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayInt___str__(self)


    def __len__(self) -> "int":
        """
        __len__(DataArrayInt self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt___len__(self)


    def __int__(self) -> "int":
        """
        __int__(DataArrayInt self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt___int__(self)


    def __iter__(self) -> "MEDCoupling::DataArrayIntIterator *":
        """
        __iter__(DataArrayInt self) -> DataArrayIntIterator

        1
        """
        return _MEDCouplingCompat.DataArrayInt___iter__(self)


    def accumulate(self, *args) -> "PyObject *":
        """
        accumulate(DataArrayInt self, int compId) -> int
        accumulate(DataArrayInt self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_accumulate(self, *args)


    def accumulatePerChunck(self, indexArr: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        accumulatePerChunck(DataArrayInt self, PyObject * indexArr) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_accumulatePerChunck(self, indexArr)


    def findIdsEqualTuple(self, inputTuple: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        findIdsEqualTuple(DataArrayInt self, PyObject * inputTuple) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdsEqualTuple(self, inputTuple)


    def findIdForEach(self, vals: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        findIdForEach(DataArrayInt self, PyObject * vals) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdForEach(self, vals)


    def splitInBalancedSlices(self, nbOfSlices: 'int') -> "PyObject *":
        """
        splitInBalancedSlices(DataArrayInt self, int nbOfSlices) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_splitInBalancedSlices(self, nbOfSlices)


    def buildExplicitArrOfSliceOnScaledArr(self, slic: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        buildExplicitArrOfSliceOnScaledArr(DataArrayInt self, PyObject * slic) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_buildExplicitArrOfSliceOnScaledArr(self, slic)


    def getMinMaxValues(self) -> "PyObject *":
        """
        getMinMaxValues(DataArrayInt self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getMinMaxValues(self)


    def ConvertIndexArrayToO2N(nbOfOldTuples: 'int', arr: 'PyObject *', arrI: 'PyObject *') -> "PyObject *":
        """
        ConvertIndexArrayToO2N(int nbOfOldTuples, PyObject * arr, PyObject * arrI) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_ConvertIndexArrayToO2N(nbOfOldTuples, arr, arrI)

    ConvertIndexArrayToO2N = staticmethod(ConvertIndexArrayToO2N)

    def CheckAndPreparePermutation(arr: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        CheckAndPreparePermutation(PyObject * arr) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_CheckAndPreparePermutation(arr)

    CheckAndPreparePermutation = staticmethod(CheckAndPreparePermutation)

    def setValues(self, li: 'PyObject *', nbOfTuples: 'PyObject *'=None, nbOfComp: 'PyObject *'=None) -> "void":
        """
        setValues(DataArrayInt self, PyObject * li, PyObject * nbOfTuples=None, PyObject * nbOfComp=None)
        setValues(DataArrayInt self, PyObject * li, PyObject * nbOfTuples=None)
        setValues(DataArrayInt self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_setValues(self, li, nbOfTuples, nbOfComp)


    def getValues(self) -> "PyObject *":
        """
        getValues(DataArrayInt self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getValues(self)


    def toNumPyArray(self) -> "PyObject *":
        """
        toNumPyArray(DataArrayInt self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_toNumPyArray(self)


    def isEqualIfNotWhy(self, other: 'DataArrayInt') -> "PyObject *":
        """
        isEqualIfNotWhy(DataArrayInt self, DataArrayInt other) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_isEqualIfNotWhy(self, other)


    def getValuesAsTuple(self) -> "PyObject *":
        """
        getValuesAsTuple(DataArrayInt self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getValuesAsTuple(self)


    def MakePartition(*args) -> "PyObject *":
        """
        MakePartition(std::vector< MEDCoupling::DataArrayInt const *,std::allocator< MEDCoupling::DataArrayInt const * > > const & groups, int newNb, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > & fidsOfGroups) -> DataArrayInt
        MakePartition(PyObject * gps, int newNb) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_MakePartition(*args)

    MakePartition = staticmethod(MakePartition)

    def transformWithIndArr(self, li: 'PyObject *') -> "void":
        """
        transformWithIndArr(DataArrayInt self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_transformWithIndArr(self, li)


    def findIdsEqualList(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        findIdsEqualList(DataArrayInt self, PyObject * obj) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdsEqualList(self, obj)


    def findIdsNotEqualList(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        findIdsNotEqualList(DataArrayInt self, PyObject * obj) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdsNotEqualList(self, obj)


    def splitByValueRange(self, li: 'PyObject *') -> "PyObject *":
        """
        splitByValueRange(DataArrayInt self, PyObject * li) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_splitByValueRange(self, li)


    def transformWithIndArrR(self, li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        transformWithIndArrR(DataArrayInt self, PyObject * li) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_transformWithIndArrR(self, li)


    def renumberAndReduce(self, li: 'PyObject *', newNbOfTuple: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        renumberAndReduce(DataArrayInt self, PyObject * li, int newNbOfTuple) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_renumberAndReduce(self, li, newNbOfTuple)


    def renumber(self, li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        renumber(DataArrayInt self, PyObject * li) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_renumber(self, li)


    def renumberR(self, li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        renumberR(DataArrayInt self, PyObject * li) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_renumberR(self, li)


    def setSelectedComponents(self, a: 'DataArrayInt', li: 'PyObject *') -> "void":
        """
        setSelectedComponents(DataArrayInt self, DataArrayInt a, PyObject * li)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_setSelectedComponents(self, a, li)


    def explodeComponents(self) -> "PyObject *":
        """
        explodeComponents(DataArrayInt self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_explodeComponents(self)


    def getTuple(self, *args) -> "PyObject *":
        """
        getTuple(DataArrayInt self, int tupleId, int * res)
        getTuple(DataArrayInt self, int tupleId) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getTuple(self, *args)


    def changeSurjectiveFormat(self, targetNb: 'int') -> "PyObject *":
        """
        changeSurjectiveFormat(DataArrayInt self, int targetNb) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_changeSurjectiveFormat(self, targetNb)


    def Meld(*args) -> "MEDCoupling::DataArrayInt *":
        """
        Meld(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
        Meld(PyObject * li) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_Meld(*args)

    Meld = staticmethod(Meld)

    def Aggregate(*args) -> "MEDCoupling::DataArrayInt *":
        """
        Aggregate(DataArrayInt a1, DataArrayInt a2, int offsetA2) -> DataArrayInt
        Aggregate(PyObject * li) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_Aggregate(*args)

    Aggregate = staticmethod(Aggregate)

    def AggregateIndexes(li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        AggregateIndexes(PyObject * li) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_AggregateIndexes(li)

    AggregateIndexes = staticmethod(AggregateIndexes)

    def BuildUnion(*args) -> "MEDCoupling::DataArrayInt *":
        """
        BuildUnion(std::vector< MEDCoupling::DataArrayInt const *,std::allocator< MEDCoupling::DataArrayInt const * > > const & arr) -> DataArrayInt
        BuildUnion(PyObject * li) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_BuildUnion(*args)

    BuildUnion = staticmethod(BuildUnion)

    def BuildIntersection(*args) -> "MEDCoupling::DataArrayInt *":
        """
        BuildIntersection(std::vector< MEDCoupling::DataArrayInt const *,std::allocator< MEDCoupling::DataArrayInt const * > > const & arr) -> DataArrayInt
        BuildIntersection(PyObject * li) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt_BuildIntersection(*args)

    BuildIntersection = staticmethod(BuildIntersection)

    def getMaxValue(self) -> "PyObject *":
        """
        getMaxValue(DataArrayInt self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getMaxValue(self)


    def getMaxAbsValue(self, tupleId: 'std::size_t &') -> "PyObject *":
        """
        getMaxAbsValue(DataArrayInt self, std::size_t & tupleId) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getMaxAbsValue(self, tupleId)


    def getMinValue(self) -> "PyObject *":
        """
        getMinValue(DataArrayInt self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_getMinValue(self)


    def index(self, obj: 'PyObject *') -> "int":
        """
        index(DataArrayInt self, PyObject * obj) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayInt_index(self, obj)


    def __contains__(self, obj: 'PyObject *') -> "bool":
        """
        __contains__(DataArrayInt self, PyObject * obj) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayInt___contains__(self, obj)


    def __getitem__(self, obj: 'PyObject *') -> "PyObject *":
        """
        __getitem__(DataArrayInt self, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt___getitem__(self, obj)


    def __setitem__(self, obj: 'PyObject *', value: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        __setitem__(DataArrayInt self, PyObject * obj, PyObject * value) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt___setitem__(self, obj, value)


    def __neg__(self) -> "MEDCoupling::DataArrayInt *":
        """
        __neg__(DataArrayInt self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt___neg__(self)


    def __add__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        __add__(DataArrayInt self, PyObject * obj) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt___add__(self, obj)


    def __radd__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        __radd__(DataArrayInt self, PyObject * obj) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt___radd__(self, obj)


    def ___iadd___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___iadd___(DataArrayInt self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt____iadd___(self, trueSelf, obj)


    def __sub__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        __sub__(DataArrayInt self, PyObject * obj) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt___sub__(self, obj)


    def __rsub__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        __rsub__(DataArrayInt self, PyObject * obj) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt___rsub__(self, obj)


    def ___isub___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___isub___(DataArrayInt self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt____isub___(self, trueSelf, obj)


    def __mul__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        __mul__(DataArrayInt self, PyObject * obj) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt___mul__(self, obj)


    def __rmul__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        __rmul__(DataArrayInt self, PyObject * obj) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt___rmul__(self, obj)


    def ___imul___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___imul___(DataArrayInt self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt____imul___(self, trueSelf, obj)


    def __div__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        __div__(DataArrayInt self, PyObject * obj) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt___div__(self, obj)


    def __rdiv__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        __rdiv__(DataArrayInt self, PyObject * obj) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt___rdiv__(self, obj)


    def ___idiv___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___idiv___(DataArrayInt self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt____idiv___(self, trueSelf, obj)


    def __mod__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        __mod__(DataArrayInt self, PyObject * obj) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt___mod__(self, obj)


    def __rmod__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        __rmod__(DataArrayInt self, PyObject * obj) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt___rmod__(self, obj)


    def ___imod___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___imod___(DataArrayInt self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt____imod___(self, trueSelf, obj)


    def __pow__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        __pow__(DataArrayInt self, PyObject * obj) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt___pow__(self, obj)


    def __rpow__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        __rpow__(DataArrayInt self, PyObject * obj) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayInt___rpow__(self, obj)


    def ___ipow___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___ipow___(DataArrayInt self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt____ipow___(self, trueSelf, obj)


    def __repr__(self) -> "std::string":
        """
        __repr__(DataArrayInt self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayInt___repr__(self)


    def pushBackValsSilent(self, li: 'PyObject *') -> "void":
        """
        pushBackValsSilent(DataArrayInt self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_pushBackValsSilent(self, li)


    def partitionByDifferentValues(self) -> "PyObject *":
        """
        partitionByDifferentValues(DataArrayInt self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_partitionByDifferentValues(self)


    def findIdsRangesInListOfIds(self, listOfIds: 'DataArrayInt') -> "PyObject *":
        """
        findIdsRangesInListOfIds(DataArrayInt self, DataArrayInt listOfIds) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_findIdsRangesInListOfIds(self, listOfIds)


    def isRange(self) -> "PyObject *":
        """
        isRange(DataArrayInt self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_isRange(self)


    def RemoveIdsFromIndexedArrays(li: 'PyObject *', arr: 'DataArrayInt', arrIndx: 'DataArrayInt', offsetForRemoval: 'int'=0) -> "bool":
        """
        RemoveIdsFromIndexedArrays(PyObject * li, DataArrayInt arr, DataArrayInt arrIndx, int offsetForRemoval=0) -> bool
        RemoveIdsFromIndexedArrays(PyObject * li, DataArrayInt arr, DataArrayInt arrIndx) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayInt_RemoveIdsFromIndexedArrays(li, arr, arrIndx, offsetForRemoval)

    RemoveIdsFromIndexedArrays = staticmethod(RemoveIdsFromIndexedArrays)

    def ExtractFromIndexedArrays(li: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt') -> "PyObject *":
        """
        ExtractFromIndexedArrays(PyObject * li, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_ExtractFromIndexedArrays(li, arrIn, arrIndxIn)

    ExtractFromIndexedArrays = staticmethod(ExtractFromIndexedArrays)

    def ExtractFromIndexedArraysSlice(*args) -> "PyObject *":
        """
        ExtractFromIndexedArraysSlice(int strt, int stp, int step, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject
        ExtractFromIndexedArraysSlice(PyObject * slic, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_ExtractFromIndexedArraysSlice(*args)

    ExtractFromIndexedArraysSlice = staticmethod(ExtractFromIndexedArraysSlice)

    def SetPartOfIndexedArrays(li: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt', srcArr: 'DataArrayInt', srcArrIndex: 'DataArrayInt') -> "PyObject *":
        """
        SetPartOfIndexedArrays(PyObject * li, DataArrayInt arrIn, DataArrayInt arrIndxIn, DataArrayInt srcArr, DataArrayInt srcArrIndex) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayInt_SetPartOfIndexedArrays(li, arrIn, arrIndxIn, srcArr, srcArrIndex)

    SetPartOfIndexedArrays = staticmethod(SetPartOfIndexedArrays)

    def SetPartOfIndexedArraysSameIdx(li: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt', srcArr: 'DataArrayInt', srcArrIndex: 'DataArrayInt') -> "void":
        """
        SetPartOfIndexedArraysSameIdx(PyObject * li, DataArrayInt arrIn, DataArrayInt arrIndxIn, DataArrayInt srcArr, DataArrayInt srcArrIndex)

        1
        """
        return _MEDCouplingCompat.DataArrayInt_SetPartOfIndexedArraysSameIdx(li, arrIn, arrIndxIn, srcArr, srcArrIndex)

    SetPartOfIndexedArraysSameIdx = staticmethod(SetPartOfIndexedArraysSameIdx)
    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayInt
    __del__ = lambda self: None
DataArrayInt_swigregister = _MEDCouplingCompat.DataArrayInt_swigregister
DataArrayInt_swigregister(DataArrayInt)

def DataArrayInt_FindPermutationFromFirstToSecond(ids1: 'DataArrayInt', ids2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    """
    DataArrayInt_FindPermutationFromFirstToSecond(DataArrayInt ids1, DataArrayInt ids2) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_FindPermutationFromFirstToSecond(ids1, ids2)

def DataArrayInt_Add(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    """
    DataArrayInt_Add(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_Add(a1, a2)

def DataArrayInt_Substract(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    """
    DataArrayInt_Substract(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_Substract(a1, a2)

def DataArrayInt_Multiply(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    """
    DataArrayInt_Multiply(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_Multiply(a1, a2)

def DataArrayInt_Divide(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    """
    DataArrayInt_Divide(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_Divide(a1, a2)

def DataArrayInt_Modulus(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    """
    DataArrayInt_Modulus(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_Modulus(a1, a2)

def DataArrayInt_Pow(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    """
    DataArrayInt_Pow(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_Pow(a1, a2)

def DataArrayInt_Range(begin: 'int', end: 'int', step: 'int') -> "MEDCoupling::DataArrayInt *":
    """
    DataArrayInt_Range(int begin, int end, int step) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_Range(begin, end, step)

def DataArrayInt_New(*args) -> "MEDCoupling::DataArrayInt *":
    """
    New() -> DataArrayInt
    New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayInt
    New(PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayInt
    DataArrayInt_New(PyObject * elt0) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_New(*args)

def DataArrayInt_ConvertIndexArrayToO2N(nbOfOldTuples: 'int', arr: 'PyObject *', arrI: 'PyObject *') -> "PyObject *":
    """
    DataArrayInt_ConvertIndexArrayToO2N(int nbOfOldTuples, PyObject * arr, PyObject * arrI) -> PyObject *

    1
    """
    return _MEDCouplingCompat.DataArrayInt_ConvertIndexArrayToO2N(nbOfOldTuples, arr, arrI)

def DataArrayInt_CheckAndPreparePermutation(arr: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
    """
    DataArrayInt_CheckAndPreparePermutation(PyObject * arr) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_CheckAndPreparePermutation(arr)

def DataArrayInt_MakePartition(*args) -> "PyObject *":
    """
    MakePartition(std::vector< MEDCoupling::DataArrayInt const *,std::allocator< MEDCoupling::DataArrayInt const * > > const & groups, int newNb, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > & fidsOfGroups) -> DataArrayInt
    DataArrayInt_MakePartition(PyObject * gps, int newNb) -> PyObject *

    1
    """
    return _MEDCouplingCompat.DataArrayInt_MakePartition(*args)

def DataArrayInt_Meld(*args) -> "MEDCoupling::DataArrayInt *":
    """
    Meld(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
    DataArrayInt_Meld(PyObject * li) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_Meld(*args)

def DataArrayInt_Aggregate(*args) -> "MEDCoupling::DataArrayInt *":
    """
    Aggregate(DataArrayInt a1, DataArrayInt a2, int offsetA2) -> DataArrayInt
    DataArrayInt_Aggregate(PyObject * li) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_Aggregate(*args)

def DataArrayInt_AggregateIndexes(li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
    """
    DataArrayInt_AggregateIndexes(PyObject * li) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_AggregateIndexes(li)

def DataArrayInt_BuildUnion(*args) -> "MEDCoupling::DataArrayInt *":
    """
    BuildUnion(std::vector< MEDCoupling::DataArrayInt const *,std::allocator< MEDCoupling::DataArrayInt const * > > const & arr) -> DataArrayInt
    DataArrayInt_BuildUnion(PyObject * li) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_BuildUnion(*args)

def DataArrayInt_BuildIntersection(*args) -> "MEDCoupling::DataArrayInt *":
    """
    BuildIntersection(std::vector< MEDCoupling::DataArrayInt const *,std::allocator< MEDCoupling::DataArrayInt const * > > const & arr) -> DataArrayInt
    DataArrayInt_BuildIntersection(PyObject * li) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.DataArrayInt_BuildIntersection(*args)

def DataArrayInt_RemoveIdsFromIndexedArrays(li: 'PyObject *', arr: 'DataArrayInt', arrIndx: 'DataArrayInt', offsetForRemoval: 'int'=0) -> "bool":
    """
    RemoveIdsFromIndexedArrays(PyObject * li, DataArrayInt arr, DataArrayInt arrIndx, int offsetForRemoval=0) -> bool
    DataArrayInt_RemoveIdsFromIndexedArrays(PyObject * li, DataArrayInt arr, DataArrayInt arrIndx) -> bool

    1
    """
    return _MEDCouplingCompat.DataArrayInt_RemoveIdsFromIndexedArrays(li, arr, arrIndx, offsetForRemoval)

def DataArrayInt_ExtractFromIndexedArrays(li: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt') -> "PyObject *":
    """
    DataArrayInt_ExtractFromIndexedArrays(PyObject * li, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject *

    1
    """
    return _MEDCouplingCompat.DataArrayInt_ExtractFromIndexedArrays(li, arrIn, arrIndxIn)

def DataArrayInt_ExtractFromIndexedArraysSlice(*args) -> "PyObject *":
    """
    ExtractFromIndexedArraysSlice(int strt, int stp, int step, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject
    DataArrayInt_ExtractFromIndexedArraysSlice(PyObject * slic, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject *

    1
    """
    return _MEDCouplingCompat.DataArrayInt_ExtractFromIndexedArraysSlice(*args)

def DataArrayInt_SetPartOfIndexedArrays(li: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt', srcArr: 'DataArrayInt', srcArrIndex: 'DataArrayInt') -> "PyObject *":
    """
    DataArrayInt_SetPartOfIndexedArrays(PyObject * li, DataArrayInt arrIn, DataArrayInt arrIndxIn, DataArrayInt srcArr, DataArrayInt srcArrIndex) -> PyObject *

    1
    """
    return _MEDCouplingCompat.DataArrayInt_SetPartOfIndexedArrays(li, arrIn, arrIndxIn, srcArr, srcArrIndex)

def DataArrayInt_SetPartOfIndexedArraysSameIdx(li: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt', srcArr: 'DataArrayInt', srcArrIndex: 'DataArrayInt') -> "void":
    """
    DataArrayInt_SetPartOfIndexedArraysSameIdx(PyObject * li, DataArrayInt arrIn, DataArrayInt arrIndxIn, DataArrayInt srcArr, DataArrayInt srcArrIndex)

    1
    """
    return _MEDCouplingCompat.DataArrayInt_SetPartOfIndexedArraysSameIdx(li, arrIn, arrIndxIn, srcArr, srcArrIndex)

class DataArrayIntIterator(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayIntIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayIntIterator, name)
    __repr__ = _swig_repr

    def __init__(self, da: 'DataArrayInt'):
        """
        __init__(MEDCoupling::DataArrayIntIterator self, DataArrayInt da) -> DataArrayIntIterator

        1
        """
        this = _MEDCouplingCompat.new_DataArrayIntIterator(da)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayIntIterator
    __del__ = lambda self: None

    def next(self) -> "PyObject *":
        """
        next(DataArrayIntIterator self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayIntIterator_next(self)

DataArrayIntIterator_swigregister = _MEDCouplingCompat.DataArrayIntIterator_swigregister
DataArrayIntIterator_swigregister(DataArrayIntIterator)

class DataArrayIntTuple(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayIntTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayIntTuple, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCompo(self) -> "int":
        """
        getNumberOfCompo(DataArrayIntTuple self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayIntTuple_getNumberOfCompo(self)


    def __str__(self) -> "std::string":
        """
        __str__(DataArrayIntTuple self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayIntTuple___str__(self)


    def __int__(self) -> "int":
        """
        __int__(DataArrayIntTuple self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayIntTuple___int__(self)


    def buildDAInt(self, *args) -> "MEDCoupling::DataArrayInt *":
        """
        buildDAInt(DataArrayIntTuple self, int nbOfTuples, int nbOfCompo) -> DataArrayInt
        buildDAInt(DataArrayIntTuple self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayIntTuple_buildDAInt(self, *args)


    def ___iadd___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___iadd___(DataArrayIntTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayIntTuple____iadd___(self, trueSelf, obj)


    def ___isub___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___isub___(DataArrayIntTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayIntTuple____isub___(self, trueSelf, obj)


    def ___imul___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___imul___(DataArrayIntTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayIntTuple____imul___(self, trueSelf, obj)


    def ___idiv___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___idiv___(DataArrayIntTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayIntTuple____idiv___(self, trueSelf, obj)


    def ___imod___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___imod___(DataArrayIntTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayIntTuple____imod___(self, trueSelf, obj)


    def __len__(self) -> "PyObject *":
        """
        __len__(DataArrayIntTuple self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayIntTuple___len__(self)


    def __getitem__(self, obj: 'PyObject *') -> "PyObject *":
        """
        __getitem__(DataArrayIntTuple self, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayIntTuple___getitem__(self, obj)


    def __setitem__(self, obj: 'PyObject *', value: 'PyObject *') -> "MEDCoupling::DataArrayIntTuple *":
        """
        __setitem__(DataArrayIntTuple self, PyObject * obj, PyObject * value) -> DataArrayIntTuple

        1
        """
        return _MEDCouplingCompat.DataArrayIntTuple___setitem__(self, obj, value)

    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayIntTuple
    __del__ = lambda self: None
DataArrayIntTuple_swigregister = _MEDCouplingCompat.DataArrayIntTuple_swigregister
DataArrayIntTuple_swigregister(DataArrayIntTuple)

class DataArrayChar(DataArray):
    """1"""

    __swig_setmethods__ = {}
    for _s in [DataArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayChar, name, value)
    __swig_getmethods__ = {}
    for _s in [DataArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayChar, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def buildEmptySpecializedDAChar(self) -> "MEDCoupling::DataArrayChar *":
        """
        buildEmptySpecializedDAChar(DataArrayChar self) -> DataArrayChar

        1
        """
        return _MEDCouplingCompat.DataArrayChar_buildEmptySpecializedDAChar(self)


    def getHashCode(self) -> "int":
        """
        getHashCode(DataArrayChar self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayChar_getHashCode(self)


    def empty(self) -> "bool":
        """
        empty(DataArrayChar self) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayChar_empty(self)


    def deepCopyFrom(self, other: 'DataArrayChar') -> "void":
        """
        deepCopyFrom(DataArrayChar self, DataArrayChar other)

        1
        """
        return _MEDCouplingCompat.DataArrayChar_deepCopyFrom(self, other)


    def reserve(self, nbOfElems: 'std::size_t') -> "void":
        """
        reserve(DataArrayChar self, std::size_t nbOfElems)

        1
        """
        return _MEDCouplingCompat.DataArrayChar_reserve(self, nbOfElems)


    def pushBackSilent(self, val: 'char') -> "void":
        """
        pushBackSilent(DataArrayChar self, char val)

        1
        """
        return _MEDCouplingCompat.DataArrayChar_pushBackSilent(self, val)


    def popBackSilent(self) -> "char":
        """
        popBackSilent(DataArrayChar self) -> char

        1
        """
        return _MEDCouplingCompat.DataArrayChar_popBackSilent(self)


    def pack(self) -> "void":
        """
        pack(DataArrayChar self)

        1
        """
        return _MEDCouplingCompat.DataArrayChar_pack(self)


    def allocIfNecessary(self, nbOfTuple: 'int', nbOfCompo: 'int') -> "void":
        """
        allocIfNecessary(DataArrayChar self, int nbOfTuple, int nbOfCompo)

        1
        """
        return _MEDCouplingCompat.DataArrayChar_allocIfNecessary(self, nbOfTuple, nbOfCompo)


    def isEqual(self, other: 'DataArrayChar') -> "bool":
        """
        isEqual(DataArrayChar self, DataArrayChar other) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayChar_isEqual(self, other)


    def isEqualWithoutConsideringStr(self, other: 'DataArrayChar') -> "bool":
        """
        isEqualWithoutConsideringStr(DataArrayChar self, DataArrayChar other) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayChar_isEqualWithoutConsideringStr(self, other)


    def reverse(self) -> "void":
        """
        reverse(DataArrayChar self)

        1
        """
        return _MEDCouplingCompat.DataArrayChar_reverse(self)


    def fillWithZero(self) -> "void":
        """
        fillWithZero(DataArrayChar self)

        1
        """
        return _MEDCouplingCompat.DataArrayChar_fillWithZero(self)


    def fillWithValue(self, val: 'char') -> "void":
        """
        fillWithValue(DataArrayChar self, char val)

        1
        """
        return _MEDCouplingCompat.DataArrayChar_fillWithValue(self, val)


    def repr(self) -> "std::string":
        """
        repr(DataArrayChar self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayChar_repr(self)


    def reprZip(self) -> "std::string":
        """
        reprZip(DataArrayChar self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayChar_reprZip(self)


    def convertToIntArr(self) -> "MEDCoupling::DataArrayInt *":
        """
        convertToIntArr(DataArrayChar self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayChar_convertToIntArr(self)


    def isUniform(self, val: 'char') -> "bool":
        """
        isUniform(DataArrayChar self, char val) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayChar_isUniform(self, val)


    def sort(self, asc: 'bool'=True) -> "void":
        """
        sort(DataArrayChar self, bool asc=True)
        sort(DataArrayChar self)

        1
        """
        return _MEDCouplingCompat.DataArrayChar_sort(self, asc)


    def subArray(self, tupleIdBg: 'int', tupleIdEnd: 'int'=-1) -> "MEDCoupling::DataArrayChar *":
        """
        subArray(DataArrayChar self, int tupleIdBg, int tupleIdEnd=-1) -> DataArrayChar
        subArray(DataArrayChar self, int tupleIdBg) -> DataArrayChar

        1
        """
        return _MEDCouplingCompat.DataArrayChar_subArray(self, tupleIdBg, tupleIdEnd)


    def changeNbOfComponents(self, newNbOfComp: 'int', dftValue: 'char') -> "MEDCoupling::DataArrayChar *":
        """
        changeNbOfComponents(DataArrayChar self, int newNbOfComp, char dftValue) -> DataArrayChar

        1
        """
        return _MEDCouplingCompat.DataArrayChar_changeNbOfComponents(self, newNbOfComp, dftValue)


    def meldWith(self, other: 'DataArrayChar') -> "void":
        """
        meldWith(DataArrayChar self, DataArrayChar other)

        1
        """
        return _MEDCouplingCompat.DataArrayChar_meldWith(self, other)


    def setPartOfValuesAdv(self, a: 'DataArrayChar', tuplesSelec: 'DataArrayInt') -> "void":
        """
        setPartOfValuesAdv(DataArrayChar self, DataArrayChar a, DataArrayInt tuplesSelec)

        1
        """
        return _MEDCouplingCompat.DataArrayChar_setPartOfValuesAdv(self, a, tuplesSelec)


    def front(self) -> "char":
        """
        front(DataArrayChar self) -> char

        1
        """
        return _MEDCouplingCompat.DataArrayChar_front(self)


    def back(self) -> "char":
        """
        back(DataArrayChar self) -> char

        1
        """
        return _MEDCouplingCompat.DataArrayChar_back(self)


    def setIJ(self, tupleId: 'int', compoId: 'int', newVal: 'char') -> "void":
        """
        setIJ(DataArrayChar self, int tupleId, int compoId, char newVal)

        1
        """
        return _MEDCouplingCompat.DataArrayChar_setIJ(self, tupleId, compoId, newVal)


    def setIJSilent(self, tupleId: 'int', compoId: 'int', newVal: 'char') -> "void":
        """
        setIJSilent(DataArrayChar self, int tupleId, int compoId, char newVal)

        1
        """
        return _MEDCouplingCompat.DataArrayChar_setIJSilent(self, tupleId, compoId, newVal)


    def getPointer(self) -> "char *":
        """
        getPointer(DataArrayChar self) -> char *

        1
        """
        return _MEDCouplingCompat.DataArrayChar_getPointer(self)


    def findIdsEqual(self, val: 'char') -> "MEDCoupling::DataArrayInt *":
        """
        findIdsEqual(DataArrayChar self, char val) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayChar_findIdsEqual(self, val)


    def findIdsNotEqual(self, val: 'char') -> "MEDCoupling::DataArrayInt *":
        """
        findIdsNotEqual(DataArrayChar self, char val) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayChar_findIdsNotEqual(self, val)


    def findIdFirstEqualTuple(self, tupl: 'std::vector< char,std::allocator< char > > const &') -> "int":
        """
        findIdFirstEqualTuple(DataArrayChar self, std::vector< char,std::allocator< char > > const & tupl) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayChar_findIdFirstEqualTuple(self, tupl)


    def presenceOfTuple(self, tupl: 'std::vector< char,std::allocator< char > > const &') -> "bool":
        """
        presenceOfTuple(DataArrayChar self, std::vector< char,std::allocator< char > > const & tupl) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayChar_presenceOfTuple(self, tupl)


    def getMaxValue(self, tupleId: 'int &') -> "char":
        """
        getMaxValue(DataArrayChar self, int & tupleId) -> char

        1
        """
        return _MEDCouplingCompat.DataArrayChar_getMaxValue(self, tupleId)


    def getMaxValueInArray(self) -> "char":
        """
        getMaxValueInArray(DataArrayChar self) -> char

        1
        """
        return _MEDCouplingCompat.DataArrayChar_getMaxValueInArray(self)


    def getMinValue(self, tupleId: 'int &') -> "char":
        """
        getMinValue(DataArrayChar self, int & tupleId) -> char

        1
        """
        return _MEDCouplingCompat.DataArrayChar_getMinValue(self, tupleId)


    def getMinValueInArray(self) -> "char":
        """
        getMinValueInArray(DataArrayChar self) -> char

        1
        """
        return _MEDCouplingCompat.DataArrayChar_getMinValueInArray(self)


    def findIdsInRange(self, vmin: 'char', vmax: 'char') -> "MEDCoupling::DataArrayInt *":
        """
        findIdsInRange(DataArrayChar self, char vmin, char vmax) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.DataArrayChar_findIdsInRange(self, vmin, vmax)


    def __len__(self) -> "int":
        """
        __len__(DataArrayChar self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayChar___len__(self)


    def isEqualIfNotWhy(self, other: 'DataArrayChar') -> "PyObject *":
        """
        isEqualIfNotWhy(DataArrayChar self, DataArrayChar other) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayChar_isEqualIfNotWhy(self, other)


    def renumber(self, *args) -> "MEDCoupling::DataArrayChar *":
        """
        renumber(DataArrayChar self, int const * old2New) -> DataArrayChar
        renumber(DataArrayChar self, PyObject * li) -> DataArrayChar

        1
        """
        return _MEDCouplingCompat.DataArrayChar_renumber(self, *args)


    def renumberR(self, *args) -> "MEDCoupling::DataArrayChar *":
        """
        renumberR(DataArrayChar self, int const * new2Old) -> DataArrayChar
        renumberR(DataArrayChar self, PyObject * li) -> DataArrayChar

        1
        """
        return _MEDCouplingCompat.DataArrayChar_renumberR(self, *args)


    def renumberAndReduce(self, *args) -> "MEDCoupling::DataArrayChar *":
        """
        renumberAndReduce(DataArrayChar self, int const * old2NewBg, int newNbOfTuple) -> DataArrayChar
        renumberAndReduce(DataArrayChar self, PyObject * li, int newNbOfTuple) -> DataArrayChar

        1
        """
        return _MEDCouplingCompat.DataArrayChar_renumberAndReduce(self, *args)


    def Aggregate(*args) -> "MEDCoupling::DataArrayChar *":
        """
        Aggregate(DataArrayChar a1, DataArrayChar a2) -> DataArrayChar
        Aggregate(PyObject * dachs) -> DataArrayChar

        1
        """
        return _MEDCouplingCompat.DataArrayChar_Aggregate(*args)

    Aggregate = staticmethod(Aggregate)

    def Meld(*args) -> "MEDCoupling::DataArrayChar *":
        """
        Meld(DataArrayChar a1, DataArrayChar a2) -> DataArrayChar
        Meld(PyObject * dachs) -> DataArrayChar

        1
        """
        return _MEDCouplingCompat.DataArrayChar_Meld(*args)

    Meld = staticmethod(Meld)
    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayChar
    __del__ = lambda self: None
DataArrayChar_swigregister = _MEDCouplingCompat.DataArrayChar_swigregister
DataArrayChar_swigregister(DataArrayChar)

def DataArrayChar_Aggregate(*args) -> "MEDCoupling::DataArrayChar *":
    """
    Aggregate(DataArrayChar a1, DataArrayChar a2) -> DataArrayChar
    DataArrayChar_Aggregate(PyObject * dachs) -> DataArrayChar

    1
    """
    return _MEDCouplingCompat.DataArrayChar_Aggregate(*args)

def DataArrayChar_Meld(*args) -> "MEDCoupling::DataArrayChar *":
    """
    Meld(DataArrayChar a1, DataArrayChar a2) -> DataArrayChar
    DataArrayChar_Meld(PyObject * dachs) -> DataArrayChar

    1
    """
    return _MEDCouplingCompat.DataArrayChar_Meld(*args)

class DataArrayByte(DataArrayChar):
    """1"""

    __swig_setmethods__ = {}
    for _s in [DataArrayChar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayByte, name, value)
    __swig_getmethods__ = {}
    for _s in [DataArrayChar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayByte, name)

    def iterator(self) -> "MEDCoupling::DataArrayByteIterator *":
        """
        iterator(DataArrayByte self) -> DataArrayByteIterator

        1
        """
        return _MEDCouplingCompat.DataArrayByte_iterator(self)


    def performCopyOrIncrRef(self, deepCopy: 'bool') -> "MEDCoupling::DataArrayByte *":
        """
        performCopyOrIncrRef(DataArrayByte self, bool deepCopy) -> DataArrayByte

        1
        """
        return _MEDCouplingCompat.DataArrayByte_performCopyOrIncrRef(self, deepCopy)


    def byteValue(self) -> "char":
        """
        byteValue(DataArrayByte self) -> char

        1
        """
        return _MEDCouplingCompat.DataArrayByte_byteValue(self)


    def New(*args) -> "MEDCoupling::DataArrayByte *":
        """
        New() -> DataArrayByte
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayByte
        New(PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayByte
        New(PyObject * elt0) -> DataArrayByte

        1
        """
        return _MEDCouplingCompat.DataArrayByte_New(*args)

    New = staticmethod(New)

    def __init__(self, *args):
        """
        __init__(MEDCoupling::DataArrayByte self) -> DataArrayByte
        __init__(MEDCoupling::DataArrayByte self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayByte
        __init__(MEDCoupling::DataArrayByte self, PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayByte
        __init__(MEDCoupling::DataArrayByte self, PyObject * elt0) -> DataArrayByte

        1
        """
        this = _MEDCouplingCompat.new_DataArrayByte(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __repr__(self) -> "std::string":
        """
        __repr__(DataArrayByte self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayByte___repr__(self)


    def __int__(self) -> "int":
        """
        __int__(DataArrayByte self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayByte___int__(self)


    def __iter__(self) -> "MEDCoupling::DataArrayByteIterator *":
        """
        __iter__(DataArrayByte self) -> DataArrayByteIterator

        1
        """
        return _MEDCouplingCompat.DataArrayByte___iter__(self)


    def getIJ(self, tupleId: 'int', compoId: 'int') -> "int":
        """
        getIJ(DataArrayByte self, int tupleId, int compoId) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayByte_getIJ(self, tupleId, compoId)


    def getIJSafe(self, tupleId: 'int', compoId: 'int') -> "int":
        """
        getIJSafe(DataArrayByte self, int tupleId, int compoId) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayByte_getIJSafe(self, tupleId, compoId)


    def __str__(self) -> "std::string":
        """
        __str__(DataArrayByte self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayByte___str__(self)


    def toStrList(self) -> "PyObject *":
        """
        toStrList(DataArrayByte self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayByte_toStrList(self)


    def presenceOfTuple(self, tupl: 'PyObject *') -> "bool":
        """
        presenceOfTuple(DataArrayByte self, PyObject * tupl) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayByte_presenceOfTuple(self, tupl)


    def presenceOfValue(self, vals: 'PyObject *') -> "bool":
        """
        presenceOfValue(DataArrayByte self, PyObject * vals) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayByte_presenceOfValue(self, vals)


    def findIdFirstEqual(self, vals: 'PyObject *') -> "int":
        """
        findIdFirstEqual(DataArrayByte self, PyObject * vals) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayByte_findIdFirstEqual(self, vals)


    def findIdFirstEqualTuple(self, tupl: 'PyObject *') -> "int":
        """
        findIdFirstEqualTuple(DataArrayByte self, PyObject * tupl) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayByte_findIdFirstEqualTuple(self, tupl)


    def findIdSequence(self, strOrListOfInt: 'PyObject *') -> "int":
        """
        findIdSequence(DataArrayByte self, PyObject * strOrListOfInt) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayByte_findIdSequence(self, strOrListOfInt)


    def getTuple(self, tupleId: 'int') -> "PyObject *":
        """
        getTuple(DataArrayByte self, int tupleId) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayByte_getTuple(self, tupleId)


    def getMaxValue(self) -> "PyObject *":
        """
        getMaxValue(DataArrayByte self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayByte_getMaxValue(self)


    def getMinValue(self) -> "PyObject *":
        """
        getMinValue(DataArrayByte self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayByte_getMinValue(self)


    def index(self, obj: 'PyObject *') -> "int":
        """
        index(DataArrayByte self, PyObject * obj) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayByte_index(self, obj)


    def __contains__(self, obj: 'PyObject *') -> "bool":
        """
        __contains__(DataArrayByte self, PyObject * obj) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayByte___contains__(self, obj)


    def toNumPyArray(self) -> "PyObject *":
        """
        toNumPyArray(DataArrayByte self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayByte_toNumPyArray(self)


    def __setitem__(self, obj: 'PyObject *', value: 'PyObject *') -> "MEDCoupling::DataArrayByte *":
        """
        __setitem__(DataArrayByte self, PyObject * obj, PyObject * value) -> DataArrayByte

        1
        """
        return _MEDCouplingCompat.DataArrayByte___setitem__(self, obj, value)

    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayByte
    __del__ = lambda self: None
DataArrayByte_swigregister = _MEDCouplingCompat.DataArrayByte_swigregister
DataArrayByte_swigregister(DataArrayByte)

def DataArrayByte_New(*args) -> "MEDCoupling::DataArrayByte *":
    """
    New() -> DataArrayByte
    New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayByte
    New(PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayByte
    DataArrayByte_New(PyObject * elt0) -> DataArrayByte

    1
    """
    return _MEDCouplingCompat.DataArrayByte_New(*args)

class DataArrayByteIterator(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayByteIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayByteIterator, name)
    __repr__ = _swig_repr

    def __init__(self, da: 'DataArrayByte'):
        """
        __init__(MEDCoupling::DataArrayByteIterator self, DataArrayByte da) -> DataArrayByteIterator

        1
        """
        this = _MEDCouplingCompat.new_DataArrayByteIterator(da)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayByteIterator
    __del__ = lambda self: None
DataArrayByteIterator_swigregister = _MEDCouplingCompat.DataArrayByteIterator_swigregister
DataArrayByteIterator_swigregister(DataArrayByteIterator)

class DataArrayByteTuple(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayByteTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayByteTuple, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def repr(self) -> "std::string":
        """
        repr(DataArrayByteTuple self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayByteTuple_repr(self)


    def __str__(self) -> "std::string":
        """
        __str__(DataArrayByteTuple self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayByteTuple___str__(self)


    def __int__(self) -> "char":
        """
        __int__(DataArrayByteTuple self) -> char

        1
        """
        return _MEDCouplingCompat.DataArrayByteTuple___int__(self)


    def buildDAByte(self, *args) -> "MEDCoupling::DataArrayByte *":
        """
        buildDAByte(DataArrayByteTuple self, int nbOfTuples, int nbOfCompo) -> DataArrayByte
        buildDAByte(DataArrayByteTuple self) -> DataArrayByte

        1
        """
        return _MEDCouplingCompat.DataArrayByteTuple_buildDAByte(self, *args)

    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayByteTuple
    __del__ = lambda self: None
DataArrayByteTuple_swigregister = _MEDCouplingCompat.DataArrayByteTuple_swigregister
DataArrayByteTuple_swigregister(DataArrayByteTuple)

class DataArrayAsciiChar(DataArrayChar):
    """1"""

    __swig_setmethods__ = {}
    for _s in [DataArrayChar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayAsciiChar, name, value)
    __swig_getmethods__ = {}
    for _s in [DataArrayChar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayAsciiChar, name)

    def iterator(self) -> "MEDCoupling::DataArrayAsciiCharIterator *":
        """
        iterator(DataArrayAsciiChar self) -> DataArrayAsciiCharIterator

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_iterator(self)


    def performCopyOrIncrRef(self, deepCopy: 'bool') -> "MEDCoupling::DataArrayAsciiChar *":
        """
        performCopyOrIncrRef(DataArrayAsciiChar self, bool deepCopy) -> DataArrayAsciiChar

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_performCopyOrIncrRef(self, deepCopy)


    def asciiCharValue(self) -> "char":
        """
        asciiCharValue(DataArrayAsciiChar self) -> char

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_asciiCharValue(self)


    def New(*args) -> "MEDCoupling::DataArrayAsciiChar *":
        """
        New() -> DataArrayAsciiChar
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayAsciiChar
        New(PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayAsciiChar
        New(PyObject * elt0) -> DataArrayAsciiChar

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_New(*args)

    New = staticmethod(New)

    def __init__(self, *args):
        """
        __init__(MEDCoupling::DataArrayAsciiChar self) -> DataArrayAsciiChar
        __init__(MEDCoupling::DataArrayAsciiChar self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayAsciiChar
        __init__(MEDCoupling::DataArrayAsciiChar self, PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayAsciiChar
        __init__(MEDCoupling::DataArrayAsciiChar self, PyObject * elt0) -> DataArrayAsciiChar

        1
        """
        this = _MEDCouplingCompat.new_DataArrayAsciiChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __repr__(self) -> "std::string":
        """
        __repr__(DataArrayAsciiChar self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar___repr__(self)


    def __iter__(self) -> "MEDCoupling::DataArrayAsciiCharIterator *":
        """
        __iter__(DataArrayAsciiChar self) -> DataArrayAsciiCharIterator

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar___iter__(self)


    def getIJ(self, tupleId: 'int', compoId: 'int') -> "std::string":
        """
        getIJ(DataArrayAsciiChar self, int tupleId, int compoId) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_getIJ(self, tupleId, compoId)


    def getIJSafe(self, tupleId: 'int', compoId: 'int') -> "std::string":
        """
        getIJSafe(DataArrayAsciiChar self, int tupleId, int compoId) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_getIJSafe(self, tupleId, compoId)


    def __str__(self) -> "std::string":
        """
        __str__(DataArrayAsciiChar self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar___str__(self)


    def toStrList(self) -> "PyObject *":
        """
        toStrList(DataArrayAsciiChar self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_toStrList(self)


    def presenceOfTuple(self, tupl: 'PyObject *') -> "bool":
        """
        presenceOfTuple(DataArrayAsciiChar self, PyObject * tupl) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_presenceOfTuple(self, tupl)


    def presenceOfValue(self, vals: 'PyObject *') -> "bool":
        """
        presenceOfValue(DataArrayAsciiChar self, PyObject * vals) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_presenceOfValue(self, vals)


    def findIdFirstEqual(self, vals: 'PyObject *') -> "int":
        """
        findIdFirstEqual(DataArrayAsciiChar self, PyObject * vals) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_findIdFirstEqual(self, vals)


    def findIdFirstEqualTuple(self, tupl: 'PyObject *') -> "int":
        """
        findIdFirstEqualTuple(DataArrayAsciiChar self, PyObject * tupl) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_findIdFirstEqualTuple(self, tupl)


    def findIdSequence(self, strOrListOfInt: 'PyObject *') -> "int":
        """
        findIdSequence(DataArrayAsciiChar self, PyObject * strOrListOfInt) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_findIdSequence(self, strOrListOfInt)


    def getTuple(self, tupleId: 'int') -> "PyObject *":
        """
        getTuple(DataArrayAsciiChar self, int tupleId) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_getTuple(self, tupleId)


    def getMaxValue(self) -> "PyObject *":
        """
        getMaxValue(DataArrayAsciiChar self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_getMaxValue(self)


    def getMinValue(self) -> "PyObject *":
        """
        getMinValue(DataArrayAsciiChar self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_getMinValue(self)


    def index(self, obj: 'PyObject *') -> "int":
        """
        index(DataArrayAsciiChar self, PyObject * obj) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar_index(self, obj)


    def __contains__(self, obj: 'PyObject *') -> "bool":
        """
        __contains__(DataArrayAsciiChar self, PyObject * obj) -> bool

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar___contains__(self, obj)


    def __getitem__(self, obj: 'PyObject *') -> "PyObject *":
        """
        __getitem__(DataArrayAsciiChar self, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar___getitem__(self, obj)


    def __setitem__(self, obj: 'PyObject *', value: 'PyObject *') -> "MEDCoupling::DataArrayAsciiChar *":
        """
        __setitem__(DataArrayAsciiChar self, PyObject * obj, PyObject * value) -> DataArrayAsciiChar

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiChar___setitem__(self, obj, value)

    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayAsciiChar
    __del__ = lambda self: None
DataArrayAsciiChar_swigregister = _MEDCouplingCompat.DataArrayAsciiChar_swigregister
DataArrayAsciiChar_swigregister(DataArrayAsciiChar)

def DataArrayAsciiChar_New(*args) -> "MEDCoupling::DataArrayAsciiChar *":
    """
    New() -> DataArrayAsciiChar
    New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayAsciiChar
    New(PyObject * elt0, PyObject * nbOfTuples=None) -> DataArrayAsciiChar
    DataArrayAsciiChar_New(PyObject * elt0) -> DataArrayAsciiChar

    1
    """
    return _MEDCouplingCompat.DataArrayAsciiChar_New(*args)

class DataArrayAsciiCharIterator(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayAsciiCharIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayAsciiCharIterator, name)
    __repr__ = _swig_repr

    def __init__(self, da: 'DataArrayAsciiChar'):
        """
        __init__(MEDCoupling::DataArrayAsciiCharIterator self, DataArrayAsciiChar da) -> DataArrayAsciiCharIterator

        1
        """
        this = _MEDCouplingCompat.new_DataArrayAsciiCharIterator(da)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayAsciiCharIterator
    __del__ = lambda self: None

    def next(self) -> "PyObject *":
        """
        next(DataArrayAsciiCharIterator self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiCharIterator_next(self)

DataArrayAsciiCharIterator_swigregister = _MEDCouplingCompat.DataArrayAsciiCharIterator_swigregister
DataArrayAsciiCharIterator_swigregister(DataArrayAsciiCharIterator)

class DataArrayAsciiCharTuple(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataArrayAsciiCharTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataArrayAsciiCharTuple, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCompo(self) -> "int":
        """
        getNumberOfCompo(DataArrayAsciiCharTuple self) -> int

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiCharTuple_getNumberOfCompo(self)


    def __str__(self) -> "std::string":
        """
        __str__(DataArrayAsciiCharTuple self) -> std::string

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiCharTuple___str__(self)


    def buildDAAsciiChar(self, *args) -> "MEDCoupling::DataArrayAsciiChar *":
        """
        buildDAAsciiChar(DataArrayAsciiCharTuple self, int nbOfTuples, int nbOfCompo) -> DataArrayAsciiChar
        buildDAAsciiChar(DataArrayAsciiCharTuple self) -> DataArrayAsciiChar

        1
        """
        return _MEDCouplingCompat.DataArrayAsciiCharTuple_buildDAAsciiChar(self, *args)

    __swig_destroy__ = _MEDCouplingCompat.delete_DataArrayAsciiCharTuple
    __del__ = lambda self: None
DataArrayAsciiCharTuple_swigregister = _MEDCouplingCompat.DataArrayAsciiCharTuple_swigregister
DataArrayAsciiCharTuple_swigregister(DataArrayAsciiCharTuple)


def MEDCouplingStdReduceFunct(cls,params):
    a,b=params
    ret=object.__new__(cls)
    ret.__init__(*a)
    ret.__setstate__(b)
    return ret

def MEDCouplingDataArrayDoubleReduce(self):
    if not MEDCouplingHasNumPyBindings():
      raise InterpKernelException("PyWrap of DataArrayDouble.__reduce__ : not implemented because numpy is not active in your configuration ! No serialization/unserialization available without numpy !")
    return MEDCouplingStdReduceFunct,(DataArrayDouble,((self.toNumPyArray(),),(self.__getstate__()),))

def MEDCouplingDataArrayIntReduce(self):
    if not MEDCouplingHasNumPyBindings():
      raise InterpKernelException("PyWrap of DataArrayInt.__reduce__ : not implemented because numpy is not active in your configuration ! No serialization/unserialization available without numpy !")
    return MEDCouplingStdReduceFunct,(DataArrayInt,((self.toNumPyArray(),),(self.__getstate__()),))

def MEDCouplingDataArrayByteReduce(self):
    if not MEDCouplingHasNumPyBindings():
      raise InterpKernelException("PyWrap of DataArrayByte.__reduce__ : not implemented because numpy is not active in your configuration ! No serialization/unserialization available without numpy !")
    return MEDCouplingStdReduceFunct,(DataArrayByte,((self.toNumPyArray(),),(self.__getstate__()),))

def MEDCouplingDataArrayFloatReduce(self):
    if not MEDCouplingHasNumPyBindings():
      raise InterpKernelException("PyWrap of DataArrayFloat.__reduce__ : not implemented because numpy is not active in your configuration ! No serialization/unserialization available without numpy !")
    return MEDCouplingStdReduceFunct,(DataArrayFloat,((self.toNumPyArray(),),(self.__getstate__()),))

class BoxSplittingOptions(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxSplittingOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoxSplittingOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(INTERP_KERNEL::BoxSplittingOptions self) -> BoxSplittingOptions

        1
        """
        this = _MEDCouplingCompat.new_BoxSplittingOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init(self) -> "void":
        """
        init(BoxSplittingOptions self)

        1
        """
        return _MEDCouplingCompat.BoxSplittingOptions_init(self)


    def getEfficiencyGoal(self) -> "double":
        """
        getEfficiencyGoal(BoxSplittingOptions self) -> double

        1
        """
        return _MEDCouplingCompat.BoxSplittingOptions_getEfficiencyGoal(self)


    def setEfficiencyGoal(self, efficiency: 'double') -> "void":
        """
        setEfficiencyGoal(BoxSplittingOptions self, double efficiency)

        1
        """
        return _MEDCouplingCompat.BoxSplittingOptions_setEfficiencyGoal(self, efficiency)


    def getEfficiencyThreshold(self) -> "double":
        """
        getEfficiencyThreshold(BoxSplittingOptions self) -> double

        1
        """
        return _MEDCouplingCompat.BoxSplittingOptions_getEfficiencyThreshold(self)


    def setEfficiencyThreshold(self, efficiencyThreshold: 'double') -> "void":
        """
        setEfficiencyThreshold(BoxSplittingOptions self, double efficiencyThreshold)

        1
        """
        return _MEDCouplingCompat.BoxSplittingOptions_setEfficiencyThreshold(self, efficiencyThreshold)


    def getMinimumPatchLength(self) -> "int":
        """
        getMinimumPatchLength(BoxSplittingOptions self) -> int

        1
        """
        return _MEDCouplingCompat.BoxSplittingOptions_getMinimumPatchLength(self)


    def setMinimumPatchLength(self, minPatchLength: 'int') -> "void":
        """
        setMinimumPatchLength(BoxSplittingOptions self, int minPatchLength)

        1
        """
        return _MEDCouplingCompat.BoxSplittingOptions_setMinimumPatchLength(self, minPatchLength)


    def getMaximumPatchLength(self) -> "int":
        """
        getMaximumPatchLength(BoxSplittingOptions self) -> int

        1
        """
        return _MEDCouplingCompat.BoxSplittingOptions_getMaximumPatchLength(self)


    def setMaximumPatchLength(self, maxPatchLength: 'int') -> "void":
        """
        setMaximumPatchLength(BoxSplittingOptions self, int maxPatchLength)

        1
        """
        return _MEDCouplingCompat.BoxSplittingOptions_setMaximumPatchLength(self, maxPatchLength)


    def getMaximumNbOfCellsInPatch(self) -> "int":
        """
        getMaximumNbOfCellsInPatch(BoxSplittingOptions self) -> int

        1
        """
        return _MEDCouplingCompat.BoxSplittingOptions_getMaximumNbOfCellsInPatch(self)


    def setMaximumNbOfCellsInPatch(self, maxNbCellsInPatch: 'int') -> "void":
        """
        setMaximumNbOfCellsInPatch(BoxSplittingOptions self, int maxNbCellsInPatch)

        1
        """
        return _MEDCouplingCompat.BoxSplittingOptions_setMaximumNbOfCellsInPatch(self, maxNbCellsInPatch)


    def copyOptions(self, other: 'BoxSplittingOptions') -> "void":
        """
        copyOptions(BoxSplittingOptions self, BoxSplittingOptions other)

        1
        """
        return _MEDCouplingCompat.BoxSplittingOptions_copyOptions(self, other)


    def printOptions(self) -> "std::string":
        """
        printOptions(BoxSplittingOptions self) -> std::string

        1
        """
        return _MEDCouplingCompat.BoxSplittingOptions_printOptions(self)


    def __str__(self) -> "std::string":
        """
        __str__(BoxSplittingOptions self) -> std::string

        1
        """
        return _MEDCouplingCompat.BoxSplittingOptions___str__(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_BoxSplittingOptions
    __del__ = lambda self: None
BoxSplittingOptions_swigregister = _MEDCouplingCompat.BoxSplittingOptions_swigregister
BoxSplittingOptions_swigregister(BoxSplittingOptions)

ON_CELLS = _MEDCouplingCompat.ON_CELLS
ON_NODES = _MEDCouplingCompat.ON_NODES
ON_GAUSS_PT = _MEDCouplingCompat.ON_GAUSS_PT
ON_GAUSS_NE = _MEDCouplingCompat.ON_GAUSS_NE
ON_NODES_KR = _MEDCouplingCompat.ON_NODES_KR
NO_TIME = _MEDCouplingCompat.NO_TIME
ONE_TIME = _MEDCouplingCompat.ONE_TIME
LINEAR_TIME = _MEDCouplingCompat.LINEAR_TIME
CONST_ON_TIME_INTERVAL = _MEDCouplingCompat.CONST_ON_TIME_INTERVAL
UNSTRUCTURED = _MEDCouplingCompat.UNSTRUCTURED
CARTESIAN = _MEDCouplingCompat.CARTESIAN
EXTRUDED = _MEDCouplingCompat.EXTRUDED
CURVE_LINEAR = _MEDCouplingCompat.CURVE_LINEAR
SINGLE_STATIC_GEO_TYPE_UNSTRUCTURED = _MEDCouplingCompat.SINGLE_STATIC_GEO_TYPE_UNSTRUCTURED
SINGLE_DYNAMIC_GEO_TYPE_UNSTRUCTURED = _MEDCouplingCompat.SINGLE_DYNAMIC_GEO_TYPE_UNSTRUCTURED
IMAGE_GRID = _MEDCouplingCompat.IMAGE_GRID
class MEDCouplingMesh(RefCountObject, TimeLabel):
    """1"""

    __swig_setmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingMesh, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setName(self, name: 'std::string const &') -> "void":
        """
        setName(MEDCouplingMesh self, std::string const & name)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_setName(self, name)


    def getName(self) -> "std::string":
        """
        getName(MEDCouplingMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getName(self)


    def setDescription(self, descr: 'std::string const &') -> "void":
        """
        setDescription(MEDCouplingMesh self, std::string const & descr)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_setDescription(self, descr)


    def getDescription(self) -> "std::string":
        """
        getDescription(MEDCouplingMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getDescription(self)


    def setTime(self, val: 'double', iteration: 'int', order: 'int') -> "void":
        """
        setTime(MEDCouplingMesh self, double val, int iteration, int order)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_setTime(self, val, iteration, order)


    def setTimeUnit(self, unit: 'std::string const &') -> "void":
        """
        setTimeUnit(MEDCouplingMesh self, std::string const & unit)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_setTimeUnit(self, unit)


    def getTimeUnit(self) -> "std::string":
        """
        getTimeUnit(MEDCouplingMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getTimeUnit(self)


    def getType(self) -> "MEDCoupling::MEDCouplingMeshType":
        """
        getType(MEDCouplingMesh self) -> MEDCoupling::MEDCouplingMeshType

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getType(self)


    def isStructured(self) -> "bool":
        """
        isStructured(MEDCouplingMesh self) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_isStructured(self)


    def deepCopy(self) -> "MEDCoupling::MEDCouplingMesh *":
        """
        deepCopy(MEDCouplingMesh self) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_deepCopy(self)


    def clone(self, recDeepCpy: 'bool') -> "MEDCoupling::MEDCouplingMesh *":
        """
        clone(MEDCouplingMesh self, bool recDeepCpy) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_clone(self, recDeepCpy)


    def isEqual(self, other: 'MEDCouplingMesh', prec: 'double') -> "bool":
        """
        isEqual(MEDCouplingMesh self, MEDCouplingMesh other, double prec) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_isEqual(self, other, prec)


    def isEqualWithoutConsideringStr(self, other: 'MEDCouplingMesh', prec: 'double') -> "bool":
        """
        isEqualWithoutConsideringStr(MEDCouplingMesh self, MEDCouplingMesh other, double prec) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_isEqualWithoutConsideringStr(self, other, prec)


    def checkFastEquivalWith(self, other: 'MEDCouplingMesh', prec: 'double') -> "void":
        """
        checkFastEquivalWith(MEDCouplingMesh self, MEDCouplingMesh other, double prec)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_checkFastEquivalWith(self, other, prec)


    def copyTinyStringsFrom(self, other: 'MEDCouplingMesh') -> "void":
        """
        copyTinyStringsFrom(MEDCouplingMesh self, MEDCouplingMesh other)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_copyTinyStringsFrom(self, other)


    def copyTinyInfoFrom(self, other: 'MEDCouplingMesh') -> "void":
        """
        copyTinyInfoFrom(MEDCouplingMesh self, MEDCouplingMesh other)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_copyTinyInfoFrom(self, other)


    def checkConsistencyLight(self) -> "void":
        """
        checkConsistencyLight(MEDCouplingMesh self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_checkConsistencyLight(self)


    def checkConsistency(self, eps: 'double'=1e-12) -> "void":
        """
        checkConsistency(MEDCouplingMesh self, double eps=1e-12)
        checkConsistency(MEDCouplingMesh self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_checkConsistency(self, eps)


    def getNumberOfCells(self) -> "int":
        """
        getNumberOfCells(MEDCouplingMesh self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getNumberOfCells(self)


    def getNumberOfNodes(self) -> "int":
        """
        getNumberOfNodes(MEDCouplingMesh self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getNumberOfNodes(self)


    def getSpaceDimension(self) -> "int":
        """
        getSpaceDimension(MEDCouplingMesh self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getSpaceDimension(self)


    def getMeshDimension(self) -> "int":
        """
        getMeshDimension(MEDCouplingMesh self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getMeshDimension(self)


    def getCoordinatesAndOwner(self) -> "MEDCoupling::DataArrayDouble *":
        """
        getCoordinatesAndOwner(MEDCouplingMesh self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getCoordinatesAndOwner(self)


    def computeCellCenterOfMass(self) -> "MEDCoupling::DataArrayDouble *":
        """
        computeCellCenterOfMass(MEDCouplingMesh self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_computeCellCenterOfMass(self)


    def computeIsoBarycenterOfNodesPerCell(self) -> "MEDCoupling::DataArrayDouble *":
        """
        computeIsoBarycenterOfNodesPerCell(MEDCouplingMesh self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_computeIsoBarycenterOfNodesPerCell(self)


    def giveCellsWithType(self, type: 'INTERP_KERNEL::NormalizedCellType') -> "MEDCoupling::DataArrayInt *":
        """
        giveCellsWithType(MEDCouplingMesh self, INTERP_KERNEL::NormalizedCellType type) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_giveCellsWithType(self, type)


    def computeNbOfNodesPerCell(self) -> "MEDCoupling::DataArrayInt *":
        """
        computeNbOfNodesPerCell(MEDCouplingMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_computeNbOfNodesPerCell(self)


    def computeNbOfFacesPerCell(self) -> "MEDCoupling::DataArrayInt *":
        """
        computeNbOfFacesPerCell(MEDCouplingMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_computeNbOfFacesPerCell(self)


    def computeEffectiveNbOfNodesPerCell(self) -> "MEDCoupling::DataArrayInt *":
        """
        computeEffectiveNbOfNodesPerCell(MEDCouplingMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_computeEffectiveNbOfNodesPerCell(self)


    def buildPartRange(self, beginCellIds: 'int', endCellIds: 'int', stepCellIds: 'int') -> "MEDCoupling::MEDCouplingMesh *":
        """
        buildPartRange(MEDCouplingMesh self, int beginCellIds, int endCellIds, int stepCellIds) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_buildPartRange(self, beginCellIds, endCellIds, stepCellIds)


    def getNumberOfCellsWithType(self, type: 'INTERP_KERNEL::NormalizedCellType') -> "int":
        """
        getNumberOfCellsWithType(MEDCouplingMesh self, INTERP_KERNEL::NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getNumberOfCellsWithType(self, type)


    def getTypeOfCell(self, cellId: 'int') -> "INTERP_KERNEL::NormalizedCellType":
        """
        getTypeOfCell(MEDCouplingMesh self, int cellId) -> INTERP_KERNEL::NormalizedCellType

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getTypeOfCell(self, cellId)


    def simpleRepr(self) -> "std::string":
        """
        simpleRepr(MEDCouplingMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_simpleRepr(self)


    def advancedRepr(self) -> "std::string":
        """
        advancedRepr(MEDCouplingMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_advancedRepr(self)


    def writeVTK(self, fileName: 'std::string const &', isBinary: 'bool'=True) -> "std::string":
        """
        writeVTK(MEDCouplingMesh self, std::string const & fileName, bool isBinary=True) -> std::string
        writeVTK(MEDCouplingMesh self, std::string const & fileName) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_writeVTK(self, fileName, isBinary)


    def getVTKFileExtension(self) -> "std::string":
        """
        getVTKFileExtension(MEDCouplingMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getVTKFileExtension(self)


    def getVTKFileNameOf(self, fileName: 'std::string const &') -> "std::string":
        """
        getVTKFileNameOf(MEDCouplingMesh self, std::string const & fileName) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getVTKFileNameOf(self, fileName)


    def getMeasureField(self, isAbs: 'bool') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        getMeasureField(MEDCouplingMesh self, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getMeasureField(self, isAbs)


    def getMeasureFieldOnNode(self, isAbs: 'bool') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        getMeasureFieldOnNode(MEDCouplingMesh self, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getMeasureFieldOnNode(self, isAbs)


    def fillFromAnalytic(self, t: 'MEDCoupling::TypeOfField', nbOfComp: 'int', func: 'std::string const &') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        fillFromAnalytic(MEDCouplingMesh self, MEDCoupling::TypeOfField t, int nbOfComp, std::string const & func) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_fillFromAnalytic(self, t, nbOfComp, func)


    def fillFromAnalyticCompo(self, t: 'MEDCoupling::TypeOfField', nbOfComp: 'int', func: 'std::string const &') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        fillFromAnalyticCompo(MEDCouplingMesh self, MEDCoupling::TypeOfField t, int nbOfComp, std::string const & func) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_fillFromAnalyticCompo(self, t, nbOfComp, func)


    def fillFromAnalyticNamedCompo(self, t: 'MEDCoupling::TypeOfField', nbOfComp: 'int', varsOrder: 'svec', func: 'std::string const &') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        fillFromAnalyticNamedCompo(MEDCouplingMesh self, MEDCoupling::TypeOfField t, int nbOfComp, svec varsOrder, std::string const & func) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_fillFromAnalyticNamedCompo(self, t, nbOfComp, varsOrder, func)


    def buildOrthogonalField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        buildOrthogonalField(MEDCouplingMesh self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_buildOrthogonalField(self)


    def buildUnstructured(self) -> "MEDCoupling::MEDCouplingUMesh *":
        """
        buildUnstructured(MEDCouplingMesh self) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_buildUnstructured(self)


    def mergeMyselfWith(self, other: 'MEDCouplingMesh') -> "MEDCoupling::MEDCouplingMesh *":
        """
        mergeMyselfWith(MEDCouplingMesh self, MEDCouplingMesh other) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_mergeMyselfWith(self, other)


    def areCompatibleForMerge(self, other: 'MEDCouplingMesh') -> "bool":
        """
        areCompatibleForMerge(MEDCouplingMesh self, MEDCouplingMesh other) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_areCompatibleForMerge(self, other)


    def simplexize(self, policy: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        simplexize(MEDCouplingMesh self, int policy) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_simplexize(self, policy)


    def unserialization(self, tinyInfoD: 'dvec', tinyInfo: 'ivec', a1: 'DataArrayInt', a2: 'DataArrayDouble', littleStrings: 'svec') -> "void":
        """
        unserialization(MEDCouplingMesh self, dvec tinyInfoD, ivec tinyInfo, DataArrayInt a1, DataArrayDouble a2, svec littleStrings)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_unserialization(self, tinyInfoD, tinyInfo, a1, a2, littleStrings)


    def IsStaticGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "bool":
        """
        IsStaticGeometricType(INTERP_KERNEL::NormalizedCellType type) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_IsStaticGeometricType(type)

    IsStaticGeometricType = staticmethod(IsStaticGeometricType)

    def IsLinearGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "bool":
        """
        IsLinearGeometricType(INTERP_KERNEL::NormalizedCellType type) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_IsLinearGeometricType(type)

    IsLinearGeometricType = staticmethod(IsLinearGeometricType)

    def GetCorrespondingPolyType(type: 'INTERP_KERNEL::NormalizedCellType') -> "INTERP_KERNEL::NormalizedCellType":
        """
        GetCorrespondingPolyType(INTERP_KERNEL::NormalizedCellType type) -> INTERP_KERNEL::NormalizedCellType

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_GetCorrespondingPolyType(type)

    GetCorrespondingPolyType = staticmethod(GetCorrespondingPolyType)

    def GetNumberOfNodesOfGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "int":
        """
        GetNumberOfNodesOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_GetNumberOfNodesOfGeometricType(type)

    GetNumberOfNodesOfGeometricType = staticmethod(GetNumberOfNodesOfGeometricType)

    def GetDimensionOfGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "int":
        """
        GetDimensionOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_GetDimensionOfGeometricType(type)

    GetDimensionOfGeometricType = staticmethod(GetDimensionOfGeometricType)

    def GetReprOfGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "char const *":
        """
        GetReprOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> char const *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_GetReprOfGeometricType(type)

    GetReprOfGeometricType = staticmethod(GetReprOfGeometricType)

    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh___str__(self)


    def getTime(self) -> "PyObject *":
        """
        getTime(MEDCouplingMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getTime(self)


    def getDirectAccessOfCoordsArrIfInStructure(self) -> "MEDCoupling::DataArrayDouble *":
        """
        getDirectAccessOfCoordsArrIfInStructure(MEDCouplingMesh self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getDirectAccessOfCoordsArrIfInStructure(self)


    def getCellContainingPoint(self, p: 'PyObject *', eps: 'double') -> "int":
        """
        getCellContainingPoint(MEDCouplingMesh self, PyObject * p, double eps) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getCellContainingPoint(self, p, eps)


    def getCellsContainingPoints(self, *args) -> "PyObject *":
        """
        getCellsContainingPoints(MEDCouplingMesh self, PyObject * p, int nbOfPoints, double eps) -> PyObject
        getCellsContainingPoints(MEDCouplingMesh self, PyObject * p, double eps) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getCellsContainingPoints(self, *args)


    def getCellsContainingPointsLinearPartOnlyOnNonDynType(self, *args) -> "PyObject *":
        """
        getCellsContainingPointsLinearPartOnlyOnNonDynType(MEDCouplingMesh self, PyObject * p, int nbOfPoints, double eps) -> PyObject
        getCellsContainingPointsLinearPartOnlyOnNonDynType(MEDCouplingMesh self, PyObject * p, double eps) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getCellsContainingPointsLinearPartOnlyOnNonDynType(self, *args)


    def getCellsContainingPoint(self, p: 'PyObject *', eps: 'double') -> "PyObject *":
        """
        getCellsContainingPoint(MEDCouplingMesh self, PyObject * p, double eps) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getCellsContainingPoint(self, p, eps)


    def getReverseNodalConnectivity(self) -> "PyObject *":
        """
        getReverseNodalConnectivity(MEDCouplingMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getReverseNodalConnectivity(self)


    def renumberCells(self, li: 'PyObject *', check: 'bool'=True) -> "void":
        """
        renumberCells(MEDCouplingMesh self, PyObject * li, bool check=True)
        renumberCells(MEDCouplingMesh self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_renumberCells(self, li, check)


    def checkGeoEquivalWith(self, other: 'MEDCouplingMesh', levOfCheck: 'int', prec: 'double') -> "PyObject *":
        """
        checkGeoEquivalWith(MEDCouplingMesh self, MEDCouplingMesh other, int levOfCheck, double prec) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_checkGeoEquivalWith(self, other, levOfCheck, prec)


    def checkDeepEquivalWith(self, other: 'MEDCouplingMesh', cellCompPol: 'int', prec: 'double') -> "PyObject *":
        """
        checkDeepEquivalWith(MEDCouplingMesh self, MEDCouplingMesh other, int cellCompPol, double prec) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_checkDeepEquivalWith(self, other, cellCompPol, prec)


    def checkDeepEquivalOnSameNodesWith(self, other: 'MEDCouplingMesh', cellCompPol: 'int', prec: 'double') -> "MEDCoupling::DataArrayInt *":
        """
        checkDeepEquivalOnSameNodesWith(MEDCouplingMesh self, MEDCouplingMesh other, int cellCompPol, double prec) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_checkDeepEquivalOnSameNodesWith(self, other, cellCompPol, prec)


    def getCellIdsFullyIncludedInNodeIds(self, li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        getCellIdsFullyIncludedInNodeIds(MEDCouplingMesh self, PyObject * li) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getCellIdsFullyIncludedInNodeIds(self, li)


    def getNodeIdsOfCell(self, cellId: 'int') -> "PyObject *":
        """
        getNodeIdsOfCell(MEDCouplingMesh self, int cellId) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getNodeIdsOfCell(self, cellId)


    def getCoordinatesOfNode(self, nodeId: 'int') -> "PyObject *":
        """
        getCoordinatesOfNode(MEDCouplingMesh self, int nodeId) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getCoordinatesOfNode(self, nodeId)


    def scale(self, point: 'PyObject *', factor: 'double') -> "void":
        """
        scale(MEDCouplingMesh self, PyObject * point, double factor)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_scale(self, point, factor)


    def getBoundingBox(self) -> "PyObject *":
        """
        getBoundingBox(MEDCouplingMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getBoundingBox(self)


    def isEqualIfNotWhy(self, other: 'MEDCouplingMesh', prec: 'double') -> "PyObject *":
        """
        isEqualIfNotWhy(MEDCouplingMesh self, MEDCouplingMesh other, double prec) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_isEqualIfNotWhy(self, other, prec)


    def buildPart(self, li: 'PyObject *') -> "PyObject *":
        """
        buildPart(MEDCouplingMesh self, PyObject * li) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_buildPart(self, li)


    def buildPartAndReduceNodes(self, li: 'PyObject *') -> "PyObject *":
        """
        buildPartAndReduceNodes(MEDCouplingMesh self, PyObject * li) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_buildPartAndReduceNodes(self, li)


    def buildPartRangeAndReduceNodes(self, beginCellIds: 'int', endCellIds: 'int', stepCellIds: 'int') -> "PyObject *":
        """
        buildPartRangeAndReduceNodes(MEDCouplingMesh self, int beginCellIds, int endCellIds, int stepCellIds) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_buildPartRangeAndReduceNodes(self, beginCellIds, endCellIds, stepCellIds)


    def getDistributionOfTypes(self) -> "PyObject *":
        """
        getDistributionOfTypes(MEDCouplingMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getDistributionOfTypes(self)


    def checkTypeConsistencyAndContig(self, li: 'PyObject *', li2: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        checkTypeConsistencyAndContig(MEDCouplingMesh self, PyObject * li, PyObject * li2) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_checkTypeConsistencyAndContig(self, li, li2)


    def splitProfilePerType(self, profile: 'DataArrayInt', smartPflKiller: 'bool'=True) -> "PyObject *":
        """
        splitProfilePerType(MEDCouplingMesh self, DataArrayInt profile, bool smartPflKiller=True) -> PyObject
        splitProfilePerType(MEDCouplingMesh self, DataArrayInt profile) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_splitProfilePerType(self, profile, smartPflKiller)


    def translate(self, vector: 'PyObject *') -> "void":
        """
        translate(MEDCouplingMesh self, PyObject * vector)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_translate(self, vector)


    def rotate(self, *args) -> "void":
        """
        rotate(MEDCouplingMesh self, PyObject * center, double alpha)
        rotate(MEDCouplingMesh self, PyObject * center, PyObject * vector, double alpha)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_rotate(self, *args)


    def getAllGeoTypes(self) -> "PyObject *":
        """
        getAllGeoTypes(MEDCouplingMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getAllGeoTypes(self)


    def getTinySerializationInformation(self) -> "PyObject *":
        """
        getTinySerializationInformation(MEDCouplingMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_getTinySerializationInformation(self)


    def serialize(self) -> "PyObject *":
        """
        serialize(MEDCouplingMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_serialize(self)


    def resizeForUnserialization(self, tinyInfo: 'ivec', a1: 'DataArrayInt', a2: 'DataArrayDouble') -> "void":
        """
        resizeForUnserialization(MEDCouplingMesh self, ivec tinyInfo, DataArrayInt a1, DataArrayDouble a2)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_resizeForUnserialization(self, tinyInfo, a1, a2)


    def __getstate__(self) -> "PyObject *":
        """
        __getstate__(MEDCouplingMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh___getstate__(self)


    def __setstate__(self, inp: 'PyObject *') -> "void":
        """
        __setstate__(MEDCouplingMesh self, PyObject * inp)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh___setstate__(self, inp)


    def MergeMeshes(*args) -> "MEDCoupling::MEDCouplingMesh *":
        """
        MergeMeshes(MEDCouplingMesh mesh1, MEDCouplingMesh mesh2) -> MEDCouplingMesh
        MergeMeshes(PyObject * li) -> MEDCouplingMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingMesh_MergeMeshes(*args)

    MergeMeshes = staticmethod(MergeMeshes)
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingMesh
    __del__ = lambda self: None
MEDCouplingMesh_swigregister = _MEDCouplingCompat.MEDCouplingMesh_swigregister
MEDCouplingMesh_swigregister(MEDCouplingMesh)

def MEDCouplingMesh_IsStaticGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "bool":
    """
    MEDCouplingMesh_IsStaticGeometricType(INTERP_KERNEL::NormalizedCellType type) -> bool

    1
    """
    return _MEDCouplingCompat.MEDCouplingMesh_IsStaticGeometricType(type)

def MEDCouplingMesh_IsLinearGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "bool":
    """
    MEDCouplingMesh_IsLinearGeometricType(INTERP_KERNEL::NormalizedCellType type) -> bool

    1
    """
    return _MEDCouplingCompat.MEDCouplingMesh_IsLinearGeometricType(type)

def MEDCouplingMesh_GetCorrespondingPolyType(type: 'INTERP_KERNEL::NormalizedCellType') -> "INTERP_KERNEL::NormalizedCellType":
    """
    MEDCouplingMesh_GetCorrespondingPolyType(INTERP_KERNEL::NormalizedCellType type) -> INTERP_KERNEL::NormalizedCellType

    1
    """
    return _MEDCouplingCompat.MEDCouplingMesh_GetCorrespondingPolyType(type)

def MEDCouplingMesh_GetNumberOfNodesOfGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "int":
    """
    MEDCouplingMesh_GetNumberOfNodesOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> int

    1
    """
    return _MEDCouplingCompat.MEDCouplingMesh_GetNumberOfNodesOfGeometricType(type)

def MEDCouplingMesh_GetDimensionOfGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "int":
    """
    MEDCouplingMesh_GetDimensionOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> int

    1
    """
    return _MEDCouplingCompat.MEDCouplingMesh_GetDimensionOfGeometricType(type)

def MEDCouplingMesh_GetReprOfGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "char const *":
    """
    MEDCouplingMesh_GetReprOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> char const *

    1
    """
    return _MEDCouplingCompat.MEDCouplingMesh_GetReprOfGeometricType(type)

def MEDCouplingMesh_MergeMeshes(*args) -> "MEDCoupling::MEDCouplingMesh *":
    """
    MergeMeshes(MEDCouplingMesh mesh1, MEDCouplingMesh mesh2) -> MEDCouplingMesh
    MEDCouplingMesh_MergeMeshes(PyObject * li) -> MEDCouplingMesh

    1
    """
    return _MEDCouplingCompat.MEDCouplingMesh_MergeMeshes(*args)

NORM_POINT1 = _MEDCouplingCompat.NORM_POINT1
NORM_SEG2 = _MEDCouplingCompat.NORM_SEG2
NORM_SEG3 = _MEDCouplingCompat.NORM_SEG3
NORM_SEG4 = _MEDCouplingCompat.NORM_SEG4
NORM_POLYL = _MEDCouplingCompat.NORM_POLYL
NORM_TRI3 = _MEDCouplingCompat.NORM_TRI3
NORM_QUAD4 = _MEDCouplingCompat.NORM_QUAD4
NORM_POLYGON = _MEDCouplingCompat.NORM_POLYGON
NORM_TRI6 = _MEDCouplingCompat.NORM_TRI6
NORM_TRI7 = _MEDCouplingCompat.NORM_TRI7
NORM_QUAD8 = _MEDCouplingCompat.NORM_QUAD8
NORM_QUAD9 = _MEDCouplingCompat.NORM_QUAD9
NORM_QPOLYG = _MEDCouplingCompat.NORM_QPOLYG
NORM_TETRA4 = _MEDCouplingCompat.NORM_TETRA4
NORM_PYRA5 = _MEDCouplingCompat.NORM_PYRA5
NORM_PENTA6 = _MEDCouplingCompat.NORM_PENTA6
NORM_HEXA8 = _MEDCouplingCompat.NORM_HEXA8
NORM_TETRA10 = _MEDCouplingCompat.NORM_TETRA10
NORM_HEXGP12 = _MEDCouplingCompat.NORM_HEXGP12
NORM_PYRA13 = _MEDCouplingCompat.NORM_PYRA13
NORM_PENTA15 = _MEDCouplingCompat.NORM_PENTA15
NORM_PENTA18 = _MEDCouplingCompat.NORM_PENTA18
NORM_HEXA20 = _MEDCouplingCompat.NORM_HEXA20
NORM_HEXA27 = _MEDCouplingCompat.NORM_HEXA27
NORM_POLYHED = _MEDCouplingCompat.NORM_POLYHED
NORM_ERROR = _MEDCouplingCompat.NORM_ERROR
NORM_MAXTYPE = _MEDCouplingCompat.NORM_MAXTYPE
PLANAR_FACE_5 = _MEDCouplingCompat.PLANAR_FACE_5
PLANAR_FACE_6 = _MEDCouplingCompat.PLANAR_FACE_6
GENERAL_24 = _MEDCouplingCompat.GENERAL_24
GENERAL_48 = _MEDCouplingCompat.GENERAL_48
NoNature = _MEDCouplingCompat.NoNature
IntensiveMaximum = _MEDCouplingCompat.IntensiveMaximum
ExtensiveMaximum = _MEDCouplingCompat.ExtensiveMaximum
ExtensiveConservation = _MEDCouplingCompat.ExtensiveConservation
IntensiveConservation = _MEDCouplingCompat.IntensiveConservation
class MEDCouplingNatureOfField(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingNatureOfField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingNatureOfField, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetRepr(nat: 'MEDCoupling::NatureOfField') -> "char const *":
        """
        GetRepr(MEDCoupling::NatureOfField nat) -> char const *

        1
        """
        return _MEDCouplingCompat.MEDCouplingNatureOfField_GetRepr(nat)

    GetRepr = staticmethod(GetRepr)

    def GetReprNoThrow(nat: 'MEDCoupling::NatureOfField') -> "std::string":
        """
        GetReprNoThrow(MEDCoupling::NatureOfField nat) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingNatureOfField_GetReprNoThrow(nat)

    GetReprNoThrow = staticmethod(GetReprNoThrow)

    def GetAllPossibilitiesStr() -> "std::string":
        """
        GetAllPossibilitiesStr() -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingNatureOfField_GetAllPossibilitiesStr()

    GetAllPossibilitiesStr = staticmethod(GetAllPossibilitiesStr)
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingNatureOfField
    __del__ = lambda self: None
MEDCouplingNatureOfField_swigregister = _MEDCouplingCompat.MEDCouplingNatureOfField_swigregister
MEDCouplingNatureOfField_swigregister(MEDCouplingNatureOfField)

def MEDCouplingNatureOfField_GetRepr(nat: 'MEDCoupling::NatureOfField') -> "char const *":
    """
    MEDCouplingNatureOfField_GetRepr(MEDCoupling::NatureOfField nat) -> char const *

    1
    """
    return _MEDCouplingCompat.MEDCouplingNatureOfField_GetRepr(nat)

def MEDCouplingNatureOfField_GetReprNoThrow(nat: 'MEDCoupling::NatureOfField') -> "std::string":
    """
    MEDCouplingNatureOfField_GetReprNoThrow(MEDCoupling::NatureOfField nat) -> std::string

    1
    """
    return _MEDCouplingCompat.MEDCouplingNatureOfField_GetReprNoThrow(nat)

def MEDCouplingNatureOfField_GetAllPossibilitiesStr() -> "std::string":
    """
    MEDCouplingNatureOfField_GetAllPossibilitiesStr() -> std::string

    1
    """
    return _MEDCouplingCompat.MEDCouplingNatureOfField_GetAllPossibilitiesStr()

class MEDCouplingGaussLocalization(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingGaussLocalization, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingGaussLocalization, name)

    def __init__(self, *args):
        """
        __init__(MEDCoupling::MEDCouplingGaussLocalization self, INTERP_KERNEL::NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec w) -> MEDCouplingGaussLocalization
        __init__(MEDCoupling::MEDCouplingGaussLocalization self, INTERP_KERNEL::NormalizedCellType typ) -> MEDCouplingGaussLocalization

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingGaussLocalization(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getType(self) -> "INTERP_KERNEL::NormalizedCellType":
        """
        getType(MEDCouplingGaussLocalization self) -> INTERP_KERNEL::NormalizedCellType

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_getType(self)


    def setType(self, typ: 'INTERP_KERNEL::NormalizedCellType') -> "void":
        """
        setType(MEDCouplingGaussLocalization self, INTERP_KERNEL::NormalizedCellType typ)

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_setType(self, typ)


    def getNumberOfGaussPt(self) -> "int":
        """
        getNumberOfGaussPt(MEDCouplingGaussLocalization self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_getNumberOfGaussPt(self)


    def getDimension(self) -> "int":
        """
        getDimension(MEDCouplingGaussLocalization self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_getDimension(self)


    def getNumberOfPtsInRefCell(self) -> "int":
        """
        getNumberOfPtsInRefCell(MEDCouplingGaussLocalization self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_getNumberOfPtsInRefCell(self)


    def getStringRepr(self) -> "std::string":
        """
        getStringRepr(MEDCouplingGaussLocalization self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_getStringRepr(self)


    def checkConsistencyLight(self) -> "void":
        """
        checkConsistencyLight(MEDCouplingGaussLocalization self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_checkConsistencyLight(self)


    def isEqual(self, other: 'MEDCouplingGaussLocalization', eps: 'double') -> "bool":
        """
        isEqual(MEDCouplingGaussLocalization self, MEDCouplingGaussLocalization other, double eps) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_isEqual(self, other, eps)


    def getRefCoords(self) -> "std::vector< double,std::allocator< double > > const &":
        """
        getRefCoords(MEDCouplingGaussLocalization self) -> dvec

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_getRefCoords(self)


    def getRefCoord(self, ptIdInCell: 'int', comp: 'int') -> "double":
        """
        getRefCoord(MEDCouplingGaussLocalization self, int ptIdInCell, int comp) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_getRefCoord(self, ptIdInCell, comp)


    def getGaussCoords(self) -> "std::vector< double,std::allocator< double > > const &":
        """
        getGaussCoords(MEDCouplingGaussLocalization self) -> dvec

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_getGaussCoords(self)


    def getGaussCoord(self, gaussPtIdInCell: 'int', comp: 'int') -> "double":
        """
        getGaussCoord(MEDCouplingGaussLocalization self, int gaussPtIdInCell, int comp) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_getGaussCoord(self, gaussPtIdInCell, comp)


    def getWeights(self) -> "std::vector< double,std::allocator< double > > const &":
        """
        getWeights(MEDCouplingGaussLocalization self) -> dvec

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_getWeights(self)


    def getWeight(self, gaussPtIdInCell: 'int', newVal: 'double') -> "double":
        """
        getWeight(MEDCouplingGaussLocalization self, int gaussPtIdInCell, double newVal) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_getWeight(self, gaussPtIdInCell, newVal)


    def setRefCoord(self, ptIdInCell: 'int', comp: 'int', newVal: 'double') -> "void":
        """
        setRefCoord(MEDCouplingGaussLocalization self, int ptIdInCell, int comp, double newVal)

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_setRefCoord(self, ptIdInCell, comp, newVal)


    def setGaussCoord(self, gaussPtIdInCell: 'int', comp: 'int', newVal: 'double') -> "void":
        """
        setGaussCoord(MEDCouplingGaussLocalization self, int gaussPtIdInCell, int comp, double newVal)

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_setGaussCoord(self, gaussPtIdInCell, comp, newVal)


    def setWeight(self, gaussPtIdInCell: 'int', newVal: 'double') -> "void":
        """
        setWeight(MEDCouplingGaussLocalization self, int gaussPtIdInCell, double newVal)

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_setWeight(self, gaussPtIdInCell, newVal)


    def setRefCoords(self, refCoo: 'dvec') -> "void":
        """
        setRefCoords(MEDCouplingGaussLocalization self, dvec refCoo)

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_setRefCoords(self, refCoo)


    def setGaussCoords(self, gsCoo: 'dvec') -> "void":
        """
        setGaussCoords(MEDCouplingGaussLocalization self, dvec gsCoo)

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_setGaussCoords(self, gsCoo)


    def setWeights(self, w: 'dvec') -> "void":
        """
        setWeights(MEDCouplingGaussLocalization self, dvec w)

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_setWeights(self, w)


    def AreAlmostEqual(v1: 'dvec', v2: 'dvec', eps: 'double') -> "bool":
        """
        AreAlmostEqual(dvec v1, dvec v2, double eps) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_AreAlmostEqual(v1, v2, eps)

    AreAlmostEqual = staticmethod(AreAlmostEqual)

    def localizePtsInRefCooForEachCell(self, ptsInRefCoo: 'DataArrayDouble', mesh: 'MEDCouplingUMesh') -> "MEDCoupling::DataArrayDouble *":
        """
        localizePtsInRefCooForEachCell(MEDCouplingGaussLocalization self, DataArrayDouble ptsInRefCoo, MEDCouplingUMesh mesh) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_localizePtsInRefCooForEachCell(self, ptsInRefCoo, mesh)


    def buildRefCell(self) -> "MEDCoupling::MEDCouplingUMesh *":
        """
        buildRefCell(MEDCouplingGaussLocalization self) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization_buildRefCell(self)


    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingGaussLocalization self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization___str__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(MEDCouplingGaussLocalization self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingGaussLocalization___repr__(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingGaussLocalization
    __del__ = lambda self: None
MEDCouplingGaussLocalization_swigregister = _MEDCouplingCompat.MEDCouplingGaussLocalization_swigregister
MEDCouplingGaussLocalization_swigregister(MEDCouplingGaussLocalization)

def MEDCouplingGaussLocalization_AreAlmostEqual(v1: 'dvec', v2: 'dvec', eps: 'double') -> "bool":
    """
    MEDCouplingGaussLocalization_AreAlmostEqual(dvec v1, dvec v2, double eps) -> bool

    1
    """
    return _MEDCouplingCompat.MEDCouplingGaussLocalization_AreAlmostEqual(v1, v2, eps)

class MEDCouplingSkyLineArray(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingSkyLineArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingSkyLineArray, name)
    __repr__ = _swig_repr

    def BuildFromPolyhedronConn(c: 'DataArrayInt', cI: 'DataArrayInt') -> "MEDCoupling::MEDCouplingSkyLineArray *":
        """
        BuildFromPolyhedronConn(DataArrayInt c, DataArrayInt cI) -> MEDCouplingSkyLineArray

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_BuildFromPolyhedronConn(c, cI)

    BuildFromPolyhedronConn = staticmethod(BuildFromPolyhedronConn)

    def set(self, index: 'DataArrayInt', value: 'DataArrayInt') -> "void":
        """
        set(MEDCouplingSkyLineArray self, DataArrayInt index, DataArrayInt value)

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_set(self, index, value)


    def set3(self, superIndex: 'DataArrayInt', index: 'DataArrayInt', value: 'DataArrayInt') -> "void":
        """
        set3(MEDCouplingSkyLineArray self, DataArrayInt superIndex, DataArrayInt index, DataArrayInt value)

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_set3(self, superIndex, index, value)


    def getSuperNumberOf(self) -> "int":
        """
        getSuperNumberOf(MEDCouplingSkyLineArray self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_getSuperNumberOf(self)


    def getNumberOf(self) -> "int":
        """
        getNumberOf(MEDCouplingSkyLineArray self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_getNumberOf(self)


    def getLength(self) -> "int":
        """
        getLength(MEDCouplingSkyLineArray self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_getLength(self)


    def deletePack(self, i: 'int const', j: 'int const') -> "void":
        """
        deletePack(MEDCouplingSkyLineArray self, int const i, int const j)

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_deletePack(self, i, j)


    def deleteSimplePack(self, i: 'int const') -> "void":
        """
        deleteSimplePack(MEDCouplingSkyLineArray self, int const i)

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_deleteSimplePack(self, i)


    def deleteSimplePacks(self, idx: 'DataArrayInt') -> "void":
        """
        deleteSimplePacks(MEDCouplingSkyLineArray self, DataArrayInt idx)

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_deleteSimplePacks(self, idx)


    def __init__(self, *args):
        """
        __init__(MEDCoupling::MEDCouplingSkyLineArray self) -> MEDCouplingSkyLineArray
        __init__(MEDCoupling::MEDCouplingSkyLineArray self, ivec index, ivec value) -> MEDCouplingSkyLineArray
        __init__(MEDCoupling::MEDCouplingSkyLineArray self, DataArrayInt index, DataArrayInt value) -> MEDCouplingSkyLineArray
        __init__(MEDCoupling::MEDCouplingSkyLineArray self, MEDCouplingSkyLineArray other) -> MEDCouplingSkyLineArray

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingSkyLineArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingSkyLineArray self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray___str__(self)


    def getSuperIndexArray(self) -> "MEDCoupling::DataArrayInt *":
        """
        getSuperIndexArray(MEDCouplingSkyLineArray self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_getSuperIndexArray(self)


    def getIndexArray(self) -> "MEDCoupling::DataArrayInt *":
        """
        getIndexArray(MEDCouplingSkyLineArray self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_getIndexArray(self)


    def getValuesArray(self) -> "MEDCoupling::DataArrayInt *":
        """
        getValuesArray(MEDCouplingSkyLineArray self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_getValuesArray(self)


    def getSimplePackSafe(self, absolutePackId: 'int') -> "PyObject *":
        """
        getSimplePackSafe(MEDCouplingSkyLineArray self, int absolutePackId) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_getSimplePackSafe(self, absolutePackId)


    def findPackIds(self, superPackIndices: 'PyObject *', pack: 'PyObject *') -> "PyObject *":
        """
        findPackIds(MEDCouplingSkyLineArray self, PyObject * superPackIndices, PyObject * pack) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_findPackIds(self, superPackIndices, pack)


    def pushBackPack(self, i: 'int const', pack: 'PyObject *') -> "void":
        """
        pushBackPack(MEDCouplingSkyLineArray self, int const i, PyObject * pack)

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_pushBackPack(self, i, pack)


    def replaceSimplePack(self, idx: 'int const', pack: 'PyObject *') -> "void":
        """
        replaceSimplePack(MEDCouplingSkyLineArray self, int const idx, PyObject * pack)

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_replaceSimplePack(self, idx, pack)


    def replaceSimplePacks(self, idx: 'DataArrayInt', listePacks: 'PyObject *') -> "void":
        """
        replaceSimplePacks(MEDCouplingSkyLineArray self, DataArrayInt idx, PyObject * listePacks)

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_replaceSimplePacks(self, idx, listePacks)


    def replacePack(self, superIdx: 'int const', idx: 'int const', pack: 'PyObject *') -> "void":
        """
        replacePack(MEDCouplingSkyLineArray self, int const superIdx, int const idx, PyObject * pack)

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_replacePack(self, superIdx, idx, pack)


    def convertToPolyhedronConn(self) -> "PyObject *":
        """
        convertToPolyhedronConn(MEDCouplingSkyLineArray self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingSkyLineArray_convertToPolyhedronConn(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingSkyLineArray
    __del__ = lambda self: None
MEDCouplingSkyLineArray_swigregister = _MEDCouplingCompat.MEDCouplingSkyLineArray_swigregister
MEDCouplingSkyLineArray_swigregister(MEDCouplingSkyLineArray)

def MEDCouplingSkyLineArray_BuildFromPolyhedronConn(c: 'DataArrayInt', cI: 'DataArrayInt') -> "MEDCoupling::MEDCouplingSkyLineArray *":
    """
    MEDCouplingSkyLineArray_BuildFromPolyhedronConn(DataArrayInt c, DataArrayInt cI) -> MEDCouplingSkyLineArray

    1
    """
    return _MEDCouplingCompat.MEDCouplingSkyLineArray_BuildFromPolyhedronConn(c, cI)

class MEDCouplingFieldDiscretization(RefCountObject, TimeLabel):
    """1"""

    __swig_setmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretization, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretization, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New(type: 'MEDCoupling::TypeOfField') -> "MEDCoupling::MEDCouplingFieldDiscretization *":
        """
        New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_New(type)

    New = staticmethod(New)

    def getPrecision(self) -> "double":
        """
        getPrecision(MEDCouplingFieldDiscretization self) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getPrecision(self)


    def setPrecision(self, val: 'double') -> "void":
        """
        setPrecision(MEDCouplingFieldDiscretization self, double val)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_setPrecision(self, val)


    def GetTypeOfFieldFromStringRepr(repr: 'std::string const &') -> "MEDCoupling::TypeOfField":
        """
        GetTypeOfFieldFromStringRepr(std::string const & repr) -> MEDCoupling::TypeOfField

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_GetTypeOfFieldFromStringRepr(repr)

    GetTypeOfFieldFromStringRepr = staticmethod(GetTypeOfFieldFromStringRepr)

    def getEnum(self) -> "MEDCoupling::TypeOfField":
        """
        getEnum(MEDCouplingFieldDiscretization self) -> MEDCoupling::TypeOfField

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getEnum(self)


    def isEqual(self, other: 'MEDCouplingFieldDiscretization', eps: 'double') -> "bool":
        """
        isEqual(MEDCouplingFieldDiscretization self, MEDCouplingFieldDiscretization other, double eps) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_isEqual(self, other, eps)


    def isEqualIfNotWhy(self, other: 'MEDCouplingFieldDiscretization', eps: 'double', reason: 'std::string &') -> "bool":
        """
        isEqualIfNotWhy(MEDCouplingFieldDiscretization self, MEDCouplingFieldDiscretization other, double eps, std::string & reason) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_isEqualIfNotWhy(self, other, eps, reason)


    def isEqualWithoutConsideringStr(self, other: 'MEDCouplingFieldDiscretization', eps: 'double') -> "bool":
        """
        isEqualWithoutConsideringStr(MEDCouplingFieldDiscretization self, MEDCouplingFieldDiscretization other, double eps) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_isEqualWithoutConsideringStr(self, other, eps)


    def deepCopy(self) -> "MEDCoupling::MEDCouplingFieldDiscretization *":
        """
        deepCopy(MEDCouplingFieldDiscretization self) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_deepCopy(self)


    def clone(self) -> "MEDCoupling::MEDCouplingFieldDiscretization *":
        """
        clone(MEDCouplingFieldDiscretization self) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_clone(self)


    def clonePartRange(self, beginCellIds: 'int', endCellIds: 'int', stepCellIds: 'int') -> "MEDCoupling::MEDCouplingFieldDiscretization *":
        """
        clonePartRange(MEDCouplingFieldDiscretization self, int beginCellIds, int endCellIds, int stepCellIds) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_clonePartRange(self, beginCellIds, endCellIds, stepCellIds)


    def getStringRepr(self) -> "std::string":
        """
        getStringRepr(MEDCouplingFieldDiscretization self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getStringRepr(self)


    def getRepr(self) -> "char const *":
        """
        getRepr(MEDCouplingFieldDiscretization self) -> char const *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getRepr(self)


    def getNumberOfTuples(self, mesh: 'MEDCouplingMesh') -> "int":
        """
        getNumberOfTuples(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getNumberOfTuples(self, mesh)


    def getNumberOfMeshPlaces(self, mesh: 'MEDCouplingMesh') -> "int":
        """
        getNumberOfMeshPlaces(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getNumberOfMeshPlaces(self, mesh)


    def getOffsetArr(self, mesh: 'MEDCouplingMesh') -> "MEDCoupling::DataArrayInt *":
        """
        getOffsetArr(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getOffsetArr(self, mesh)


    def getLocalizationOfDiscValues(self, mesh: 'MEDCouplingMesh') -> "MEDCoupling::DataArrayDouble *":
        """
        getLocalizationOfDiscValues(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getLocalizationOfDiscValues(self, mesh)


    def checkCompatibilityWithNature(self, nat: 'MEDCoupling::NatureOfField') -> "void":
        """
        checkCompatibilityWithNature(MEDCouplingFieldDiscretization self, MEDCoupling::NatureOfField nat)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_checkCompatibilityWithNature(self, nat)


    def getIJK(self, mesh: 'MEDCouplingMesh', da: 'DataArrayDouble', cellId: 'int', nodeIdInCell: 'int', compoId: 'int') -> "double":
        """
        getIJK(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArrayDouble da, int cellId, int nodeIdInCell, int compoId) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getIJK(self, mesh, da, cellId, nodeIdInCell, compoId)


    def checkCoherencyBetween(self, mesh: 'MEDCouplingMesh', da: 'DataArray') -> "void":
        """
        checkCoherencyBetween(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArray da)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_checkCoherencyBetween(self, mesh, da)


    def getMeasureField(self, mesh: 'MEDCouplingMesh', isAbs: 'bool') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        getMeasureField(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getMeasureField(self, mesh, isAbs)


    def setGaussLocalizationOnType(self, m: 'MEDCouplingMesh', type: 'INTERP_KERNEL::NormalizedCellType', refCoo: 'dvec', gsCoo: 'dvec', wg: 'dvec') -> "void":
        """
        setGaussLocalizationOnType(MEDCouplingFieldDiscretization self, MEDCouplingMesh m, INTERP_KERNEL::NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_setGaussLocalizationOnType(self, m, type, refCoo, gsCoo, wg)


    def clearGaussLocalizations(self) -> "void":
        """
        clearGaussLocalizations(MEDCouplingFieldDiscretization self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_clearGaussLocalizations(self)


    def getGaussLocalization(self, locId: 'int') -> "MEDCoupling::MEDCouplingGaussLocalization &":
        """
        getGaussLocalization(MEDCouplingFieldDiscretization self, int locId) -> MEDCouplingGaussLocalization

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getGaussLocalization(self, locId)


    def getNbOfGaussLocalization(self) -> "int":
        """
        getNbOfGaussLocalization(MEDCouplingFieldDiscretization self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getNbOfGaussLocalization(self)


    def getGaussLocalizationIdOfOneCell(self, cellId: 'int') -> "int":
        """
        getGaussLocalizationIdOfOneCell(MEDCouplingFieldDiscretization self, int cellId) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getGaussLocalizationIdOfOneCell(self, cellId)


    def getGaussLocalizationIdOfOneType(self, type: 'INTERP_KERNEL::NormalizedCellType') -> "int":
        """
        getGaussLocalizationIdOfOneType(MEDCouplingFieldDiscretization self, INTERP_KERNEL::NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getGaussLocalizationIdOfOneType(self, type)


    def clonePart(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDiscretization *":
        """
        clonePart(MEDCouplingFieldDiscretization self, PyObject * li) -> MEDCouplingFieldDiscretization

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_clonePart(self, li)


    def buildSubMeshDataRange(self, mesh: 'MEDCouplingMesh', beginCellIds: 'int', endCellIds: 'int', stepCellIds: 'int', beginOut: 'int &', endOut: 'int &', stepOut: 'int &', di: 'MEDCoupling::DataArrayInt *&') -> "PyObject *":
        """
        buildSubMeshDataRange(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, int beginCellIds, int endCellIds, int stepCellIds, int & beginOut, int & endOut, int & stepOut, MEDCoupling::DataArrayInt *& di) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_buildSubMeshDataRange(self, mesh, beginCellIds, endCellIds, stepCellIds, beginOut, endOut, stepOut, di)


    def getNumberOfTuplesExpectedRegardingCode(self, code: 'PyObject *', idsPerType: 'PyObject *') -> "int":
        """
        getNumberOfTuplesExpectedRegardingCode(MEDCouplingFieldDiscretization self, PyObject * code, PyObject * idsPerType) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getNumberOfTuplesExpectedRegardingCode(self, code, idsPerType)


    def computeMeshRestrictionFromTupleIds(self, mesh: 'MEDCouplingMesh', tupleIds: 'PyObject *') -> "PyObject *":
        """
        computeMeshRestrictionFromTupleIds(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * tupleIds) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_computeMeshRestrictionFromTupleIds(self, mesh, tupleIds)


    def normL1(self, mesh: 'MEDCouplingMesh', arr: 'DataArrayDouble') -> "PyObject *":
        """
        normL1(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArrayDouble arr) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_normL1(self, mesh, arr)


    def normL2(self, mesh: 'MEDCouplingMesh', arr: 'DataArrayDouble') -> "PyObject *":
        """
        normL2(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArrayDouble arr) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_normL2(self, mesh, arr)


    def integral(self, mesh: 'MEDCouplingMesh', arr: 'DataArrayDouble', isWAbs: 'bool') -> "PyObject *":
        """
        integral(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArrayDouble arr, bool isWAbs) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_integral(self, mesh, arr, isWAbs)


    def getCellIdsHavingGaussLocalization(self, locId: 'int') -> "PyObject *":
        """
        getCellIdsHavingGaussLocalization(MEDCouplingFieldDiscretization self, int locId) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getCellIdsHavingGaussLocalization(self, locId)


    def setGaussLocalizationOnCells(self, m: 'MEDCouplingMesh', li: 'PyObject *', refCoo: 'dvec', gsCoo: 'dvec', wg: 'dvec') -> "void":
        """
        setGaussLocalizationOnCells(MEDCouplingFieldDiscretization self, MEDCouplingMesh m, PyObject * li, dvec refCoo, dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_setGaussLocalizationOnCells(self, m, li, refCoo, gsCoo, wg)


    def getGaussLocalizationIdsOfOneType(self, type: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
        """
        getGaussLocalizationIdsOfOneType(MEDCouplingFieldDiscretization self, INTERP_KERNEL::NormalizedCellType type) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getGaussLocalizationIdsOfOneType(self, type)


    def getValueOn(self, arr: 'DataArrayDouble', mesh: 'MEDCouplingMesh', sl: 'PyObject *') -> "PyObject *":
        """
        getValueOn(MEDCouplingFieldDiscretization self, DataArrayDouble arr, MEDCouplingMesh mesh, PyObject * sl) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getValueOn(self, arr, mesh, sl)


    def getValueOnPos(self, arr: 'DataArrayDouble', mesh: 'MEDCouplingMesh', i: 'int', j: 'int', k: 'int') -> "PyObject *":
        """
        getValueOnPos(MEDCouplingFieldDiscretization self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, int k) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getValueOnPos(self, arr, mesh, i, j, k)


    def getValueOnMulti(self, arr: 'DataArrayDouble', mesh: 'MEDCouplingMesh', loc: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        getValueOnMulti(MEDCouplingFieldDiscretization self, DataArrayDouble arr, MEDCouplingMesh mesh, PyObject * loc) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_getValueOnMulti(self, arr, mesh, loc)


    def renumberCells(self, li: 'PyObject *', check: 'bool'=True) -> "void":
        """
        renumberCells(MEDCouplingFieldDiscretization self, PyObject * li, bool check=True)
        renumberCells(MEDCouplingFieldDiscretization self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_renumberCells(self, li, check)


    def renumberArraysForCell(self, mesh: 'MEDCouplingMesh', arrays: 'PyObject *', old2New: 'PyObject *', check: 'bool') -> "void":
        """
        renumberArraysForCell(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * arrays, PyObject * old2New, bool check)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_renumberArraysForCell(self, mesh, arrays, old2New, check)


    def computeTupleIdsToSelectFromCellIds(self, mesh: 'MEDCouplingMesh', cellIds: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        computeTupleIdsToSelectFromCellIds(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * cellIds) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_computeTupleIdsToSelectFromCellIds(self, mesh, cellIds)


    def buildSubMeshData(self, mesh: 'MEDCouplingMesh', ids: 'PyObject *') -> "PyObject *":
        """
        buildSubMeshData(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * ids) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_buildSubMeshData(self, mesh, ids)


    def renumberValuesOnNodes(self, epsOnVals: 'double', old2New: 'PyObject *', newNbOfNodes: 'int', arr: 'DataArrayDouble') -> "void":
        """
        renumberValuesOnNodes(MEDCouplingFieldDiscretization self, double epsOnVals, PyObject * old2New, int newNbOfNodes, DataArrayDouble arr)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_renumberValuesOnNodes(self, epsOnVals, old2New, newNbOfNodes, arr)


    def renumberValuesOnCells(self, epsOnVals: 'double', mesh: 'MEDCouplingMesh', old2New: 'PyObject *', newSz: 'int', arr: 'DataArrayDouble') -> "void":
        """
        renumberValuesOnCells(MEDCouplingFieldDiscretization self, double epsOnVals, MEDCouplingMesh mesh, PyObject * old2New, int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_renumberValuesOnCells(self, epsOnVals, mesh, old2New, newSz, arr)


    def renumberValuesOnCellsR(self, mesh: 'MEDCouplingMesh', new2old: 'PyObject *', newSz: 'int', arr: 'DataArrayDouble') -> "void":
        """
        renumberValuesOnCellsR(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * new2old, int newSz, DataArrayDouble arr)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretization_renumberValuesOnCellsR(self, mesh, new2old, newSz, arr)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingFieldDiscretization
    __del__ = lambda self: None
MEDCouplingFieldDiscretization_swigregister = _MEDCouplingCompat.MEDCouplingFieldDiscretization_swigregister
MEDCouplingFieldDiscretization_swigregister(MEDCouplingFieldDiscretization)

def MEDCouplingFieldDiscretization_New(type: 'MEDCoupling::TypeOfField') -> "MEDCoupling::MEDCouplingFieldDiscretization *":
    """
    MEDCouplingFieldDiscretization_New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldDiscretization

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDiscretization_New(type)

def MEDCouplingFieldDiscretization_GetTypeOfFieldFromStringRepr(repr: 'std::string const &') -> "MEDCoupling::TypeOfField":
    """
    MEDCouplingFieldDiscretization_GetTypeOfFieldFromStringRepr(std::string const & repr) -> MEDCoupling::TypeOfField

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDiscretization_GetTypeOfFieldFromStringRepr(repr)

class MEDCouplingFieldDiscretizationP0(MEDCouplingFieldDiscretization):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationP0, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationP0, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingFieldDiscretizationP0
    __del__ = lambda self: None
MEDCouplingFieldDiscretizationP0_swigregister = _MEDCouplingCompat.MEDCouplingFieldDiscretizationP0_swigregister
MEDCouplingFieldDiscretizationP0_swigregister(MEDCouplingFieldDiscretizationP0)

class MEDCouplingFieldDiscretizationOnNodes(MEDCouplingFieldDiscretization):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationOnNodes, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationOnNodes, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingFieldDiscretizationOnNodes
    __del__ = lambda self: None
MEDCouplingFieldDiscretizationOnNodes_swigregister = _MEDCouplingCompat.MEDCouplingFieldDiscretizationOnNodes_swigregister
MEDCouplingFieldDiscretizationOnNodes_swigregister(MEDCouplingFieldDiscretizationOnNodes)

class MEDCouplingFieldDiscretizationP1(MEDCouplingFieldDiscretizationOnNodes):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationP1, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationP1, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingFieldDiscretizationP1
    __del__ = lambda self: None
MEDCouplingFieldDiscretizationP1_swigregister = _MEDCouplingCompat.MEDCouplingFieldDiscretizationP1_swigregister
MEDCouplingFieldDiscretizationP1_swigregister(MEDCouplingFieldDiscretizationP1)

class MEDCouplingFieldDiscretizationPerCell(MEDCouplingFieldDiscretization):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationPerCell, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationPerCell, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setArrayOfDiscIds(self, adids: 'DataArrayInt') -> "void":
        """
        setArrayOfDiscIds(MEDCouplingFieldDiscretizationPerCell self, DataArrayInt adids)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationPerCell_setArrayOfDiscIds(self, adids)


    def checkNoOrphanCells(self) -> "void":
        """
        checkNoOrphanCells(MEDCouplingFieldDiscretizationPerCell self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationPerCell_checkNoOrphanCells(self)


    def getArrayOfDiscIds(self) -> "PyObject *":
        """
        getArrayOfDiscIds(MEDCouplingFieldDiscretizationPerCell self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationPerCell_getArrayOfDiscIds(self)


    def splitIntoSingleGaussDicrPerCellType(self) -> "PyObject *":
        """
        splitIntoSingleGaussDicrPerCellType(MEDCouplingFieldDiscretizationPerCell self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationPerCell_splitIntoSingleGaussDicrPerCellType(self)

MEDCouplingFieldDiscretizationPerCell_swigregister = _MEDCouplingCompat.MEDCouplingFieldDiscretizationPerCell_swigregister
MEDCouplingFieldDiscretizationPerCell_swigregister(MEDCouplingFieldDiscretizationPerCell)

class MEDCouplingFieldDiscretizationGauss(MEDCouplingFieldDiscretizationPerCell):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationPerCell]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationGauss, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationPerCell]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationGauss, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(MEDCoupling::MEDCouplingFieldDiscretizationGauss self) -> MEDCouplingFieldDiscretizationGauss

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingFieldDiscretizationGauss()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingFieldDiscretizationGauss
    __del__ = lambda self: None
MEDCouplingFieldDiscretizationGauss_swigregister = _MEDCouplingCompat.MEDCouplingFieldDiscretizationGauss_swigregister
MEDCouplingFieldDiscretizationGauss_swigregister(MEDCouplingFieldDiscretizationGauss)

class MEDCouplingFieldDiscretizationGaussNE(MEDCouplingFieldDiscretization):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationGaussNE, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretization]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationGaussNE, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetWeightArrayFromGeometricType(geoType: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
        """
        GetWeightArrayFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationGaussNE_GetWeightArrayFromGeometricType(geoType)

    GetWeightArrayFromGeometricType = staticmethod(GetWeightArrayFromGeometricType)

    def GetRefCoordsFromGeometricType(geoType: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
        """
        GetRefCoordsFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationGaussNE_GetRefCoordsFromGeometricType(geoType)

    GetRefCoordsFromGeometricType = staticmethod(GetRefCoordsFromGeometricType)

    def GetLocsFromGeometricType(geoType: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
        """
        GetLocsFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationGaussNE_GetLocsFromGeometricType(geoType)

    GetLocsFromGeometricType = staticmethod(GetLocsFromGeometricType)
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingFieldDiscretizationGaussNE
    __del__ = lambda self: None
MEDCouplingFieldDiscretizationGaussNE_swigregister = _MEDCouplingCompat.MEDCouplingFieldDiscretizationGaussNE_swigregister
MEDCouplingFieldDiscretizationGaussNE_swigregister(MEDCouplingFieldDiscretizationGaussNE)

def MEDCouplingFieldDiscretizationGaussNE_GetWeightArrayFromGeometricType(geoType: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
    """
    MEDCouplingFieldDiscretizationGaussNE_GetWeightArrayFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDiscretizationGaussNE_GetWeightArrayFromGeometricType(geoType)

def MEDCouplingFieldDiscretizationGaussNE_GetRefCoordsFromGeometricType(geoType: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
    """
    MEDCouplingFieldDiscretizationGaussNE_GetRefCoordsFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDiscretizationGaussNE_GetRefCoordsFromGeometricType(geoType)

def MEDCouplingFieldDiscretizationGaussNE_GetLocsFromGeometricType(geoType: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
    """
    MEDCouplingFieldDiscretizationGaussNE_GetLocsFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDiscretizationGaussNE_GetLocsFromGeometricType(geoType)

class MEDCouplingFieldDiscretizationKriging(MEDCouplingFieldDiscretizationOnNodes):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDiscretizationKriging, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldDiscretizationOnNodes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDiscretizationKriging, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def PerformDriftOfVec(arr: 'DataArrayDouble', isDrift: 'int') -> "MEDCoupling::DataArrayDouble *":
        """
        PerformDriftOfVec(DataArrayDouble arr, int isDrift) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_PerformDriftOfVec(arr, isDrift)

    PerformDriftOfVec = staticmethod(PerformDriftOfVec)

    def computeVectorOfCoefficients(self, mesh: 'MEDCouplingMesh', arr: 'DataArrayDouble') -> "PyObject *":
        """
        computeVectorOfCoefficients(MEDCouplingFieldDiscretizationKriging self, MEDCouplingMesh mesh, DataArrayDouble arr) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_computeVectorOfCoefficients(self, mesh, arr)


    def computeInverseMatrix(self, mesh: 'MEDCouplingMesh') -> "PyObject *":
        """
        computeInverseMatrix(MEDCouplingFieldDiscretizationKriging self, MEDCouplingMesh mesh) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_computeInverseMatrix(self, mesh)


    def computeMatrix(self, mesh: 'MEDCouplingMesh') -> "PyObject *":
        """
        computeMatrix(MEDCouplingFieldDiscretizationKriging self, MEDCouplingMesh mesh) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_computeMatrix(self, mesh)


    def computeEvaluationMatrixOnGivenPts(self, mesh: 'MEDCouplingMesh', locs: 'PyObject *') -> "PyObject *":
        """
        computeEvaluationMatrixOnGivenPts(MEDCouplingFieldDiscretizationKriging self, MEDCouplingMesh mesh, PyObject * locs) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_computeEvaluationMatrixOnGivenPts(self, mesh, locs)


    def operateOnDenseMatrix(self, spaceDimension: 'int', myMatrix: 'DataArrayDouble') -> "void":
        """
        operateOnDenseMatrix(MEDCouplingFieldDiscretizationKriging self, int spaceDimension, DataArrayDouble myMatrix)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_operateOnDenseMatrix(self, spaceDimension, myMatrix)


    def performDrift(self, matr: 'DataArrayDouble', arr: 'DataArrayDouble') -> "PyObject *":
        """
        performDrift(MEDCouplingFieldDiscretizationKriging self, DataArrayDouble matr, DataArrayDouble arr) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_performDrift(self, matr, arr)


    def PerformDriftRect(matr: 'DataArrayDouble', arr: 'DataArrayDouble') -> "PyObject *":
        """
        PerformDriftRect(DataArrayDouble matr, DataArrayDouble arr) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_PerformDriftRect(matr, arr)

    PerformDriftRect = staticmethod(PerformDriftRect)

    def OperateOnDenseMatrixH3(myMatrix: 'DataArrayDouble') -> "void":
        """
        OperateOnDenseMatrixH3(DataArrayDouble myMatrix)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH3(myMatrix)

    OperateOnDenseMatrixH3 = staticmethod(OperateOnDenseMatrixH3)

    def OperateOnDenseMatrixH2Ln(myMatrix: 'DataArrayDouble') -> "void":
        """
        OperateOnDenseMatrixH2Ln(DataArrayDouble myMatrix)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH2Ln(myMatrix)

    OperateOnDenseMatrixH2Ln = staticmethod(OperateOnDenseMatrixH2Ln)
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingFieldDiscretizationKriging
    __del__ = lambda self: None
MEDCouplingFieldDiscretizationKriging_swigregister = _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_swigregister
MEDCouplingFieldDiscretizationKriging_swigregister(MEDCouplingFieldDiscretizationKriging)

def MEDCouplingFieldDiscretizationKriging_PerformDriftOfVec(arr: 'DataArrayDouble', isDrift: 'int') -> "MEDCoupling::DataArrayDouble *":
    """
    MEDCouplingFieldDiscretizationKriging_PerformDriftOfVec(DataArrayDouble arr, int isDrift) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_PerformDriftOfVec(arr, isDrift)

def MEDCouplingFieldDiscretizationKriging_PerformDriftRect(matr: 'DataArrayDouble', arr: 'DataArrayDouble') -> "PyObject *":
    """
    MEDCouplingFieldDiscretizationKriging_PerformDriftRect(DataArrayDouble matr, DataArrayDouble arr) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_PerformDriftRect(matr, arr)

def MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH3(myMatrix: 'DataArrayDouble') -> "void":
    """
    MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH3(DataArrayDouble myMatrix)

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH3(myMatrix)

def MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH2Ln(myMatrix: 'DataArrayDouble') -> "void":
    """
    MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH2Ln(DataArrayDouble myMatrix)

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH2Ln(myMatrix)

class MEDCouplingPointSet(MEDCouplingMesh):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingPointSet, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingPointSet, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setCoords(self, coords: 'DataArrayDouble') -> "void":
        """
        setCoords(MEDCouplingPointSet self, DataArrayDouble coords)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_setCoords(self, coords)


    def getCoordinatesAndOwner(self) -> "MEDCoupling::DataArrayDouble *":
        """
        getCoordinatesAndOwner(MEDCouplingPointSet self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_getCoordinatesAndOwner(self)


    def areCoordsEqual(self, other: 'MEDCouplingPointSet', prec: 'double') -> "bool":
        """
        areCoordsEqual(MEDCouplingPointSet self, MEDCouplingPointSet other, double prec) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_areCoordsEqual(self, other, prec)


    def zipCoords(self) -> "void":
        """
        zipCoords(MEDCouplingPointSet self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_zipCoords(self)


    def getCaracteristicDimension(self) -> "double":
        """
        getCaracteristicDimension(MEDCouplingPointSet self) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_getCaracteristicDimension(self)


    def recenterForMaxPrecision(self, eps: 'double') -> "void":
        """
        recenterForMaxPrecision(MEDCouplingPointSet self, double eps)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_recenterForMaxPrecision(self, eps)


    def changeSpaceDimension(self, newSpaceDim: 'int', dftVal: 'double'=0.) -> "void":
        """
        changeSpaceDimension(MEDCouplingPointSet self, int newSpaceDim, double dftVal=0.)
        changeSpaceDimension(MEDCouplingPointSet self, int newSpaceDim)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_changeSpaceDimension(self, newSpaceDim, dftVal)


    def tryToShareSameCoords(self, other: 'MEDCouplingPointSet', epsilon: 'double') -> "void":
        """
        tryToShareSameCoords(MEDCouplingPointSet self, MEDCouplingPointSet other, double epsilon)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_tryToShareSameCoords(self, other, epsilon)


    def shallowCopyConnectivityFrom(self, other: 'MEDCouplingPointSet') -> "void":
        """
        shallowCopyConnectivityFrom(MEDCouplingPointSet self, MEDCouplingPointSet other)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_shallowCopyConnectivityFrom(self, other)


    def buildPartOfMySelfSlice(self, start: 'int', end: 'int', step: 'int') -> "MEDCoupling::MEDCouplingPointSet *":
        """
        buildPartOfMySelfSlice(MEDCouplingPointSet self, int start, int end, int step) -> MEDCouplingPointSet

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_buildPartOfMySelfSlice(self, start, end, step)


    def tryToShareSameCoordsPermute(self, other: 'MEDCouplingPointSet', epsilon: 'double') -> "void":
        """
        tryToShareSameCoordsPermute(MEDCouplingPointSet self, MEDCouplingPointSet other, double epsilon)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_tryToShareSameCoordsPermute(self, other, epsilon)


    def MergeNodesArray(m1: 'MEDCouplingPointSet', m2: 'MEDCouplingPointSet') -> "MEDCoupling::DataArrayDouble *":
        """
        MergeNodesArray(MEDCouplingPointSet m1, MEDCouplingPointSet m2) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_MergeNodesArray(m1, m2)

    MergeNodesArray = staticmethod(MergeNodesArray)

    def BuildInstanceFromMeshType(type: 'MEDCoupling::MEDCouplingMeshType') -> "MEDCoupling::MEDCouplingPointSet *":
        """
        BuildInstanceFromMeshType(MEDCoupling::MEDCouplingMeshType type) -> MEDCouplingPointSet

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_BuildInstanceFromMeshType(type)

    BuildInstanceFromMeshType = staticmethod(BuildInstanceFromMeshType)

    def ComputeNbOfInteractionsWithSrcCells(srcMesh: 'MEDCouplingPointSet', trgMesh: 'MEDCouplingPointSet', eps: 'double') -> "MEDCoupling::DataArrayInt *":
        """
        ComputeNbOfInteractionsWithSrcCells(MEDCouplingPointSet srcMesh, MEDCouplingPointSet trgMesh, double eps) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_ComputeNbOfInteractionsWithSrcCells(srcMesh, trgMesh, eps)

    ComputeNbOfInteractionsWithSrcCells = staticmethod(ComputeNbOfInteractionsWithSrcCells)

    def computeFetchedNodeIds(self) -> "MEDCoupling::DataArrayInt *":
        """
        computeFetchedNodeIds(MEDCouplingPointSet self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_computeFetchedNodeIds(self)


    def getNumberOfNodesInCell(self, cellId: 'int') -> "int":
        """
        getNumberOfNodesInCell(MEDCouplingPointSet self, int cellId) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_getNumberOfNodesInCell(self, cellId)


    def buildBoundaryMesh(self, keepCoords: 'bool') -> "MEDCoupling::MEDCouplingPointSet *":
        """
        buildBoundaryMesh(MEDCouplingPointSet self, bool keepCoords) -> MEDCouplingPointSet

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_buildBoundaryMesh(self, keepCoords)


    def zipCoordsTraducer(self) -> "MEDCoupling::DataArrayInt *":
        """
        zipCoordsTraducer(MEDCouplingPointSet self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_zipCoordsTraducer(self)


    def findBoundaryNodes(self) -> "MEDCoupling::DataArrayInt *":
        """
        findBoundaryNodes(MEDCouplingPointSet self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_findBoundaryNodes(self)


    def zipConnectivityTraducer(self, compType: 'int', startCellId: 'int'=0) -> "MEDCoupling::DataArrayInt *":
        """
        zipConnectivityTraducer(MEDCouplingPointSet self, int compType, int startCellId=0) -> DataArrayInt
        zipConnectivityTraducer(MEDCouplingPointSet self, int compType) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_zipConnectivityTraducer(self, compType, startCellId)


    def mergeMyselfWithOnSameCoords(self, other: 'MEDCouplingPointSet') -> "MEDCoupling::MEDCouplingPointSet *":
        """
        mergeMyselfWithOnSameCoords(MEDCouplingPointSet self, MEDCouplingPointSet other) -> MEDCouplingPointSet

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_mergeMyselfWithOnSameCoords(self, other)


    def checkFullyDefined(self) -> "void":
        """
        checkFullyDefined(MEDCouplingPointSet self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_checkFullyDefined(self)


    def isEmptyMesh(self, tinyInfo: 'ivec') -> "bool":
        """
        isEmptyMesh(MEDCouplingPointSet self, ivec tinyInfo) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_isEmptyMesh(self, tinyInfo)


    def deepCopyConnectivityOnly(self) -> "MEDCoupling::MEDCouplingPointSet *":
        """
        deepCopyConnectivityOnly(MEDCouplingPointSet self) -> MEDCouplingPointSet

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_deepCopyConnectivityOnly(self)


    def getBoundingBoxForBBTree(self, arcDetEps: 'double'=1e-12) -> "MEDCoupling::DataArrayDouble *":
        """
        getBoundingBoxForBBTree(MEDCouplingPointSet self, double arcDetEps=1e-12) -> DataArrayDouble
        getBoundingBoxForBBTree(MEDCouplingPointSet self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_getBoundingBoxForBBTree(self, arcDetEps)


    def renumberNodesWithOffsetInConn(self, offset: 'int') -> "void":
        """
        renumberNodesWithOffsetInConn(MEDCouplingPointSet self, int offset)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_renumberNodesWithOffsetInConn(self, offset)


    def areAllNodesFetched(self) -> "bool":
        """
        areAllNodesFetched(MEDCouplingPointSet self) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_areAllNodesFetched(self)


    def computeDiameterField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        computeDiameterField(MEDCouplingPointSet self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_computeDiameterField(self)


    def invertOrientationOfAllCells(self) -> "void":
        """
        invertOrientationOfAllCells(MEDCouplingPointSet self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_invertOrientationOfAllCells(self)


    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingPointSet self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet___str__(self)


    def buildNewNumberingFromCommonNodesFormat(self, comm: 'DataArrayInt', commIndex: 'DataArrayInt') -> "PyObject *":
        """
        buildNewNumberingFromCommonNodesFormat(MEDCouplingPointSet self, DataArrayInt comm, DataArrayInt commIndex) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_buildNewNumberingFromCommonNodesFormat(self, comm, commIndex)


    def findCommonNodes(self, prec: 'double', limitTupleId: 'int'=-1) -> "PyObject *":
        """
        findCommonNodes(MEDCouplingPointSet self, double prec, int limitTupleId=-1) -> PyObject
        findCommonNodes(MEDCouplingPointSet self, double prec) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_findCommonNodes(self, prec, limitTupleId)


    def getCoords(self) -> "PyObject *":
        """
        getCoords(MEDCouplingPointSet self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_getCoords(self)


    def buildPartOfMySelf(self, li: 'PyObject *', keepCoords: 'bool'=True) -> "PyObject *":
        """
        buildPartOfMySelf(MEDCouplingPointSet self, PyObject * li, bool keepCoords=True) -> PyObject
        buildPartOfMySelf(MEDCouplingPointSet self, PyObject * li) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_buildPartOfMySelf(self, li, keepCoords)


    def buildPartOfMySelfNode(self, li: 'PyObject *', fullyIn: 'bool') -> "PyObject *":
        """
        buildPartOfMySelfNode(MEDCouplingPointSet self, PyObject * li, bool fullyIn) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_buildPartOfMySelfNode(self, li, fullyIn)


    def buildPartOfMySelfKeepCoords(self, li: 'PyObject *') -> "PyObject *":
        """
        buildPartOfMySelfKeepCoords(MEDCouplingPointSet self, PyObject * li) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_buildPartOfMySelfKeepCoords(self, li)


    def buildPartOfMySelfKeepCoordsSlice(self, start: 'int', end: 'int', step: 'int') -> "PyObject *":
        """
        buildPartOfMySelfKeepCoordsSlice(MEDCouplingPointSet self, int start, int end, int step) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_buildPartOfMySelfKeepCoordsSlice(self, start, end, step)


    def buildFacePartOfMySelfNode(self, li: 'PyObject *', fullyIn: 'bool') -> "PyObject *":
        """
        buildFacePartOfMySelfNode(MEDCouplingPointSet self, PyObject * li, bool fullyIn) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_buildFacePartOfMySelfNode(self, li, fullyIn)


    def renumberNodes(self, li: 'PyObject *', newNbOfNodes: 'int') -> "void":
        """
        renumberNodes(MEDCouplingPointSet self, PyObject * li, int newNbOfNodes)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_renumberNodes(self, li, newNbOfNodes)


    def renumberNodesCenter(self, li: 'PyObject *', newNbOfNodes: 'int') -> "void":
        """
        renumberNodesCenter(MEDCouplingPointSet self, PyObject * li, int newNbOfNodes)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_renumberNodesCenter(self, li, newNbOfNodes)


    def findNodesOnLine(self, pt: 'PyObject *', vec: 'PyObject *', eps: 'double') -> "PyObject *":
        """
        findNodesOnLine(MEDCouplingPointSet self, PyObject * pt, PyObject * vec, double eps) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_findNodesOnLine(self, pt, vec, eps)


    def findNodesOnPlane(self, pt: 'PyObject *', vec: 'PyObject *', eps: 'double') -> "PyObject *":
        """
        findNodesOnPlane(MEDCouplingPointSet self, PyObject * pt, PyObject * vec, double eps) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_findNodesOnPlane(self, pt, vec, eps)


    def getNodeIdsNearPoint(self, pt: 'PyObject *', eps: 'double') -> "PyObject *":
        """
        getNodeIdsNearPoint(MEDCouplingPointSet self, PyObject * pt, double eps) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_getNodeIdsNearPoint(self, pt, eps)


    def getNodeIdsNearPoints(self, *args) -> "PyObject *":
        """
        getNodeIdsNearPoints(MEDCouplingPointSet self, PyObject * pt, int nbOfPoints, double eps) -> PyObject
        getNodeIdsNearPoints(MEDCouplingPointSet self, PyObject * pt, double eps) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_getNodeIdsNearPoints(self, *args)


    def getCellsInBoundingBox(self, *args) -> "PyObject *":
        """
        getCellsInBoundingBox(MEDCouplingPointSet self, INTERP_KERNEL::DirectedBoundingBox const & bbox, double eps) -> DataArrayInt
        getCellsInBoundingBox(MEDCouplingPointSet self, PyObject * bbox, double eps) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_getCellsInBoundingBox(self, *args)


    def duplicateNodesInCoords(self, li: 'PyObject *') -> "void":
        """
        duplicateNodesInCoords(MEDCouplingPointSet self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_duplicateNodesInCoords(self, li)


    def findCommonCells(self, compType: 'int', startCellId: 'int'=0) -> "PyObject *":
        """
        findCommonCells(MEDCouplingPointSet self, int compType, int startCellId=0) -> PyObject
        findCommonCells(MEDCouplingPointSet self, int compType) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_findCommonCells(self, compType, startCellId)


    def renumberNodesInConn(self, li: 'PyObject *') -> "void":
        """
        renumberNodesInConn(MEDCouplingPointSet self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_renumberNodesInConn(self, li)


    def getNodeIdsInUse(self) -> "PyObject *":
        """
        getNodeIdsInUse(MEDCouplingPointSet self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_getNodeIdsInUse(self)


    def fillCellIdsToKeepFromNodeIds(self, li: 'PyObject *', fullyIn: 'bool') -> "MEDCoupling::DataArrayInt *":
        """
        fillCellIdsToKeepFromNodeIds(MEDCouplingPointSet self, PyObject * li, bool fullyIn) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_fillCellIdsToKeepFromNodeIds(self, li, fullyIn)


    def mergeNodes(self, precision: 'double') -> "PyObject *":
        """
        mergeNodes(MEDCouplingPointSet self, double precision) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_mergeNodes(self, precision)


    def mergeNodesCenter(self, precision: 'double') -> "PyObject *":
        """
        mergeNodesCenter(MEDCouplingPointSet self, double precision) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_mergeNodesCenter(self, precision)


    def getCellIdsLyingOnNodes(self, li: 'PyObject *', fullyIn: 'bool') -> "MEDCoupling::DataArrayInt *":
        """
        getCellIdsLyingOnNodes(MEDCouplingPointSet self, PyObject * li, bool fullyIn) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_getCellIdsLyingOnNodes(self, li, fullyIn)


    def __getitem__(self, listOrDataArrI: 'PyObject *') -> "MEDCoupling::MEDCouplingPointSet *":
        """
        __getitem__(MEDCouplingPointSet self, PyObject * listOrDataArrI) -> MEDCouplingPointSet

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet___getitem__(self, listOrDataArrI)


    def Rotate2DAlg(*args) -> "void":
        """
        Rotate2DAlg(PyObject * center, double angle, int nbNodes, PyObject * coords)
        Rotate2DAlg(PyObject * center, double angle, PyObject * coords)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_Rotate2DAlg(*args)

    Rotate2DAlg = staticmethod(Rotate2DAlg)

    def Rotate3DAlg(*args) -> "void":
        """
        Rotate3DAlg(PyObject * center, PyObject * vect, double angle, int nbNodes, PyObject * coords)
        Rotate3DAlg(PyObject * center, PyObject * vect, double angle, PyObject * coords)

        1
        """
        return _MEDCouplingCompat.MEDCouplingPointSet_Rotate3DAlg(*args)

    Rotate3DAlg = staticmethod(Rotate3DAlg)
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingPointSet
    __del__ = lambda self: None
MEDCouplingPointSet_swigregister = _MEDCouplingCompat.MEDCouplingPointSet_swigregister
MEDCouplingPointSet_swigregister(MEDCouplingPointSet)

def MEDCouplingPointSet_MergeNodesArray(m1: 'MEDCouplingPointSet', m2: 'MEDCouplingPointSet') -> "MEDCoupling::DataArrayDouble *":
    """
    MEDCouplingPointSet_MergeNodesArray(MEDCouplingPointSet m1, MEDCouplingPointSet m2) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.MEDCouplingPointSet_MergeNodesArray(m1, m2)

def MEDCouplingPointSet_BuildInstanceFromMeshType(type: 'MEDCoupling::MEDCouplingMeshType') -> "MEDCoupling::MEDCouplingPointSet *":
    """
    MEDCouplingPointSet_BuildInstanceFromMeshType(MEDCoupling::MEDCouplingMeshType type) -> MEDCouplingPointSet

    1
    """
    return _MEDCouplingCompat.MEDCouplingPointSet_BuildInstanceFromMeshType(type)

def MEDCouplingPointSet_ComputeNbOfInteractionsWithSrcCells(srcMesh: 'MEDCouplingPointSet', trgMesh: 'MEDCouplingPointSet', eps: 'double') -> "MEDCoupling::DataArrayInt *":
    """
    MEDCouplingPointSet_ComputeNbOfInteractionsWithSrcCells(MEDCouplingPointSet srcMesh, MEDCouplingPointSet trgMesh, double eps) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.MEDCouplingPointSet_ComputeNbOfInteractionsWithSrcCells(srcMesh, trgMesh, eps)

def MEDCouplingPointSet_Rotate2DAlg(*args) -> "void":
    """
    Rotate2DAlg(PyObject * center, double angle, int nbNodes, PyObject * coords)
    MEDCouplingPointSet_Rotate2DAlg(PyObject * center, double angle, PyObject * coords)

    1
    """
    return _MEDCouplingCompat.MEDCouplingPointSet_Rotate2DAlg(*args)

def MEDCouplingPointSet_Rotate3DAlg(*args) -> "void":
    """
    Rotate3DAlg(PyObject * center, PyObject * vect, double angle, int nbNodes, PyObject * coords)
    MEDCouplingPointSet_Rotate3DAlg(PyObject * center, PyObject * vect, double angle, PyObject * coords)

    1
    """
    return _MEDCouplingCompat.MEDCouplingPointSet_Rotate3DAlg(*args)

class MEDCouplingUMeshCell(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCell, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getType(self) -> "INTERP_KERNEL::NormalizedCellType":
        """
        getType(MEDCouplingUMeshCell self) -> INTERP_KERNEL::NormalizedCellType

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMeshCell_getType(self)


    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingUMeshCell self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMeshCell___str__(self)


    def getAllConn(self) -> "PyObject *":
        """
        getAllConn(MEDCouplingUMeshCell self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMeshCell_getAllConn(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingUMeshCell
    __del__ = lambda self: None
MEDCouplingUMeshCell_swigregister = _MEDCouplingCompat.MEDCouplingUMeshCell_swigregister
MEDCouplingUMeshCell_swigregister(MEDCouplingUMeshCell)

class MEDCouplingUMeshCellIterator(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def next(self) -> "PyObject *":
        """
        next(MEDCouplingUMeshCellIterator self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMeshCellIterator_next(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingUMeshCellIterator
    __del__ = lambda self: None
MEDCouplingUMeshCellIterator_swigregister = _MEDCouplingCompat.MEDCouplingUMeshCellIterator_swigregister
MEDCouplingUMeshCellIterator_swigregister(MEDCouplingUMeshCellIterator)

class MEDCouplingUMeshCellByTypeIterator(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellByTypeIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellByTypeIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingUMeshCellByTypeIterator
    __del__ = lambda self: None

    def next(self) -> "PyObject *":
        """
        next(MEDCouplingUMeshCellByTypeIterator self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMeshCellByTypeIterator_next(self)

MEDCouplingUMeshCellByTypeIterator_swigregister = _MEDCouplingCompat.MEDCouplingUMeshCellByTypeIterator_swigregister
MEDCouplingUMeshCellByTypeIterator_swigregister(MEDCouplingUMeshCellByTypeIterator)

class MEDCouplingUMeshCellByTypeEntry(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellByTypeEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellByTypeEntry, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingUMeshCellByTypeEntry
    __del__ = lambda self: None

    def __iter__(self) -> "MEDCoupling::MEDCouplingUMeshCellByTypeIterator *":
        """
        __iter__(MEDCouplingUMeshCellByTypeEntry self) -> MEDCouplingUMeshCellByTypeIterator

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMeshCellByTypeEntry___iter__(self)

MEDCouplingUMeshCellByTypeEntry_swigregister = _MEDCouplingCompat.MEDCouplingUMeshCellByTypeEntry_swigregister
MEDCouplingUMeshCellByTypeEntry_swigregister(MEDCouplingUMeshCellByTypeEntry)

class MEDCouplingUMeshCellEntry(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMeshCellEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMeshCellEntry, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getType(self) -> "INTERP_KERNEL::NormalizedCellType":
        """
        getType(MEDCouplingUMeshCellEntry self) -> INTERP_KERNEL::NormalizedCellType

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMeshCellEntry_getType(self)


    def getNumberOfElems(self) -> "int":
        """
        getNumberOfElems(MEDCouplingUMeshCellEntry self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMeshCellEntry_getNumberOfElems(self)


    def __iter__(self) -> "MEDCoupling::MEDCouplingUMeshCellIterator *":
        """
        __iter__(MEDCouplingUMeshCellEntry self) -> MEDCouplingUMeshCellIterator

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMeshCellEntry___iter__(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingUMeshCellEntry
    __del__ = lambda self: None
MEDCouplingUMeshCellEntry_swigregister = _MEDCouplingCompat.MEDCouplingUMeshCellEntry_swigregister
MEDCouplingUMeshCellEntry_swigregister(MEDCouplingUMeshCellEntry)

class MEDCouplingUMesh(MEDCouplingPointSet):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingPointSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingUMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingPointSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingUMesh, name)

    def New(*args) -> "MEDCoupling::MEDCouplingUMesh *":
        """
        New() -> MEDCouplingUMesh
        New(char const * meshName, int meshDim) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_New(*args)

    New = staticmethod(New)

    def checkConsistencyLight(self) -> "void":
        """
        checkConsistencyLight(MEDCouplingUMesh self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_checkConsistencyLight(self)


    def setMeshDimension(self, meshDim: 'int') -> "void":
        """
        setMeshDimension(MEDCouplingUMesh self, int meshDim)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_setMeshDimension(self, meshDim)


    def allocateCells(self, nbOfCells: 'int'=0) -> "void":
        """
        allocateCells(MEDCouplingUMesh self, int nbOfCells=0)
        allocateCells(MEDCouplingUMesh self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_allocateCells(self, nbOfCells)


    def finishInsertingCells(self) -> "void":
        """
        finishInsertingCells(MEDCouplingUMesh self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_finishInsertingCells(self)


    def cellsByType(self) -> "MEDCoupling::MEDCouplingUMeshCellByTypeEntry *":
        """
        cellsByType(MEDCouplingUMesh self) -> MEDCouplingUMeshCellByTypeEntry

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_cellsByType(self)


    def setConnectivity(self, conn: 'DataArrayInt', connIndex: 'DataArrayInt', isComputingTypes: 'bool'=True) -> "void":
        """
        setConnectivity(MEDCouplingUMesh self, DataArrayInt conn, DataArrayInt connIndex, bool isComputingTypes=True)
        setConnectivity(MEDCouplingUMesh self, DataArrayInt conn, DataArrayInt connIndex)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_setConnectivity(self, conn, connIndex, isComputingTypes)


    def getTypeOfCell(self, cellId: 'int') -> "INTERP_KERNEL::NormalizedCellType":
        """
        getTypeOfCell(MEDCouplingUMesh self, int cellId) -> INTERP_KERNEL::NormalizedCellType

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getTypeOfCell(self, cellId)


    def setPartOfMySelfSlice(self, start: 'int', end: 'int', step: 'int', otherOnSameCoordsThanThis: 'MEDCouplingUMesh') -> "void":
        """
        setPartOfMySelfSlice(MEDCouplingUMesh self, int start, int end, int step, MEDCouplingUMesh otherOnSameCoordsThanThis)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_setPartOfMySelfSlice(self, start, end, step, otherOnSameCoordsThanThis)


    def getNodalConnectivityArrayLen(self) -> "int":
        """
        getNodalConnectivityArrayLen(MEDCouplingUMesh self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getNodalConnectivityArrayLen(self)


    def computeTypes(self) -> "void":
        """
        computeTypes(MEDCouplingUMesh self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_computeTypes(self)


    def reprConnectivityOfThis(self) -> "std::string":
        """
        reprConnectivityOfThis(MEDCouplingUMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_reprConnectivityOfThis(self)


    def buildSetInstanceFromThis(self, spaceDim: 'int') -> "MEDCoupling::MEDCouplingUMesh *":
        """
        buildSetInstanceFromThis(MEDCouplingUMesh self, int spaceDim) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_buildSetInstanceFromThis(self, spaceDim)


    def conformize2D(self, eps: 'double') -> "MEDCoupling::DataArrayInt *":
        """
        conformize2D(MEDCouplingUMesh self, double eps) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_conformize2D(self, eps)


    def conformize3D(self, eps: 'double') -> "MEDCoupling::DataArrayInt *":
        """
        conformize3D(MEDCouplingUMesh self, double eps) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_conformize3D(self, eps)


    def colinearize2D(self, eps: 'double') -> "MEDCoupling::DataArrayInt *":
        """
        colinearize2D(MEDCouplingUMesh self, double eps) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_colinearize2D(self, eps)


    def colinearizeKeepingConform2D(self, eps: 'double') -> "MEDCoupling::DataArrayInt *":
        """
        colinearizeKeepingConform2D(MEDCouplingUMesh self, double eps) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_colinearizeKeepingConform2D(self, eps)


    def shiftNodeNumbersInConn(self, delta: 'int') -> "void":
        """
        shiftNodeNumbersInConn(MEDCouplingUMesh self, int delta)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_shiftNodeNumbersInConn(self, delta)


    def getQuadraticStatus(self) -> "std::vector< bool,std::allocator< bool > >":
        """
        getQuadraticStatus(MEDCouplingUMesh self) -> std::vector< bool,std::allocator< bool > >

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getQuadraticStatus(self)


    def findCellIdsOnBoundary(self) -> "MEDCoupling::DataArrayInt *":
        """
        findCellIdsOnBoundary(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_findCellIdsOnBoundary(self)


    def computeSkin(self) -> "MEDCoupling::MEDCouplingUMesh *":
        """
        computeSkin(MEDCouplingUMesh self) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_computeSkin(self)


    def checkConsecutiveCellTypes(self) -> "bool":
        """
        checkConsecutiveCellTypes(MEDCouplingUMesh self) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_checkConsecutiveCellTypes(self)


    def checkConsecutiveCellTypesForMEDFileFrmt(self) -> "bool":
        """
        checkConsecutiveCellTypesForMEDFileFrmt(MEDCouplingUMesh self) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_checkConsecutiveCellTypesForMEDFileFrmt(self)


    def rearrange2ConsecutiveCellTypes(self) -> "MEDCoupling::DataArrayInt *":
        """
        rearrange2ConsecutiveCellTypes(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_rearrange2ConsecutiveCellTypes(self)


    def sortCellsInMEDFileFrmt(self) -> "MEDCoupling::DataArrayInt *":
        """
        sortCellsInMEDFileFrmt(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_sortCellsInMEDFileFrmt(self)


    def getRenumArrForMEDFileFrmt(self) -> "MEDCoupling::DataArrayInt *":
        """
        getRenumArrForMEDFileFrmt(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getRenumArrForMEDFileFrmt(self)


    def convertCellArrayPerGeoType(self, da: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        convertCellArrayPerGeoType(MEDCouplingUMesh self, DataArrayInt da) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_convertCellArrayPerGeoType(self, da)


    def orientCorrectlyPolyhedrons(self) -> "void":
        """
        orientCorrectlyPolyhedrons(MEDCouplingUMesh self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_orientCorrectlyPolyhedrons(self)


    def isPresenceOfQuadratic(self) -> "bool":
        """
        isPresenceOfQuadratic(MEDCouplingUMesh self) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_isPresenceOfQuadratic(self)


    def isFullyQuadratic(self) -> "bool":
        """
        isFullyQuadratic(MEDCouplingUMesh self) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_isFullyQuadratic(self)


    def buildDirectionVectorField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        buildDirectionVectorField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_buildDirectionVectorField(self)


    def isContiguous1D(self) -> "bool":
        """
        isContiguous1D(MEDCouplingUMesh self) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_isContiguous1D(self)


    def tessellate2D(self, eps: 'double') -> "void":
        """
        tessellate2D(MEDCouplingUMesh self, double eps)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_tessellate2D(self, eps)


    def convertQuadraticCellsToLinear(self) -> "void":
        """
        convertQuadraticCellsToLinear(MEDCouplingUMesh self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_convertQuadraticCellsToLinear(self)


    def convertLinearCellsToQuadratic(self, conversionType: 'int'=0) -> "MEDCoupling::DataArrayInt *":
        """
        convertLinearCellsToQuadratic(MEDCouplingUMesh self, int conversionType=0) -> DataArrayInt
        convertLinearCellsToQuadratic(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_convertLinearCellsToQuadratic(self, conversionType)


    def convertDegeneratedCells(self) -> "void":
        """
        convertDegeneratedCells(MEDCouplingUMesh self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_convertDegeneratedCells(self)


    def convertDegeneratedCellsAndRemoveFlatOnes(self) -> "MEDCoupling::DataArrayInt *":
        """
        convertDegeneratedCellsAndRemoveFlatOnes(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_convertDegeneratedCellsAndRemoveFlatOnes(self)


    def removeDegenerated1DCells(self) -> "bool":
        """
        removeDegenerated1DCells(MEDCouplingUMesh self) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_removeDegenerated1DCells(self)


    def areOnlySimplexCells(self) -> "bool":
        """
        areOnlySimplexCells(MEDCouplingUMesh self) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_areOnlySimplexCells(self)


    def getEdgeRatioField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        getEdgeRatioField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getEdgeRatioField(self)


    def getAspectRatioField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        getAspectRatioField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getAspectRatioField(self)


    def getWarpField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        getWarpField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getWarpField(self)


    def getSkewField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        getSkewField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getSkewField(self)


    def computePlaneEquationOf3DFaces(self) -> "MEDCoupling::DataArrayDouble *":
        """
        computePlaneEquationOf3DFaces(MEDCouplingUMesh self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_computePlaneEquationOf3DFaces(self)


    def convexEnvelop2D(self) -> "MEDCoupling::DataArrayInt *":
        """
        convexEnvelop2D(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_convexEnvelop2D(self)


    def cppRepr(self) -> "std::string":
        """
        cppRepr(MEDCouplingUMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_cppRepr(self)


    def findAndCorrectBadOriented3DExtrudedCells(self) -> "MEDCoupling::DataArrayInt *":
        """
        findAndCorrectBadOriented3DExtrudedCells(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_findAndCorrectBadOriented3DExtrudedCells(self)


    def findAndCorrectBadOriented3DCells(self) -> "MEDCoupling::DataArrayInt *":
        """
        findAndCorrectBadOriented3DCells(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_findAndCorrectBadOriented3DCells(self)


    def convertIntoSingleGeoTypeMesh(self) -> "MEDCoupling::MEDCoupling1GTUMesh *":
        """
        convertIntoSingleGeoTypeMesh(MEDCouplingUMesh self) -> MEDCoupling1GTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_convertIntoSingleGeoTypeMesh(self)


    def generateGraph(self) -> "MEDCoupling::MEDCouplingSkyLineArray *":
        """
        generateGraph(MEDCouplingUMesh self) -> MEDCouplingSkyLineArray

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_generateGraph(self)


    def convertNodalConnectivityToStaticGeoTypeMesh(self) -> "MEDCoupling::DataArrayInt *":
        """
        convertNodalConnectivityToStaticGeoTypeMesh(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_convertNodalConnectivityToStaticGeoTypeMesh(self)


    def buildUnionOf2DMesh(self) -> "MEDCoupling::DataArrayInt *":
        """
        buildUnionOf2DMesh(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_buildUnionOf2DMesh(self)


    def buildUnionOf3DMesh(self) -> "MEDCoupling::DataArrayInt *":
        """
        buildUnionOf3DMesh(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_buildUnionOf3DMesh(self)


    def orderConsecutiveCells1D(self) -> "MEDCoupling::DataArrayInt *":
        """
        orderConsecutiveCells1D(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_orderConsecutiveCells1D(self)


    def getBoundingBoxForBBTreeFast(self) -> "MEDCoupling::DataArrayDouble *":
        """
        getBoundingBoxForBBTreeFast(MEDCouplingUMesh self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getBoundingBoxForBBTreeFast(self)


    def getBoundingBoxForBBTree2DQuadratic(self, arcDetEps: 'double'=1e-12) -> "MEDCoupling::DataArrayDouble *":
        """
        getBoundingBoxForBBTree2DQuadratic(MEDCouplingUMesh self, double arcDetEps=1e-12) -> DataArrayDouble
        getBoundingBoxForBBTree2DQuadratic(MEDCouplingUMesh self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getBoundingBoxForBBTree2DQuadratic(self, arcDetEps)


    def getBoundingBoxForBBTree1DQuadratic(self, arcDetEps: 'double'=1e-12) -> "MEDCoupling::DataArrayDouble *":
        """
        getBoundingBoxForBBTree1DQuadratic(MEDCouplingUMesh self, double arcDetEps=1e-12) -> DataArrayDouble
        getBoundingBoxForBBTree1DQuadratic(MEDCouplingUMesh self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getBoundingBoxForBBTree1DQuadratic(self, arcDetEps)


    def changeOrientationOfCells(self) -> "void":
        """
        changeOrientationOfCells(MEDCouplingUMesh self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_changeOrientationOfCells(self)


    def computeCellCenterOfMassWithPrecision(self, eps: 'double') -> "MEDCoupling::DataArrayDouble *":
        """
        computeCellCenterOfMassWithPrecision(MEDCouplingUMesh self, double eps) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_computeCellCenterOfMassWithPrecision(self, eps)


    def split2DCells(self, desc: 'DataArrayInt', descI: 'DataArrayInt', subNodesInSeg: 'DataArrayInt', subNodesInSegI: 'DataArrayInt', midOpt: 'DataArrayInt'=None, midOptI: 'DataArrayInt'=None) -> "int":
        """
        split2DCells(MEDCouplingUMesh self, DataArrayInt desc, DataArrayInt descI, DataArrayInt subNodesInSeg, DataArrayInt subNodesInSegI, DataArrayInt midOpt=None, DataArrayInt midOptI=None) -> int
        split2DCells(MEDCouplingUMesh self, DataArrayInt desc, DataArrayInt descI, DataArrayInt subNodesInSeg, DataArrayInt subNodesInSegI, DataArrayInt midOpt=None) -> int
        split2DCells(MEDCouplingUMesh self, DataArrayInt desc, DataArrayInt descI, DataArrayInt subNodesInSeg, DataArrayInt subNodesInSegI) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_split2DCells(self, desc, descI, subNodesInSeg, subNodesInSegI, midOpt, midOptI)


    def Build0DMeshFromCoords(da: 'DataArrayDouble') -> "MEDCoupling::MEDCouplingUMesh *":
        """
        Build0DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_Build0DMeshFromCoords(da)

    Build0DMeshFromCoords = staticmethod(Build0DMeshFromCoords)

    def ComputeSpreadZoneGradually(arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        ComputeSpreadZoneGradually(DataArrayInt arrIn, DataArrayInt arrIndxIn) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_ComputeSpreadZoneGradually(arrIn, arrIndxIn)

    ComputeSpreadZoneGradually = staticmethod(ComputeSpreadZoneGradually)

    def ComputeRangesFromTypeDistribution(code: 'ivec') -> "MEDCoupling::DataArrayInt *":
        """
        ComputeRangesFromTypeDistribution(ivec code) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_ComputeRangesFromTypeDistribution(code)

    ComputeRangesFromTypeDistribution = staticmethod(ComputeRangesFromTypeDistribution)

    def __init__(self, *args):
        """
        __init__(MEDCoupling::MEDCouplingUMesh self) -> MEDCouplingUMesh
        __init__(MEDCoupling::MEDCouplingUMesh self, char const * meshName, int meshDim) -> MEDCouplingUMesh

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingUMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingUMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh___str__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(MEDCouplingUMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh___repr__(self)


    def __iter__(self) -> "MEDCoupling::MEDCouplingUMeshCellIterator *":
        """
        __iter__(MEDCouplingUMesh self) -> MEDCouplingUMeshCellIterator

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh___iter__(self)


    def Build1DMeshFromCoords(da: 'DataArrayDouble') -> "MEDCoupling::MEDCouplingUMesh *":
        """
        Build1DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_Build1DMeshFromCoords(da)

    Build1DMeshFromCoords = staticmethod(Build1DMeshFromCoords)

    def getAllGeoTypesSorted(self) -> "PyObject *":
        """
        getAllGeoTypesSorted(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getAllGeoTypesSorted(self)


    def setPartOfMySelf(self, li: 'PyObject *', otherOnSameCoordsThanThis: 'MEDCouplingUMesh') -> "void":
        """
        setPartOfMySelf(MEDCouplingUMesh self, PyObject * li, MEDCouplingUMesh otherOnSameCoordsThanThis)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_setPartOfMySelf(self, li, otherOnSameCoordsThanThis)


    def __setitem__(self, li: 'PyObject *', otherOnSameCoordsThanThis: 'MEDCouplingUMesh') -> "void":
        """
        __setitem__(MEDCouplingUMesh self, PyObject * li, MEDCouplingUMesh otherOnSameCoordsThanThis)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh___setitem__(self, li, otherOnSameCoordsThanThis)


    def insertNextCell(self, *args) -> "void":
        """
        insertNextCell(MEDCouplingUMesh self, INTERP_KERNEL::NormalizedCellType type, int size, PyObject * li)
        insertNextCell(MEDCouplingUMesh self, INTERP_KERNEL::NormalizedCellType type, PyObject * li)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_insertNextCell(self, *args)


    def getNodalConnectivity(self) -> "MEDCoupling::DataArrayInt *":
        """
        getNodalConnectivity(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getNodalConnectivity(self)


    def getNodalConnectivityIndex(self) -> "MEDCoupling::DataArrayInt *":
        """
        getNodalConnectivityIndex(MEDCouplingUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getNodalConnectivityIndex(self)


    def ComputeSpreadZoneGraduallyFromSeed(seed: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt', nbOfDepthPeeling: 'int'=-1) -> "PyObject *":
        """
        ComputeSpreadZoneGraduallyFromSeed(PyObject * seed, DataArrayInt arrIn, DataArrayInt arrIndxIn, int nbOfDepthPeeling=-1) -> PyObject
        ComputeSpreadZoneGraduallyFromSeed(PyObject * seed, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_ComputeSpreadZoneGraduallyFromSeed(seed, arrIn, arrIndxIn, nbOfDepthPeeling)

    ComputeSpreadZoneGraduallyFromSeed = staticmethod(ComputeSpreadZoneGraduallyFromSeed)

    def FindCommonCellsAlg(compType: 'int', startCellId: 'int', nodal: 'DataArrayInt', nodalI: 'DataArrayInt', revNodal: 'DataArrayInt', revNodalI: 'DataArrayInt') -> "PyObject *":
        """
        FindCommonCellsAlg(int compType, int startCellId, DataArrayInt nodal, DataArrayInt nodalI, DataArrayInt revNodal, DataArrayInt revNodalI) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_FindCommonCellsAlg(compType, startCellId, nodal, nodalI, revNodal, revNodalI)

    FindCommonCellsAlg = staticmethod(FindCommonCellsAlg)

    def distanceToPoint(self, point: 'PyObject *') -> "PyObject *":
        """
        distanceToPoint(MEDCouplingUMesh self, PyObject * point) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_distanceToPoint(self, point)


    def distanceToPoints(self, pts: 'DataArrayDouble') -> "PyObject *":
        """
        distanceToPoints(MEDCouplingUMesh self, DataArrayDouble pts) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_distanceToPoints(self, pts)


    def tetrahedrize(self, policy: 'int') -> "PyObject *":
        """
        tetrahedrize(MEDCouplingUMesh self, int policy) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_tetrahedrize(self, policy)


    def checkButterflyCells(self, eps: 'double'=1e-12) -> "PyObject *":
        """
        checkButterflyCells(MEDCouplingUMesh self, double eps=1e-12) -> PyObject
        checkButterflyCells(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_checkButterflyCells(self, eps)


    def splitByType(self) -> "PyObject *":
        """
        splitByType(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_splitByType(self)


    def partitionBySpreadZone(self) -> "PyObject *":
        """
        partitionBySpreadZone(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_partitionBySpreadZone(self)


    def PartitionBySpreadZone(arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt') -> "PyObject *":
        """
        PartitionBySpreadZone(DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_PartitionBySpreadZone(arrIn, arrIndxIn)

    PartitionBySpreadZone = staticmethod(PartitionBySpreadZone)

    def keepSpecifiedCells(self, type: 'INTERP_KERNEL::NormalizedCellType', ids: 'PyObject *') -> "PyObject *":
        """
        keepSpecifiedCells(MEDCouplingUMesh self, INTERP_KERNEL::NormalizedCellType type, PyObject * ids) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_keepSpecifiedCells(self, type, ids)


    def checkConsecutiveCellTypesAndOrder(self, li: 'PyObject *') -> "bool":
        """
        checkConsecutiveCellTypesAndOrder(MEDCouplingUMesh self, PyObject * li) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_checkConsecutiveCellTypesAndOrder(self, li)


    def getRenumArrForConsecutiveCellTypesSpec(self, li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        getRenumArrForConsecutiveCellTypesSpec(MEDCouplingUMesh self, PyObject * li) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getRenumArrForConsecutiveCellTypesSpec(self, li)


    def findNodesToDuplicate(self, otherDimM1OnSameCoords: 'MEDCouplingUMesh') -> "PyObject *":
        """
        findNodesToDuplicate(MEDCouplingUMesh self, MEDCouplingUMesh otherDimM1OnSameCoords) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_findNodesToDuplicate(self, otherDimM1OnSameCoords)


    def findCellIdsLyingOn(self, otherDimM1OnSameCoords: 'MEDCouplingUMesh') -> "PyObject *":
        """
        findCellIdsLyingOn(MEDCouplingUMesh self, MEDCouplingUMesh otherDimM1OnSameCoords) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_findCellIdsLyingOn(self, otherDimM1OnSameCoords)


    def duplicateNodes(self, li: 'PyObject *') -> "void":
        """
        duplicateNodes(MEDCouplingUMesh self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_duplicateNodes(self, li)


    def duplicateNodesInConn(self, li: 'PyObject *', offset: 'int') -> "void":
        """
        duplicateNodesInConn(MEDCouplingUMesh self, PyObject * li, int offset)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_duplicateNodesInConn(self, li, offset)


    def attractSeg3MidPtsAroundNodes(self, ratio: 'double', nodeIds: 'PyObject *') -> "void":
        """
        attractSeg3MidPtsAroundNodes(MEDCouplingUMesh self, double ratio, PyObject * nodeIds)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_attractSeg3MidPtsAroundNodes(self, ratio, nodeIds)


    def getLevArrPerCellTypes(self, li: 'PyObject *') -> "PyObject *":
        """
        getLevArrPerCellTypes(MEDCouplingUMesh self, PyObject * li) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getLevArrPerCellTypes(self, li)


    def convertNodalConnectivityToDynamicGeoTypeMesh(self) -> "PyObject *":
        """
        convertNodalConnectivityToDynamicGeoTypeMesh(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_convertNodalConnectivityToDynamicGeoTypeMesh(self)


    def AggregateSortedByTypeMeshesOnSameCoords(ms: 'PyObject *') -> "PyObject *":
        """
        AggregateSortedByTypeMeshesOnSameCoords(PyObject * ms) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(ms)

    AggregateSortedByTypeMeshesOnSameCoords = staticmethod(AggregateSortedByTypeMeshesOnSameCoords)

    def MergeUMeshesOnSameCoords(*args) -> "PyObject *":
        """
        MergeUMeshesOnSameCoords(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
        MergeUMeshesOnSameCoords(PyObject * ms) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args)

    MergeUMeshesOnSameCoords = staticmethod(MergeUMeshesOnSameCoords)

    def FuseUMeshesOnSameCoords(ms: 'PyObject *', compType: 'int') -> "PyObject *":
        """
        FuseUMeshesOnSameCoords(PyObject * ms, int compType) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_FuseUMeshesOnSameCoords(ms, compType)

    FuseUMeshesOnSameCoords = staticmethod(FuseUMeshesOnSameCoords)

    def PutUMeshesOnSameAggregatedCoords(ms: 'PyObject *') -> "void":
        """
        PutUMeshesOnSameAggregatedCoords(PyObject * ms)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(ms)

    PutUMeshesOnSameAggregatedCoords = staticmethod(PutUMeshesOnSameAggregatedCoords)

    def MergeNodesOnUMeshesSharingSameCoords(ms: 'PyObject *', eps: 'double') -> "void":
        """
        MergeNodesOnUMeshesSharingSameCoords(PyObject * ms, double eps)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(ms, eps)

    MergeNodesOnUMeshesSharingSameCoords = staticmethod(MergeNodesOnUMeshesSharingSameCoords)

    def are2DCellsNotCorrectlyOriented(self, vec: 'PyObject *', polyOnly: 'bool') -> "PyObject *":
        """
        are2DCellsNotCorrectlyOriented(MEDCouplingUMesh self, PyObject * vec, bool polyOnly) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_are2DCellsNotCorrectlyOriented(self, vec, polyOnly)


    def orientCorrectly2DCells(self, vec: 'PyObject *', polyOnly: 'bool') -> "void":
        """
        orientCorrectly2DCells(MEDCouplingUMesh self, PyObject * vec, bool polyOnly)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_orientCorrectly2DCells(self, vec, polyOnly)


    def arePolyhedronsNotCorrectlyOriented(self) -> "PyObject *":
        """
        arePolyhedronsNotCorrectlyOriented(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_arePolyhedronsNotCorrectlyOriented(self)


    def getFastAveragePlaneOfThis(self) -> "PyObject *":
        """
        getFastAveragePlaneOfThis(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getFastAveragePlaneOfThis(self)


    def MergeUMeshes(*args) -> "MEDCoupling::MEDCouplingUMesh *":
        """
        MergeUMeshes(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
        MergeUMeshes(PyObject * li) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_MergeUMeshes(*args)

    MergeUMeshes = staticmethod(MergeUMeshes)

    def areCellsIncludedIn(self, other: 'MEDCouplingUMesh', compType: 'int') -> "PyObject *":
        """
        areCellsIncludedIn(MEDCouplingUMesh self, MEDCouplingUMesh other, int compType) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_areCellsIncludedIn(self, other, compType)


    def areCellsIncludedInPolicy7(self, other: 'MEDCouplingUMesh') -> "PyObject *":
        """
        areCellsIncludedInPolicy7(MEDCouplingUMesh self, MEDCouplingUMesh other) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_areCellsIncludedInPolicy7(self, other)


    def explode3DMeshTo1D(self, *args) -> "PyObject *":
        """
        explode3DMeshTo1D(MEDCouplingUMesh self, DataArrayInt desc, DataArrayInt descIndx, DataArrayInt revDesc, DataArrayInt revDescIndx) -> MEDCouplingUMesh
        explode3DMeshTo1D(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_explode3DMeshTo1D(self, *args)


    def explodeIntoEdges(self) -> "PyObject *":
        """
        explodeIntoEdges(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_explodeIntoEdges(self)


    def explodeMeshIntoMicroEdges(self, *args) -> "PyObject *":
        """
        explodeMeshIntoMicroEdges(MEDCouplingUMesh self, DataArrayInt desc, DataArrayInt descIndx, DataArrayInt revDesc, DataArrayInt revDescIndx) -> MEDCouplingUMesh
        explodeMeshIntoMicroEdges(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_explodeMeshIntoMicroEdges(self, *args)


    def buildDescendingConnectivity(self, *args) -> "PyObject *":
        """
        buildDescendingConnectivity(MEDCouplingUMesh self, DataArrayInt desc, DataArrayInt descIndx, DataArrayInt revDesc, DataArrayInt revDescIndx) -> MEDCouplingUMesh
        buildDescendingConnectivity(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_buildDescendingConnectivity(self, *args)


    def buildDescendingConnectivity2(self, *args) -> "PyObject *":
        """
        buildDescendingConnectivity2(MEDCouplingUMesh self, DataArrayInt desc, DataArrayInt descIndx, DataArrayInt revDesc, DataArrayInt revDescIndx) -> MEDCouplingUMesh
        buildDescendingConnectivity2(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_buildDescendingConnectivity2(self, *args)


    def computeNeighborsOfCells(self) -> "PyObject *":
        """
        computeNeighborsOfCells(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_computeNeighborsOfCells(self)


    def computeNeighborsOfNodes(self) -> "PyObject *":
        """
        computeNeighborsOfNodes(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_computeNeighborsOfNodes(self)


    def computeEnlargedNeighborsOfNodes(self) -> "PyObject *":
        """
        computeEnlargedNeighborsOfNodes(MEDCouplingUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_computeEnlargedNeighborsOfNodes(self)


    def computeCellNeighborhoodFromNodesOne(self, nodeNeigh: 'DataArrayInt', nodeNeighI: 'DataArrayInt') -> "PyObject *":
        """
        computeCellNeighborhoodFromNodesOne(MEDCouplingUMesh self, DataArrayInt nodeNeigh, DataArrayInt nodeNeighI) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_computeCellNeighborhoodFromNodesOne(self, nodeNeigh, nodeNeighI)


    def ComputeNeighborsOfCellsAdv(desc: 'DataArrayInt', descI: 'DataArrayInt', revDesc: 'DataArrayInt', revDescI: 'DataArrayInt') -> "PyObject *":
        """
        ComputeNeighborsOfCellsAdv(DataArrayInt desc, DataArrayInt descI, DataArrayInt revDesc, DataArrayInt revDescI) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(desc, descI, revDesc, revDescI)

    ComputeNeighborsOfCellsAdv = staticmethod(ComputeNeighborsOfCellsAdv)

    def emulateMEDMEMBDC(self, nM1LevMesh: 'MEDCouplingUMesh') -> "PyObject *":
        """
        emulateMEDMEMBDC(MEDCouplingUMesh self, MEDCouplingUMesh nM1LevMesh) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_emulateMEDMEMBDC(self, nM1LevMesh)


    def getPartBarycenterAndOwner(self, da: 'DataArrayInt') -> "MEDCoupling::DataArrayDouble *":
        """
        getPartBarycenterAndOwner(MEDCouplingUMesh self, DataArrayInt da) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getPartBarycenterAndOwner(self, da)


    def getPartMeasureField(self, isAbs: 'bool', da: 'DataArrayInt') -> "MEDCoupling::DataArrayDouble *":
        """
        getPartMeasureField(MEDCouplingUMesh self, bool isAbs, DataArrayInt da) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getPartMeasureField(self, isAbs, da)


    def buildPartOrthogonalField(self, da: 'DataArrayInt') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        buildPartOrthogonalField(MEDCouplingUMesh self, DataArrayInt da) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_buildPartOrthogonalField(self, da)


    def getTypesOfPart(self, da: 'DataArrayInt') -> "PyObject *":
        """
        getTypesOfPart(MEDCouplingUMesh self, DataArrayInt da) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getTypesOfPart(self, da)


    def keepCellIdsByType(self, type: 'INTERP_KERNEL::NormalizedCellType', da: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        """
        keepCellIdsByType(MEDCouplingUMesh self, INTERP_KERNEL::NormalizedCellType type, DataArrayInt da) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_keepCellIdsByType(self, type, da)


    def Intersect2DMeshes(m1: 'MEDCouplingUMesh', m2: 'MEDCouplingUMesh', eps: 'double') -> "PyObject *":
        """
        Intersect2DMeshes(MEDCouplingUMesh m1, MEDCouplingUMesh m2, double eps) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_Intersect2DMeshes(m1, m2, eps)

    Intersect2DMeshes = staticmethod(Intersect2DMeshes)

    def Intersect2DMeshWith1DLine(mesh2D: 'MEDCouplingUMesh', mesh1D: 'MEDCouplingUMesh', eps: 'double') -> "PyObject *":
        """
        Intersect2DMeshWith1DLine(MEDCouplingUMesh mesh2D, MEDCouplingUMesh mesh1D, double eps) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_Intersect2DMeshWith1DLine(mesh2D, mesh1D, eps)

    Intersect2DMeshWith1DLine = staticmethod(Intersect2DMeshWith1DLine)

    def buildSlice3D(self, origin: 'PyObject *', vec: 'PyObject *', eps: 'double') -> "PyObject *":
        """
        buildSlice3D(MEDCouplingUMesh self, PyObject * origin, PyObject * vec, double eps) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_buildSlice3D(self, origin, vec, eps)


    def buildSlice3DSurf(self, origin: 'PyObject *', vec: 'PyObject *', eps: 'double') -> "PyObject *":
        """
        buildSlice3DSurf(MEDCouplingUMesh self, PyObject * origin, PyObject * vec, double eps) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_buildSlice3DSurf(self, origin, vec, eps)


    def clipSingle3DCellByPlane(self, origin: 'PyObject *', vec: 'PyObject *', eps: 'double') -> "MEDCoupling::MEDCouplingUMesh *":
        """
        clipSingle3DCellByPlane(MEDCouplingUMesh self, PyObject * origin, PyObject * vec, double eps) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_clipSingle3DCellByPlane(self, origin, vec, eps)


    def getCellIdsCrossingPlane(self, origin: 'PyObject *', vec: 'PyObject *', eps: 'double') -> "MEDCoupling::DataArrayInt *":
        """
        getCellIdsCrossingPlane(MEDCouplingUMesh self, PyObject * origin, PyObject * vec, double eps) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_getCellIdsCrossingPlane(self, origin, vec, eps)


    def convertToPolyTypes(self, li: 'PyObject *') -> "void":
        """
        convertToPolyTypes(MEDCouplingUMesh self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_convertToPolyTypes(self, li)


    def convertAllToPoly(self) -> "void":
        """
        convertAllToPoly(MEDCouplingUMesh self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_convertAllToPoly(self)


    def convertExtrudedPolyhedra(self) -> "void":
        """
        convertExtrudedPolyhedra(MEDCouplingUMesh self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_convertExtrudedPolyhedra(self)


    def unPolyze(self) -> "bool":
        """
        unPolyze(MEDCouplingUMesh self) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_unPolyze(self)


    def simplifyPolyhedra(self, eps: 'double') -> "void":
        """
        simplifyPolyhedra(MEDCouplingUMesh self, double eps)

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_simplifyPolyhedra(self, eps)


    def buildSpreadZonesWithPoly(self) -> "MEDCoupling::MEDCouplingUMesh *":
        """
        buildSpreadZonesWithPoly(MEDCouplingUMesh self) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_buildSpreadZonesWithPoly(self)


    def buildExtrudedMesh(self, mesh1D: 'MEDCouplingUMesh', policy: 'int') -> "MEDCoupling::MEDCouplingUMesh *":
        """
        buildExtrudedMesh(MEDCouplingUMesh self, MEDCouplingUMesh mesh1D, int policy) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingUMesh_buildExtrudedMesh(self, mesh1D, policy)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingUMesh
    __del__ = lambda self: None
MEDCouplingUMesh_swigregister = _MEDCouplingCompat.MEDCouplingUMesh_swigregister
MEDCouplingUMesh_swigregister(MEDCouplingUMesh)

def MEDCouplingUMesh_New(*args) -> "MEDCoupling::MEDCouplingUMesh *":
    """
    New() -> MEDCouplingUMesh
    MEDCouplingUMesh_New(char const * meshName, int meshDim) -> MEDCouplingUMesh

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_New(*args)

def MEDCouplingUMesh_Build0DMeshFromCoords(da: 'DataArrayDouble') -> "MEDCoupling::MEDCouplingUMesh *":
    """
    MEDCouplingUMesh_Build0DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_Build0DMeshFromCoords(da)

def MEDCouplingUMesh_ComputeSpreadZoneGradually(arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    """
    MEDCouplingUMesh_ComputeSpreadZoneGradually(DataArrayInt arrIn, DataArrayInt arrIndxIn) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_ComputeSpreadZoneGradually(arrIn, arrIndxIn)

def MEDCouplingUMesh_ComputeRangesFromTypeDistribution(code: 'ivec') -> "MEDCoupling::DataArrayInt *":
    """
    MEDCouplingUMesh_ComputeRangesFromTypeDistribution(ivec code) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_ComputeRangesFromTypeDistribution(code)

def MEDCouplingUMesh_Build1DMeshFromCoords(da: 'DataArrayDouble') -> "MEDCoupling::MEDCouplingUMesh *":
    """
    MEDCouplingUMesh_Build1DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_Build1DMeshFromCoords(da)

def MEDCouplingUMesh_ComputeSpreadZoneGraduallyFromSeed(seed: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt', nbOfDepthPeeling: 'int'=-1) -> "PyObject *":
    """
    ComputeSpreadZoneGraduallyFromSeed(PyObject * seed, DataArrayInt arrIn, DataArrayInt arrIndxIn, int nbOfDepthPeeling=-1) -> PyObject
    MEDCouplingUMesh_ComputeSpreadZoneGraduallyFromSeed(PyObject * seed, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_ComputeSpreadZoneGraduallyFromSeed(seed, arrIn, arrIndxIn, nbOfDepthPeeling)

def MEDCouplingUMesh_FindCommonCellsAlg(compType: 'int', startCellId: 'int', nodal: 'DataArrayInt', nodalI: 'DataArrayInt', revNodal: 'DataArrayInt', revNodalI: 'DataArrayInt') -> "PyObject *":
    """
    MEDCouplingUMesh_FindCommonCellsAlg(int compType, int startCellId, DataArrayInt nodal, DataArrayInt nodalI, DataArrayInt revNodal, DataArrayInt revNodalI) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_FindCommonCellsAlg(compType, startCellId, nodal, nodalI, revNodal, revNodalI)

def MEDCouplingUMesh_PartitionBySpreadZone(arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt') -> "PyObject *":
    """
    MEDCouplingUMesh_PartitionBySpreadZone(DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_PartitionBySpreadZone(arrIn, arrIndxIn)

def MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(ms: 'PyObject *') -> "PyObject *":
    """
    MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(PyObject * ms) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(ms)

def MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args) -> "PyObject *":
    """
    MergeUMeshesOnSameCoords(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
    MEDCouplingUMesh_MergeUMeshesOnSameCoords(PyObject * ms) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args)

def MEDCouplingUMesh_FuseUMeshesOnSameCoords(ms: 'PyObject *', compType: 'int') -> "PyObject *":
    """
    MEDCouplingUMesh_FuseUMeshesOnSameCoords(PyObject * ms, int compType) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_FuseUMeshesOnSameCoords(ms, compType)

def MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(ms: 'PyObject *') -> "void":
    """
    MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(PyObject * ms)

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(ms)

def MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(ms: 'PyObject *', eps: 'double') -> "void":
    """
    MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(PyObject * ms, double eps)

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(ms, eps)

def MEDCouplingUMesh_MergeUMeshes(*args) -> "MEDCoupling::MEDCouplingUMesh *":
    """
    MergeUMeshes(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
    MEDCouplingUMesh_MergeUMeshes(PyObject * li) -> MEDCouplingUMesh

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_MergeUMeshes(*args)

def MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(desc: 'DataArrayInt', descI: 'DataArrayInt', revDesc: 'DataArrayInt', revDescI: 'DataArrayInt') -> "PyObject *":
    """
    MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(DataArrayInt desc, DataArrayInt descI, DataArrayInt revDesc, DataArrayInt revDescI) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(desc, descI, revDesc, revDescI)

def MEDCouplingUMesh_Intersect2DMeshes(m1: 'MEDCouplingUMesh', m2: 'MEDCouplingUMesh', eps: 'double') -> "PyObject *":
    """
    MEDCouplingUMesh_Intersect2DMeshes(MEDCouplingUMesh m1, MEDCouplingUMesh m2, double eps) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_Intersect2DMeshes(m1, m2, eps)

def MEDCouplingUMesh_Intersect2DMeshWith1DLine(mesh2D: 'MEDCouplingUMesh', mesh1D: 'MEDCouplingUMesh', eps: 'double') -> "PyObject *":
    """
    MEDCouplingUMesh_Intersect2DMeshWith1DLine(MEDCouplingUMesh mesh2D, MEDCouplingUMesh mesh1D, double eps) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingUMesh_Intersect2DMeshWith1DLine(mesh2D, mesh1D, eps)

class MEDCouplingMappedExtrudedMesh(MEDCouplingMesh):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingMappedExtrudedMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingMappedExtrudedMesh, name)

    def New(*args) -> "MEDCoupling::MEDCouplingMappedExtrudedMesh *":
        """
        New(MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingMappedExtrudedMesh
        New(MEDCouplingCMesh mesh3D) -> MEDCouplingMappedExtrudedMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingMappedExtrudedMesh_New(*args)

    New = staticmethod(New)

    def build3DUnstructuredMesh(self) -> "MEDCoupling::MEDCouplingUMesh *":
        """
        build3DUnstructuredMesh(MEDCouplingMappedExtrudedMesh self) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingMappedExtrudedMesh_build3DUnstructuredMesh(self)


    def get2DCellIdForExtrusion(self) -> "int":
        """
        get2DCellIdForExtrusion(MEDCouplingMappedExtrudedMesh self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingMappedExtrudedMesh_get2DCellIdForExtrusion(self)


    def __init__(self, *args):
        """
        __init__(MEDCoupling::MEDCouplingMappedExtrudedMesh self, MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingMappedExtrudedMesh
        __init__(MEDCoupling::MEDCouplingMappedExtrudedMesh self, MEDCouplingCMesh mesh3D) -> MEDCouplingMappedExtrudedMesh
        __init__(MEDCoupling::MEDCouplingMappedExtrudedMesh self) -> MEDCouplingMappedExtrudedMesh

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingMappedExtrudedMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingMappedExtrudedMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingMappedExtrudedMesh___str__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(MEDCouplingMappedExtrudedMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingMappedExtrudedMesh___repr__(self)


    def getMesh2D(self) -> "PyObject *":
        """
        getMesh2D(MEDCouplingMappedExtrudedMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMappedExtrudedMesh_getMesh2D(self)


    def getMesh1D(self) -> "PyObject *":
        """
        getMesh1D(MEDCouplingMappedExtrudedMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMappedExtrudedMesh_getMesh1D(self)


    def getMesh3DIds(self) -> "PyObject *":
        """
        getMesh3DIds(MEDCouplingMappedExtrudedMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMappedExtrudedMesh_getMesh3DIds(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingMappedExtrudedMesh
    __del__ = lambda self: None
MEDCouplingMappedExtrudedMesh_swigregister = _MEDCouplingCompat.MEDCouplingMappedExtrudedMesh_swigregister
MEDCouplingMappedExtrudedMesh_swigregister(MEDCouplingMappedExtrudedMesh)

def MEDCouplingMappedExtrudedMesh_New(*args) -> "MEDCoupling::MEDCouplingMappedExtrudedMesh *":
    """
    New(MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingMappedExtrudedMesh
    MEDCouplingMappedExtrudedMesh_New(MEDCouplingCMesh mesh3D) -> MEDCouplingMappedExtrudedMesh

    1
    """
    return _MEDCouplingCompat.MEDCouplingMappedExtrudedMesh_New(*args)

class MEDCoupling1GTUMesh(MEDCouplingPointSet):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingPointSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCoupling1GTUMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingPointSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCoupling1GTUMesh, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New(*args) -> "MEDCoupling::MEDCoupling1GTUMesh *":
        """
        New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1GTUMesh
        New(MEDCouplingUMesh m) -> MEDCoupling1GTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCoupling1GTUMesh_New(*args)

    New = staticmethod(New)

    def getCellModelEnum(self) -> "INTERP_KERNEL::NormalizedCellType":
        """
        getCellModelEnum(MEDCoupling1GTUMesh self) -> INTERP_KERNEL::NormalizedCellType

        1
        """
        return _MEDCouplingCompat.MEDCoupling1GTUMesh_getCellModelEnum(self)


    def getNodalConnectivityLength(self) -> "int":
        """
        getNodalConnectivityLength(MEDCoupling1GTUMesh self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCoupling1GTUMesh_getNodalConnectivityLength(self)


    def allocateCells(self, nbOfCells: 'int'=0) -> "void":
        """
        allocateCells(MEDCoupling1GTUMesh self, int nbOfCells=0)
        allocateCells(MEDCoupling1GTUMesh self)

        1
        """
        return _MEDCouplingCompat.MEDCoupling1GTUMesh_allocateCells(self, nbOfCells)


    def checkConsistencyOfConnectivity(self) -> "void":
        """
        checkConsistencyOfConnectivity(MEDCoupling1GTUMesh self)

        1
        """
        return _MEDCouplingCompat.MEDCoupling1GTUMesh_checkConsistencyOfConnectivity(self)


    def insertNextCell(self, li: 'PyObject *') -> "void":
        """
        insertNextCell(MEDCoupling1GTUMesh self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.MEDCoupling1GTUMesh_insertNextCell(self, li)


    def getNodalConnectivity(self) -> "MEDCoupling::DataArrayInt *":
        """
        getNodalConnectivity(MEDCoupling1GTUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCoupling1GTUMesh_getNodalConnectivity(self)


    def AggregateOnSameCoordsToUMesh(li: 'PyObject *') -> "MEDCoupling::MEDCouplingUMesh *":
        """
        AggregateOnSameCoordsToUMesh(PyObject * li) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingCompat.MEDCoupling1GTUMesh_AggregateOnSameCoordsToUMesh(li)

    AggregateOnSameCoordsToUMesh = staticmethod(AggregateOnSameCoordsToUMesh)
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCoupling1GTUMesh
    __del__ = lambda self: None
MEDCoupling1GTUMesh_swigregister = _MEDCouplingCompat.MEDCoupling1GTUMesh_swigregister
MEDCoupling1GTUMesh_swigregister(MEDCoupling1GTUMesh)

def MEDCoupling1GTUMesh_New(*args) -> "MEDCoupling::MEDCoupling1GTUMesh *":
    """
    New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1GTUMesh
    MEDCoupling1GTUMesh_New(MEDCouplingUMesh m) -> MEDCoupling1GTUMesh

    1
    """
    return _MEDCouplingCompat.MEDCoupling1GTUMesh_New(*args)

def MEDCoupling1GTUMesh_AggregateOnSameCoordsToUMesh(li: 'PyObject *') -> "MEDCoupling::MEDCouplingUMesh *":
    """
    MEDCoupling1GTUMesh_AggregateOnSameCoordsToUMesh(PyObject * li) -> MEDCouplingUMesh

    1
    """
    return _MEDCouplingCompat.MEDCoupling1GTUMesh_AggregateOnSameCoordsToUMesh(li)

class MEDCoupling1SGTUMesh(MEDCoupling1GTUMesh):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCoupling1GTUMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCoupling1SGTUMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCoupling1GTUMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCoupling1SGTUMesh, name)

    def New(*args) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        """
        New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1SGTUMesh
        New(MEDCouplingUMesh m) -> MEDCoupling1SGTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCoupling1SGTUMesh_New(*args)

    New = staticmethod(New)

    def setNodalConnectivity(self, nodalConn: 'DataArrayInt') -> "void":
        """
        setNodalConnectivity(MEDCoupling1SGTUMesh self, DataArrayInt nodalConn)

        1
        """
        return _MEDCouplingCompat.MEDCoupling1SGTUMesh_setNodalConnectivity(self, nodalConn)


    def getNumberOfNodesPerCell(self) -> "int":
        """
        getNumberOfNodesPerCell(MEDCoupling1SGTUMesh self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCoupling1SGTUMesh_getNumberOfNodesPerCell(self)


    def buildSetInstanceFromThis(self, spaceDim: 'int') -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        """
        buildSetInstanceFromThis(MEDCoupling1SGTUMesh self, int spaceDim) -> MEDCoupling1SGTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCoupling1SGTUMesh_buildSetInstanceFromThis(self, spaceDim)


    def computeDualMesh(self) -> "MEDCoupling::MEDCoupling1GTUMesh *":
        """
        computeDualMesh(MEDCoupling1SGTUMesh self) -> MEDCoupling1GTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCoupling1SGTUMesh_computeDualMesh(self)


    def explodeEachHexa8To6Quad4(self) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        """
        explodeEachHexa8To6Quad4(MEDCoupling1SGTUMesh self) -> MEDCoupling1SGTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCoupling1SGTUMesh_explodeEachHexa8To6Quad4(self)


    def sortHexa8EachOther(self) -> "MEDCoupling::DataArrayInt *":
        """
        sortHexa8EachOther(MEDCoupling1SGTUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCoupling1SGTUMesh_sortHexa8EachOther(self)


    def __init__(self, *args):
        """
        __init__(MEDCoupling::MEDCoupling1SGTUMesh self) -> MEDCoupling1SGTUMesh
        __init__(MEDCoupling::MEDCoupling1SGTUMesh self, std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1SGTUMesh
        __init__(MEDCoupling::MEDCoupling1SGTUMesh self, MEDCouplingUMesh m) -> MEDCoupling1SGTUMesh

        1
        """
        this = _MEDCouplingCompat.new_MEDCoupling1SGTUMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        """
        __str__(MEDCoupling1SGTUMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCoupling1SGTUMesh___str__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(MEDCoupling1SGTUMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCoupling1SGTUMesh___repr__(self)


    def structurizeMe(self, eps: 'double'=1e-12) -> "PyObject *":
        """
        structurizeMe(MEDCoupling1SGTUMesh self, double eps=1e-12) -> PyObject
        structurizeMe(MEDCoupling1SGTUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCoupling1SGTUMesh_structurizeMe(self, eps)


    def Merge1SGTUMeshes(*args) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        """
        Merge1SGTUMeshes(MEDCoupling1SGTUMesh mesh1, MEDCoupling1SGTUMesh mesh2) -> MEDCoupling1SGTUMesh
        Merge1SGTUMeshes(PyObject * li) -> MEDCoupling1SGTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCoupling1SGTUMesh_Merge1SGTUMeshes(*args)

    Merge1SGTUMeshes = staticmethod(Merge1SGTUMeshes)

    def Merge1SGTUMeshesOnSameCoords(li: 'PyObject *') -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        """
        Merge1SGTUMeshesOnSameCoords(PyObject * li) -> MEDCoupling1SGTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCoupling1SGTUMesh_Merge1SGTUMeshesOnSameCoords(li)

    Merge1SGTUMeshesOnSameCoords = staticmethod(Merge1SGTUMeshesOnSameCoords)
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCoupling1SGTUMesh
    __del__ = lambda self: None
MEDCoupling1SGTUMesh_swigregister = _MEDCouplingCompat.MEDCoupling1SGTUMesh_swigregister
MEDCoupling1SGTUMesh_swigregister(MEDCoupling1SGTUMesh)

def MEDCoupling1SGTUMesh_New(*args) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
    """
    New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1SGTUMesh
    MEDCoupling1SGTUMesh_New(MEDCouplingUMesh m) -> MEDCoupling1SGTUMesh

    1
    """
    return _MEDCouplingCompat.MEDCoupling1SGTUMesh_New(*args)

def MEDCoupling1SGTUMesh_Merge1SGTUMeshes(*args) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
    """
    Merge1SGTUMeshes(MEDCoupling1SGTUMesh mesh1, MEDCoupling1SGTUMesh mesh2) -> MEDCoupling1SGTUMesh
    MEDCoupling1SGTUMesh_Merge1SGTUMeshes(PyObject * li) -> MEDCoupling1SGTUMesh

    1
    """
    return _MEDCouplingCompat.MEDCoupling1SGTUMesh_Merge1SGTUMeshes(*args)

def MEDCoupling1SGTUMesh_Merge1SGTUMeshesOnSameCoords(li: 'PyObject *') -> "MEDCoupling::MEDCoupling1SGTUMesh *":
    """
    MEDCoupling1SGTUMesh_Merge1SGTUMeshesOnSameCoords(PyObject * li) -> MEDCoupling1SGTUMesh

    1
    """
    return _MEDCouplingCompat.MEDCoupling1SGTUMesh_Merge1SGTUMeshesOnSameCoords(li)

class MEDCoupling1DGTUMesh(MEDCoupling1GTUMesh):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCoupling1GTUMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCoupling1DGTUMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCoupling1GTUMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCoupling1DGTUMesh, name)

    def New(*args) -> "MEDCoupling::MEDCoupling1DGTUMesh *":
        """
        New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1DGTUMesh
        New(MEDCouplingUMesh m) -> MEDCoupling1DGTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCoupling1DGTUMesh_New(*args)

    New = staticmethod(New)

    def setNodalConnectivity(self, nodalConn: 'DataArrayInt', nodalConnIndex: 'DataArrayInt') -> "void":
        """
        setNodalConnectivity(MEDCoupling1DGTUMesh self, DataArrayInt nodalConn, DataArrayInt nodalConnIndex)

        1
        """
        return _MEDCouplingCompat.MEDCoupling1DGTUMesh_setNodalConnectivity(self, nodalConn, nodalConnIndex)


    def buildSetInstanceFromThis(self, spaceDim: 'int') -> "MEDCoupling::MEDCoupling1DGTUMesh *":
        """
        buildSetInstanceFromThis(MEDCoupling1DGTUMesh self, int spaceDim) -> MEDCoupling1DGTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCoupling1DGTUMesh_buildSetInstanceFromThis(self, spaceDim)


    def isPacked(self) -> "bool":
        """
        isPacked(MEDCoupling1DGTUMesh self) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCoupling1DGTUMesh_isPacked(self)


    def __init__(self, *args):
        """
        __init__(MEDCoupling::MEDCoupling1DGTUMesh self) -> MEDCoupling1DGTUMesh
        __init__(MEDCoupling::MEDCoupling1DGTUMesh self, std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1DGTUMesh
        __init__(MEDCoupling::MEDCoupling1DGTUMesh self, MEDCouplingUMesh m) -> MEDCoupling1DGTUMesh

        1
        """
        this = _MEDCouplingCompat.new_MEDCoupling1DGTUMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        """
        __str__(MEDCoupling1DGTUMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCoupling1DGTUMesh___str__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(MEDCoupling1DGTUMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCoupling1DGTUMesh___repr__(self)


    def getNodalConnectivityIndex(self) -> "MEDCoupling::DataArrayInt *":
        """
        getNodalConnectivityIndex(MEDCoupling1DGTUMesh self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCoupling1DGTUMesh_getNodalConnectivityIndex(self)


    def retrievePackedNodalConnectivity(self) -> "PyObject *":
        """
        retrievePackedNodalConnectivity(MEDCoupling1DGTUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCoupling1DGTUMesh_retrievePackedNodalConnectivity(self)


    def copyWithNodalConnectivityPacked(self) -> "PyObject *":
        """
        copyWithNodalConnectivityPacked(MEDCoupling1DGTUMesh self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCoupling1DGTUMesh_copyWithNodalConnectivityPacked(self)


    def Merge1DGTUMeshes(li: 'PyObject *') -> "MEDCoupling::MEDCoupling1DGTUMesh *":
        """
        Merge1DGTUMeshes(PyObject * li) -> MEDCoupling1DGTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCoupling1DGTUMesh_Merge1DGTUMeshes(li)

    Merge1DGTUMeshes = staticmethod(Merge1DGTUMeshes)

    def Merge1DGTUMeshesOnSameCoords(li: 'PyObject *') -> "MEDCoupling::MEDCoupling1DGTUMesh *":
        """
        Merge1DGTUMeshesOnSameCoords(PyObject * li) -> MEDCoupling1DGTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCoupling1DGTUMesh_Merge1DGTUMeshesOnSameCoords(li)

    Merge1DGTUMeshesOnSameCoords = staticmethod(Merge1DGTUMeshesOnSameCoords)

    def AggregateNodalConnAndShiftNodeIds(li: 'PyObject *', offsetInNodeIdsPerElt: 'ivec') -> "MEDCoupling::DataArrayInt *":
        """
        AggregateNodalConnAndShiftNodeIds(PyObject * li, ivec offsetInNodeIdsPerElt) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCoupling1DGTUMesh_AggregateNodalConnAndShiftNodeIds(li, offsetInNodeIdsPerElt)

    AggregateNodalConnAndShiftNodeIds = staticmethod(AggregateNodalConnAndShiftNodeIds)
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCoupling1DGTUMesh
    __del__ = lambda self: None
MEDCoupling1DGTUMesh_swigregister = _MEDCouplingCompat.MEDCoupling1DGTUMesh_swigregister
MEDCoupling1DGTUMesh_swigregister(MEDCoupling1DGTUMesh)

def MEDCoupling1DGTUMesh_New(*args) -> "MEDCoupling::MEDCoupling1DGTUMesh *":
    """
    New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1DGTUMesh
    MEDCoupling1DGTUMesh_New(MEDCouplingUMesh m) -> MEDCoupling1DGTUMesh

    1
    """
    return _MEDCouplingCompat.MEDCoupling1DGTUMesh_New(*args)

def MEDCoupling1DGTUMesh_Merge1DGTUMeshes(li: 'PyObject *') -> "MEDCoupling::MEDCoupling1DGTUMesh *":
    """
    MEDCoupling1DGTUMesh_Merge1DGTUMeshes(PyObject * li) -> MEDCoupling1DGTUMesh

    1
    """
    return _MEDCouplingCompat.MEDCoupling1DGTUMesh_Merge1DGTUMeshes(li)

def MEDCoupling1DGTUMesh_Merge1DGTUMeshesOnSameCoords(li: 'PyObject *') -> "MEDCoupling::MEDCoupling1DGTUMesh *":
    """
    MEDCoupling1DGTUMesh_Merge1DGTUMeshesOnSameCoords(PyObject * li) -> MEDCoupling1DGTUMesh

    1
    """
    return _MEDCouplingCompat.MEDCoupling1DGTUMesh_Merge1DGTUMeshesOnSameCoords(li)

def MEDCoupling1DGTUMesh_AggregateNodalConnAndShiftNodeIds(li: 'PyObject *', offsetInNodeIdsPerElt: 'ivec') -> "MEDCoupling::DataArrayInt *":
    """
    MEDCoupling1DGTUMesh_AggregateNodalConnAndShiftNodeIds(PyObject * li, ivec offsetInNodeIdsPerElt) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.MEDCoupling1DGTUMesh_AggregateNodalConnAndShiftNodeIds(li, offsetInNodeIdsPerElt)

class MEDCouplingStructuredMesh(MEDCouplingMesh):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingStructuredMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingStructuredMesh, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getCellIdFromPos(self, i: 'int', j: 'int', k: 'int') -> "int":
        """
        getCellIdFromPos(MEDCouplingStructuredMesh self, int i, int j, int k) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_getCellIdFromPos(self, i, j, k)


    def getNodeIdFromPos(self, i: 'int', j: 'int', k: 'int') -> "int":
        """
        getNodeIdFromPos(MEDCouplingStructuredMesh self, int i, int j, int k) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_getNodeIdFromPos(self, i, j, k)


    def getNumberOfCellsOfSubLevelMesh(self) -> "int":
        """
        getNumberOfCellsOfSubLevelMesh(MEDCouplingStructuredMesh self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_getNumberOfCellsOfSubLevelMesh(self)


    def getSpaceDimensionOnNodeStruct(self) -> "int":
        """
        getSpaceDimensionOnNodeStruct(MEDCouplingStructuredMesh self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_getSpaceDimensionOnNodeStruct(self)


    def computeSquareness(self) -> "double":
        """
        computeSquareness(MEDCouplingStructuredMesh self) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_computeSquareness(self)


    def getNodeGridStructure(self) -> "std::vector< int,std::allocator< int > >":
        """
        getNodeGridStructure(MEDCouplingStructuredMesh self) -> ivec

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_getNodeGridStructure(self)


    def getCellGridStructure(self) -> "std::vector< int,std::allocator< int > >":
        """
        getCellGridStructure(MEDCouplingStructuredMesh self) -> ivec

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_getCellGridStructure(self)


    def build1SGTUnstructured(self) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        """
        build1SGTUnstructured(MEDCouplingStructuredMesh self) -> MEDCoupling1SGTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_build1SGTUnstructured(self)


    def getLocationFromCellId(self, cellId: 'int') -> "std::vector< int,std::allocator< int > >":
        """
        getLocationFromCellId(MEDCouplingStructuredMesh self, int cellId) -> ivec

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_getLocationFromCellId(self, cellId)


    def getLocationFromNodeId(self, cellId: 'int') -> "std::vector< int,std::allocator< int > >":
        """
        getLocationFromNodeId(MEDCouplingStructuredMesh self, int cellId) -> ivec

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_getLocationFromNodeId(self, cellId)


    def GetGeoTypeGivenMeshDimension(meshDim: 'int') -> "INTERP_KERNEL::NormalizedCellType":
        """
        GetGeoTypeGivenMeshDimension(int meshDim) -> INTERP_KERNEL::NormalizedCellType

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_GetGeoTypeGivenMeshDimension(meshDim)

    GetGeoTypeGivenMeshDimension = staticmethod(GetGeoTypeGivenMeshDimension)

    def build1SGTSubLevelMesh(self) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        """
        build1SGTSubLevelMesh(MEDCouplingStructuredMesh self) -> MEDCoupling1SGTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_build1SGTSubLevelMesh(self)


    def DeduceNumberOfGivenStructure(st: 'ivec') -> "int":
        """
        DeduceNumberOfGivenStructure(ivec st) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_DeduceNumberOfGivenStructure(st)

    DeduceNumberOfGivenStructure = staticmethod(DeduceNumberOfGivenStructure)

    def ComputeCornersGhost(st: 'ivec', ghostLev: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        ComputeCornersGhost(ivec st, int ghostLev) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_ComputeCornersGhost(st, ghostLev)

    ComputeCornersGhost = staticmethod(ComputeCornersGhost)

    def GetSplitVectFromStruct(strct: 'ivec') -> "std::vector< int,std::allocator< int > >":
        """
        GetSplitVectFromStruct(ivec strct) -> ivec

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_GetSplitVectFromStruct(strct)

    GetSplitVectFromStruct = staticmethod(GetSplitVectFromStruct)

    def buildStructuredSubPart(self, cellPart: 'PyObject *') -> "MEDCoupling::MEDCouplingStructuredMesh *":
        """
        buildStructuredSubPart(MEDCouplingStructuredMesh self, PyObject * cellPart) -> MEDCouplingStructuredMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_buildStructuredSubPart(self, cellPart)


    def BuildExplicitIdsFrom(st: 'PyObject *', part: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        BuildExplicitIdsFrom(PyObject * st, PyObject * part) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_BuildExplicitIdsFrom(st, part)

    BuildExplicitIdsFrom = staticmethod(BuildExplicitIdsFrom)

    def MultiplyPartOf(st: 'ivec', part: 'PyObject *', factor: 'double', da: 'DataArrayDouble') -> "void":
        """
        MultiplyPartOf(ivec st, PyObject * part, double factor, DataArrayDouble da)

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_MultiplyPartOf(st, part, factor, da)

    MultiplyPartOf = staticmethod(MultiplyPartOf)

    def MultiplyPartOfByGhost(st: 'ivec', part: 'PyObject *', ghostSize: 'int', factor: 'double', da: 'DataArrayDouble') -> "void":
        """
        MultiplyPartOfByGhost(ivec st, PyObject * part, int ghostSize, double factor, DataArrayDouble da)

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_MultiplyPartOfByGhost(st, part, ghostSize, factor, da)

    MultiplyPartOfByGhost = staticmethod(MultiplyPartOfByGhost)

    def PutInGhostFormat(ghostSize: 'int', st: 'ivec', part: 'PyObject *') -> "PyObject *":
        """
        PutInGhostFormat(int ghostSize, ivec st, PyObject * part) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_PutInGhostFormat(ghostSize, st, part)

    PutInGhostFormat = staticmethod(PutInGhostFormat)

    def ExtractFieldOfDoubleFrom(st: 'ivec', fieldOfDbl: 'DataArrayDouble', partCompactFormat: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        ExtractFieldOfDoubleFrom(ivec st, DataArrayDouble fieldOfDbl, PyObject * partCompactFormat) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_ExtractFieldOfDoubleFrom(st, fieldOfDbl, partCompactFormat)

    ExtractFieldOfDoubleFrom = staticmethod(ExtractFieldOfDoubleFrom)

    def AssignPartOfFieldOfDoubleUsing(st: 'ivec', fieldOfDbl: 'DataArrayDouble', partCompactFormat: 'PyObject *', other: 'DataArrayDouble') -> "void":
        """
        AssignPartOfFieldOfDoubleUsing(ivec st, DataArrayDouble fieldOfDbl, PyObject * partCompactFormat, DataArrayDouble other)

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_AssignPartOfFieldOfDoubleUsing(st, fieldOfDbl, partCompactFormat, other)

    AssignPartOfFieldOfDoubleUsing = staticmethod(AssignPartOfFieldOfDoubleUsing)

    def DeduceNumberOfGivenRangeInCompactFrmt(part: 'PyObject *') -> "int":
        """
        DeduceNumberOfGivenRangeInCompactFrmt(PyObject * part) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_DeduceNumberOfGivenRangeInCompactFrmt(part)

    DeduceNumberOfGivenRangeInCompactFrmt = staticmethod(DeduceNumberOfGivenRangeInCompactFrmt)

    def Build1GTNodalConnectivity(li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        Build1GTNodalConnectivity(PyObject * li) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_Build1GTNodalConnectivity(li)

    Build1GTNodalConnectivity = staticmethod(Build1GTNodalConnectivity)

    def Build1GTNodalConnectivityOfSubLevelMesh(li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        Build1GTNodalConnectivityOfSubLevelMesh(PyObject * li) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_Build1GTNodalConnectivityOfSubLevelMesh(li)

    Build1GTNodalConnectivityOfSubLevelMesh = staticmethod(Build1GTNodalConnectivityOfSubLevelMesh)

    def GetDimensionsFromCompactFrmt(partCompactFormat: 'PyObject *') -> "std::vector< int,std::allocator< int > >":
        """
        GetDimensionsFromCompactFrmt(PyObject * partCompactFormat) -> ivec

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_GetDimensionsFromCompactFrmt(partCompactFormat)

    GetDimensionsFromCompactFrmt = staticmethod(GetDimensionsFromCompactFrmt)

    def GetCompactFrmtFromDimensions(dims: 'ivec') -> "PyObject *":
        """
        GetCompactFrmtFromDimensions(ivec dims) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_GetCompactFrmtFromDimensions(dims)

    GetCompactFrmtFromDimensions = staticmethod(GetCompactFrmtFromDimensions)

    def IntersectRanges(r1: 'PyObject *', r2: 'PyObject *') -> "PyObject *":
        """
        IntersectRanges(PyObject * r1, PyObject * r2) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_IntersectRanges(r1, r2)

    IntersectRanges = staticmethod(IntersectRanges)

    def AreRangesIntersect(r1: 'PyObject *', r2: 'PyObject *') -> "bool":
        """
        AreRangesIntersect(PyObject * r1, PyObject * r2) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_AreRangesIntersect(r1, r2)

    AreRangesIntersect = staticmethod(AreRangesIntersect)

    def IsPartStructured(li: 'PyObject *', st: 'PyObject *') -> "PyObject *":
        """
        IsPartStructured(PyObject * li, PyObject * st) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_IsPartStructured(li, st)

    IsPartStructured = staticmethod(IsPartStructured)

    def ChangeReferenceFromGlobalOfCompactFrmt(bigInAbs: 'PyObject *', partOfBigInAbs: 'PyObject *', check: 'bool'=True) -> "PyObject *":
        """
        ChangeReferenceFromGlobalOfCompactFrmt(PyObject * bigInAbs, PyObject * partOfBigInAbs, bool check=True) -> PyObject
        ChangeReferenceFromGlobalOfCompactFrmt(PyObject * bigInAbs, PyObject * partOfBigInAbs) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_ChangeReferenceFromGlobalOfCompactFrmt(bigInAbs, partOfBigInAbs, check)

    ChangeReferenceFromGlobalOfCompactFrmt = staticmethod(ChangeReferenceFromGlobalOfCompactFrmt)

    def TranslateCompactFrmt(part: 'PyObject *', translation: 'ivec') -> "PyObject *":
        """
        TranslateCompactFrmt(PyObject * part, ivec translation) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_TranslateCompactFrmt(part, translation)

    TranslateCompactFrmt = staticmethod(TranslateCompactFrmt)

    def FindTranslationFrom(startingFrom: 'PyObject *', goingTo: 'PyObject *') -> "std::vector< int,std::allocator< int > >":
        """
        FindTranslationFrom(PyObject * startingFrom, PyObject * goingTo) -> ivec

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_FindTranslationFrom(startingFrom, goingTo)

    FindTranslationFrom = staticmethod(FindTranslationFrom)

    def ChangeReferenceToGlobalOfCompactFrmt(bigInAbs: 'PyObject *', partOfBigRelativeToBig: 'PyObject *', check: 'bool'=True) -> "PyObject *":
        """
        ChangeReferenceToGlobalOfCompactFrmt(PyObject * bigInAbs, PyObject * partOfBigRelativeToBig, bool check=True) -> PyObject
        ChangeReferenceToGlobalOfCompactFrmt(PyObject * bigInAbs, PyObject * partOfBigRelativeToBig) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingStructuredMesh_ChangeReferenceToGlobalOfCompactFrmt(bigInAbs, partOfBigRelativeToBig, check)

    ChangeReferenceToGlobalOfCompactFrmt = staticmethod(ChangeReferenceToGlobalOfCompactFrmt)
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingStructuredMesh
    __del__ = lambda self: None
MEDCouplingStructuredMesh_swigregister = _MEDCouplingCompat.MEDCouplingStructuredMesh_swigregister
MEDCouplingStructuredMesh_swigregister(MEDCouplingStructuredMesh)

def MEDCouplingStructuredMesh_GetGeoTypeGivenMeshDimension(meshDim: 'int') -> "INTERP_KERNEL::NormalizedCellType":
    """
    MEDCouplingStructuredMesh_GetGeoTypeGivenMeshDimension(int meshDim) -> INTERP_KERNEL::NormalizedCellType

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_GetGeoTypeGivenMeshDimension(meshDim)

def MEDCouplingStructuredMesh_DeduceNumberOfGivenStructure(st: 'ivec') -> "int":
    """
    MEDCouplingStructuredMesh_DeduceNumberOfGivenStructure(ivec st) -> int

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_DeduceNumberOfGivenStructure(st)

def MEDCouplingStructuredMesh_ComputeCornersGhost(st: 'ivec', ghostLev: 'int') -> "MEDCoupling::DataArrayInt *":
    """
    MEDCouplingStructuredMesh_ComputeCornersGhost(ivec st, int ghostLev) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_ComputeCornersGhost(st, ghostLev)

def MEDCouplingStructuredMesh_GetSplitVectFromStruct(strct: 'ivec') -> "std::vector< int,std::allocator< int > >":
    """
    MEDCouplingStructuredMesh_GetSplitVectFromStruct(ivec strct) -> ivec

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_GetSplitVectFromStruct(strct)

def MEDCouplingStructuredMesh_BuildExplicitIdsFrom(st: 'PyObject *', part: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
    """
    MEDCouplingStructuredMesh_BuildExplicitIdsFrom(PyObject * st, PyObject * part) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_BuildExplicitIdsFrom(st, part)

def MEDCouplingStructuredMesh_MultiplyPartOf(st: 'ivec', part: 'PyObject *', factor: 'double', da: 'DataArrayDouble') -> "void":
    """
    MEDCouplingStructuredMesh_MultiplyPartOf(ivec st, PyObject * part, double factor, DataArrayDouble da)

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_MultiplyPartOf(st, part, factor, da)

def MEDCouplingStructuredMesh_MultiplyPartOfByGhost(st: 'ivec', part: 'PyObject *', ghostSize: 'int', factor: 'double', da: 'DataArrayDouble') -> "void":
    """
    MEDCouplingStructuredMesh_MultiplyPartOfByGhost(ivec st, PyObject * part, int ghostSize, double factor, DataArrayDouble da)

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_MultiplyPartOfByGhost(st, part, ghostSize, factor, da)

def MEDCouplingStructuredMesh_PutInGhostFormat(ghostSize: 'int', st: 'ivec', part: 'PyObject *') -> "PyObject *":
    """
    MEDCouplingStructuredMesh_PutInGhostFormat(int ghostSize, ivec st, PyObject * part) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_PutInGhostFormat(ghostSize, st, part)

def MEDCouplingStructuredMesh_ExtractFieldOfDoubleFrom(st: 'ivec', fieldOfDbl: 'DataArrayDouble', partCompactFormat: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
    """
    MEDCouplingStructuredMesh_ExtractFieldOfDoubleFrom(ivec st, DataArrayDouble fieldOfDbl, PyObject * partCompactFormat) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_ExtractFieldOfDoubleFrom(st, fieldOfDbl, partCompactFormat)

def MEDCouplingStructuredMesh_AssignPartOfFieldOfDoubleUsing(st: 'ivec', fieldOfDbl: 'DataArrayDouble', partCompactFormat: 'PyObject *', other: 'DataArrayDouble') -> "void":
    """
    MEDCouplingStructuredMesh_AssignPartOfFieldOfDoubleUsing(ivec st, DataArrayDouble fieldOfDbl, PyObject * partCompactFormat, DataArrayDouble other)

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_AssignPartOfFieldOfDoubleUsing(st, fieldOfDbl, partCompactFormat, other)

def MEDCouplingStructuredMesh_DeduceNumberOfGivenRangeInCompactFrmt(part: 'PyObject *') -> "int":
    """
    MEDCouplingStructuredMesh_DeduceNumberOfGivenRangeInCompactFrmt(PyObject * part) -> int

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_DeduceNumberOfGivenRangeInCompactFrmt(part)

def MEDCouplingStructuredMesh_Build1GTNodalConnectivity(li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
    """
    MEDCouplingStructuredMesh_Build1GTNodalConnectivity(PyObject * li) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_Build1GTNodalConnectivity(li)

def MEDCouplingStructuredMesh_Build1GTNodalConnectivityOfSubLevelMesh(li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
    """
    MEDCouplingStructuredMesh_Build1GTNodalConnectivityOfSubLevelMesh(PyObject * li) -> DataArrayInt

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_Build1GTNodalConnectivityOfSubLevelMesh(li)

def MEDCouplingStructuredMesh_GetDimensionsFromCompactFrmt(partCompactFormat: 'PyObject *') -> "std::vector< int,std::allocator< int > >":
    """
    MEDCouplingStructuredMesh_GetDimensionsFromCompactFrmt(PyObject * partCompactFormat) -> ivec

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_GetDimensionsFromCompactFrmt(partCompactFormat)

def MEDCouplingStructuredMesh_GetCompactFrmtFromDimensions(dims: 'ivec') -> "PyObject *":
    """
    MEDCouplingStructuredMesh_GetCompactFrmtFromDimensions(ivec dims) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_GetCompactFrmtFromDimensions(dims)

def MEDCouplingStructuredMesh_IntersectRanges(r1: 'PyObject *', r2: 'PyObject *') -> "PyObject *":
    """
    MEDCouplingStructuredMesh_IntersectRanges(PyObject * r1, PyObject * r2) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_IntersectRanges(r1, r2)

def MEDCouplingStructuredMesh_AreRangesIntersect(r1: 'PyObject *', r2: 'PyObject *') -> "bool":
    """
    MEDCouplingStructuredMesh_AreRangesIntersect(PyObject * r1, PyObject * r2) -> bool

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_AreRangesIntersect(r1, r2)

def MEDCouplingStructuredMesh_IsPartStructured(li: 'PyObject *', st: 'PyObject *') -> "PyObject *":
    """
    MEDCouplingStructuredMesh_IsPartStructured(PyObject * li, PyObject * st) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_IsPartStructured(li, st)

def MEDCouplingStructuredMesh_ChangeReferenceFromGlobalOfCompactFrmt(bigInAbs: 'PyObject *', partOfBigInAbs: 'PyObject *', check: 'bool'=True) -> "PyObject *":
    """
    ChangeReferenceFromGlobalOfCompactFrmt(PyObject * bigInAbs, PyObject * partOfBigInAbs, bool check=True) -> PyObject
    MEDCouplingStructuredMesh_ChangeReferenceFromGlobalOfCompactFrmt(PyObject * bigInAbs, PyObject * partOfBigInAbs) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_ChangeReferenceFromGlobalOfCompactFrmt(bigInAbs, partOfBigInAbs, check)

def MEDCouplingStructuredMesh_TranslateCompactFrmt(part: 'PyObject *', translation: 'ivec') -> "PyObject *":
    """
    MEDCouplingStructuredMesh_TranslateCompactFrmt(PyObject * part, ivec translation) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_TranslateCompactFrmt(part, translation)

def MEDCouplingStructuredMesh_FindTranslationFrom(startingFrom: 'PyObject *', goingTo: 'PyObject *') -> "std::vector< int,std::allocator< int > >":
    """
    MEDCouplingStructuredMesh_FindTranslationFrom(PyObject * startingFrom, PyObject * goingTo) -> ivec

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_FindTranslationFrom(startingFrom, goingTo)

def MEDCouplingStructuredMesh_ChangeReferenceToGlobalOfCompactFrmt(bigInAbs: 'PyObject *', partOfBigRelativeToBig: 'PyObject *', check: 'bool'=True) -> "PyObject *":
    """
    ChangeReferenceToGlobalOfCompactFrmt(PyObject * bigInAbs, PyObject * partOfBigRelativeToBig, bool check=True) -> PyObject
    MEDCouplingStructuredMesh_ChangeReferenceToGlobalOfCompactFrmt(PyObject * bigInAbs, PyObject * partOfBigRelativeToBig) -> PyObject *

    1
    """
    return _MEDCouplingCompat.MEDCouplingStructuredMesh_ChangeReferenceToGlobalOfCompactFrmt(bigInAbs, partOfBigRelativeToBig, check)

class MEDCouplingCMesh(MEDCouplingStructuredMesh):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingStructuredMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingCMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingStructuredMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingCMesh, name)

    def New(*args) -> "MEDCoupling::MEDCouplingCMesh *":
        """
        New() -> MEDCouplingCMesh
        New(std::string const & meshName) -> MEDCouplingCMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingCMesh_New(*args)

    New = staticmethod(New)

    def setCoords(self, coordsX: 'DataArrayDouble', coordsY: 'DataArrayDouble'=None, coordsZ: 'DataArrayDouble'=None) -> "void":
        """
        setCoords(MEDCouplingCMesh self, DataArrayDouble coordsX, DataArrayDouble coordsY=None, DataArrayDouble coordsZ=None)
        setCoords(MEDCouplingCMesh self, DataArrayDouble coordsX, DataArrayDouble coordsY=None)
        setCoords(MEDCouplingCMesh self, DataArrayDouble coordsX)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCMesh_setCoords(self, coordsX, coordsY, coordsZ)


    def setCoordsAt(self, i: 'int', arr: 'DataArrayDouble') -> "void":
        """
        setCoordsAt(MEDCouplingCMesh self, int i, DataArrayDouble arr)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCMesh_setCoordsAt(self, i, arr)


    def buildCurveLinear(self) -> "MEDCoupling::MEDCouplingCurveLinearMesh *":
        """
        buildCurveLinear(MEDCouplingCMesh self) -> MEDCouplingCurveLinearMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingCMesh_buildCurveLinear(self)


    def __init__(self, *args):
        """
        __init__(MEDCoupling::MEDCouplingCMesh self) -> MEDCouplingCMesh
        __init__(MEDCoupling::MEDCouplingCMesh self, std::string const & meshName) -> MEDCouplingCMesh

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingCMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingCMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingCMesh___str__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(MEDCouplingCMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingCMesh___repr__(self)


    def getCoordsAt(self, i: 'int') -> "MEDCoupling::DataArrayDouble *":
        """
        getCoordsAt(MEDCouplingCMesh self, int i) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingCMesh_getCoordsAt(self, i)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingCMesh
    __del__ = lambda self: None
MEDCouplingCMesh_swigregister = _MEDCouplingCompat.MEDCouplingCMesh_swigregister
MEDCouplingCMesh_swigregister(MEDCouplingCMesh)

def MEDCouplingCMesh_New(*args) -> "MEDCoupling::MEDCouplingCMesh *":
    """
    New() -> MEDCouplingCMesh
    MEDCouplingCMesh_New(std::string const & meshName) -> MEDCouplingCMesh

    1
    """
    return _MEDCouplingCompat.MEDCouplingCMesh_New(*args)

class MEDCouplingCurveLinearMesh(MEDCouplingStructuredMesh):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingStructuredMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingCurveLinearMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingStructuredMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingCurveLinearMesh, name)

    def New(*args) -> "MEDCoupling::MEDCouplingCurveLinearMesh *":
        """
        New() -> MEDCouplingCurveLinearMesh
        New(std::string const & meshName) -> MEDCouplingCurveLinearMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingCurveLinearMesh_New(*args)

    New = staticmethod(New)

    def setCoords(self, coords: 'DataArrayDouble') -> "void":
        """
        setCoords(MEDCouplingCurveLinearMesh self, DataArrayDouble coords)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCurveLinearMesh_setCoords(self, coords)


    def __init__(self, *args):
        """
        __init__(MEDCoupling::MEDCouplingCurveLinearMesh self) -> MEDCouplingCurveLinearMesh
        __init__(MEDCoupling::MEDCouplingCurveLinearMesh self, std::string const & meshName) -> MEDCouplingCurveLinearMesh

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingCurveLinearMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingCurveLinearMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingCurveLinearMesh___str__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(MEDCouplingCurveLinearMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingCurveLinearMesh___repr__(self)


    def getCoords(self) -> "MEDCoupling::DataArrayDouble *":
        """
        getCoords(MEDCouplingCurveLinearMesh self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingCurveLinearMesh_getCoords(self)


    def setNodeGridStructure(self, gridStruct: 'PyObject *') -> "void":
        """
        setNodeGridStructure(MEDCouplingCurveLinearMesh self, PyObject * gridStruct)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCurveLinearMesh_setNodeGridStructure(self, gridStruct)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingCurveLinearMesh
    __del__ = lambda self: None
MEDCouplingCurveLinearMesh_swigregister = _MEDCouplingCompat.MEDCouplingCurveLinearMesh_swigregister
MEDCouplingCurveLinearMesh_swigregister(MEDCouplingCurveLinearMesh)

def MEDCouplingCurveLinearMesh_New(*args) -> "MEDCoupling::MEDCouplingCurveLinearMesh *":
    """
    New() -> MEDCouplingCurveLinearMesh
    MEDCouplingCurveLinearMesh_New(std::string const & meshName) -> MEDCouplingCurveLinearMesh

    1
    """
    return _MEDCouplingCompat.MEDCouplingCurveLinearMesh_New(*args)

class MEDCouplingIMesh(MEDCouplingStructuredMesh):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingStructuredMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingIMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingStructuredMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingIMesh, name)

    def setSpaceDimension(self, spaceDim: 'int') -> "void":
        """
        setSpaceDimension(MEDCouplingIMesh self, int spaceDim)

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_setSpaceDimension(self, spaceDim)


    def getNodeStruct(self) -> "std::vector< int,std::allocator< int > >":
        """
        getNodeStruct(MEDCouplingIMesh self) -> ivec

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_getNodeStruct(self)


    def getOrigin(self) -> "std::vector< double,std::allocator< double > >":
        """
        getOrigin(MEDCouplingIMesh self) -> dvec

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_getOrigin(self)


    def getDXYZ(self) -> "std::vector< double,std::allocator< double > >":
        """
        getDXYZ(MEDCouplingIMesh self) -> dvec

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_getDXYZ(self)


    def setAxisUnit(self, unitName: 'std::string const &') -> "void":
        """
        setAxisUnit(MEDCouplingIMesh self, std::string const & unitName)

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_setAxisUnit(self, unitName)


    def getAxisUnit(self) -> "std::string":
        """
        getAxisUnit(MEDCouplingIMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_getAxisUnit(self)


    def getMeasureOfAnyCell(self) -> "double":
        """
        getMeasureOfAnyCell(MEDCouplingIMesh self) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_getMeasureOfAnyCell(self)


    def convertToCartesian(self) -> "MEDCoupling::MEDCouplingCMesh *":
        """
        convertToCartesian(MEDCouplingIMesh self) -> MEDCouplingCMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_convertToCartesian(self)


    def refineWithFactor(self, factors: 'ivec') -> "void":
        """
        refineWithFactor(MEDCouplingIMesh self, ivec factors)

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_refineWithFactor(self, factors)


    def asSingleCell(self) -> "MEDCoupling::MEDCouplingIMesh *":
        """
        asSingleCell(MEDCouplingIMesh self) -> MEDCouplingIMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_asSingleCell(self)


    def buildWithGhost(self, ghostLev: 'int') -> "MEDCoupling::MEDCouplingIMesh *":
        """
        buildWithGhost(MEDCouplingIMesh self, int ghostLev) -> MEDCouplingIMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_buildWithGhost(self, ghostLev)


    def New(*args) -> "MEDCoupling::MEDCouplingIMesh *":
        """
        New() -> MEDCouplingIMesh
        New(std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingIMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_New(*args)

    New = staticmethod(New)

    def __init__(self, *args):
        """
        __init__(MEDCoupling::MEDCouplingIMesh self) -> MEDCouplingIMesh
        __init__(MEDCoupling::MEDCouplingIMesh self, std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingIMesh

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingIMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setNodeStruct(self, nodeStrct: 'PyObject *') -> "void":
        """
        setNodeStruct(MEDCouplingIMesh self, PyObject * nodeStrct)

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_setNodeStruct(self, nodeStrct)


    def setOrigin(self, origin: 'PyObject *') -> "void":
        """
        setOrigin(MEDCouplingIMesh self, PyObject * origin)

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_setOrigin(self, origin)


    def setDXYZ(self, dxyz: 'PyObject *') -> "void":
        """
        setDXYZ(MEDCouplingIMesh self, PyObject * dxyz)

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_setDXYZ(self, dxyz)


    def CondenseFineToCoarse(coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', coarseDA: 'DataArrayDouble') -> "void":
        """
        CondenseFineToCoarse(ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, DataArrayDouble coarseDA)

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_CondenseFineToCoarse(coarseSt, fineDA, fineLocInCoarse, facts, coarseDA)

    CondenseFineToCoarse = staticmethod(CondenseFineToCoarse)

    def CondenseFineToCoarseGhost(coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', coarseDA: 'DataArrayDouble', ghostSize: 'int') -> "void":
        """
        CondenseFineToCoarseGhost(ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, DataArrayDouble coarseDA, int ghostSize)

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_CondenseFineToCoarseGhost(coarseSt, fineDA, fineLocInCoarse, facts, coarseDA, ghostSize)

    CondenseFineToCoarseGhost = staticmethod(CondenseFineToCoarseGhost)

    def SpreadCoarseToFine(coarseDA: 'DataArrayDouble', coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec') -> "void":
        """
        SpreadCoarseToFine(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts)

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_SpreadCoarseToFine(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts)

    SpreadCoarseToFine = staticmethod(SpreadCoarseToFine)

    def SpreadCoarseToFineGhost(coarseDA: 'DataArrayDouble', coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', ghostSize: 'int') -> "void":
        """
        SpreadCoarseToFineGhost(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, int ghostSize)

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_SpreadCoarseToFineGhost(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts, ghostSize)

    SpreadCoarseToFineGhost = staticmethod(SpreadCoarseToFineGhost)

    def SpreadCoarseToFineGhostZone(coarseDA: 'DataArrayDouble', coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', ghostSize: 'int') -> "void":
        """
        SpreadCoarseToFineGhostZone(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, int ghostSize)

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh_SpreadCoarseToFineGhostZone(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts, ghostSize)

    SpreadCoarseToFineGhostZone = staticmethod(SpreadCoarseToFineGhostZone)

    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingIMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh___str__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(MEDCouplingIMesh self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingIMesh___repr__(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingIMesh
    __del__ = lambda self: None
MEDCouplingIMesh_swigregister = _MEDCouplingCompat.MEDCouplingIMesh_swigregister
MEDCouplingIMesh_swigregister(MEDCouplingIMesh)

def MEDCouplingIMesh_New(*args) -> "MEDCoupling::MEDCouplingIMesh *":
    """
    New() -> MEDCouplingIMesh
    MEDCouplingIMesh_New(std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingIMesh

    1
    """
    return _MEDCouplingCompat.MEDCouplingIMesh_New(*args)

def MEDCouplingIMesh_CondenseFineToCoarse(coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', coarseDA: 'DataArrayDouble') -> "void":
    """
    MEDCouplingIMesh_CondenseFineToCoarse(ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, DataArrayDouble coarseDA)

    1
    """
    return _MEDCouplingCompat.MEDCouplingIMesh_CondenseFineToCoarse(coarseSt, fineDA, fineLocInCoarse, facts, coarseDA)

def MEDCouplingIMesh_CondenseFineToCoarseGhost(coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', coarseDA: 'DataArrayDouble', ghostSize: 'int') -> "void":
    """
    MEDCouplingIMesh_CondenseFineToCoarseGhost(ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, DataArrayDouble coarseDA, int ghostSize)

    1
    """
    return _MEDCouplingCompat.MEDCouplingIMesh_CondenseFineToCoarseGhost(coarseSt, fineDA, fineLocInCoarse, facts, coarseDA, ghostSize)

def MEDCouplingIMesh_SpreadCoarseToFine(coarseDA: 'DataArrayDouble', coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec') -> "void":
    """
    MEDCouplingIMesh_SpreadCoarseToFine(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts)

    1
    """
    return _MEDCouplingCompat.MEDCouplingIMesh_SpreadCoarseToFine(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts)

def MEDCouplingIMesh_SpreadCoarseToFineGhost(coarseDA: 'DataArrayDouble', coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', ghostSize: 'int') -> "void":
    """
    MEDCouplingIMesh_SpreadCoarseToFineGhost(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, int ghostSize)

    1
    """
    return _MEDCouplingCompat.MEDCouplingIMesh_SpreadCoarseToFineGhost(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts, ghostSize)

def MEDCouplingIMesh_SpreadCoarseToFineGhostZone(coarseDA: 'DataArrayDouble', coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', ghostSize: 'int') -> "void":
    """
    MEDCouplingIMesh_SpreadCoarseToFineGhostZone(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, int ghostSize)

    1
    """
    return _MEDCouplingCompat.MEDCouplingIMesh_SpreadCoarseToFineGhostZone(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts, ghostSize)

class MEDCouplingField(RefCountObject, TimeLabel):
    """1"""

    __swig_setmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingField, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingField, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def checkConsistencyLight(self) -> "void":
        """
        checkConsistencyLight(MEDCouplingField self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_checkConsistencyLight(self)


    def areCompatibleForMerge(self, other: 'MEDCouplingField') -> "bool":
        """
        areCompatibleForMerge(MEDCouplingField self, MEDCouplingField other) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_areCompatibleForMerge(self, other)


    def copyTinyStringsFrom(self, other: 'MEDCouplingField') -> "void":
        """
        copyTinyStringsFrom(MEDCouplingField self, MEDCouplingField other)

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_copyTinyStringsFrom(self, other)


    def setMesh(self, mesh: 'MEDCouplingMesh') -> "void":
        """
        setMesh(MEDCouplingField self, MEDCouplingMesh mesh)

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_setMesh(self, mesh)


    def setName(self, name: 'char const *') -> "void":
        """
        setName(MEDCouplingField self, char const * name)

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_setName(self, name)


    def getDescription(self) -> "std::string":
        """
        getDescription(MEDCouplingField self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getDescription(self)


    def setDescription(self, desc: 'char const *') -> "void":
        """
        setDescription(MEDCouplingField self, char const * desc)

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_setDescription(self, desc)


    def getName(self) -> "std::string":
        """
        getName(MEDCouplingField self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getName(self)


    def getTypeOfField(self) -> "MEDCoupling::TypeOfField":
        """
        getTypeOfField(MEDCouplingField self) -> MEDCoupling::TypeOfField

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getTypeOfField(self)


    def getNature(self) -> "MEDCoupling::NatureOfField":
        """
        getNature(MEDCouplingField self) -> MEDCoupling::NatureOfField

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getNature(self)


    def setNature(self, nat: 'MEDCoupling::NatureOfField') -> "void":
        """
        setNature(MEDCouplingField self, MEDCoupling::NatureOfField nat)

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_setNature(self, nat)


    def getLocalizationOfDiscr(self) -> "MEDCoupling::DataArrayDouble *":
        """
        getLocalizationOfDiscr(MEDCouplingField self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getLocalizationOfDiscr(self)


    def buildMeasureField(self, isAbs: 'bool') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        buildMeasureField(MEDCouplingField self, bool isAbs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_buildMeasureField(self, isAbs)


    def getNumberOfTuplesExpected(self) -> "int":
        """
        getNumberOfTuplesExpected(MEDCouplingField self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getNumberOfTuplesExpected(self)


    def getNumberOfMeshPlacesExpected(self) -> "int":
        """
        getNumberOfMeshPlacesExpected(MEDCouplingField self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getNumberOfMeshPlacesExpected(self)


    def setGaussLocalizationOnType(self, type: 'INTERP_KERNEL::NormalizedCellType', refCoo: 'dvec', gsCoo: 'dvec', wg: 'dvec') -> "void":
        """
        setGaussLocalizationOnType(MEDCouplingField self, INTERP_KERNEL::NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_setGaussLocalizationOnType(self, type, refCoo, gsCoo, wg)


    def clearGaussLocalizations(self) -> "void":
        """
        clearGaussLocalizations(MEDCouplingField self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_clearGaussLocalizations(self)


    def getNbOfGaussLocalization(self) -> "int":
        """
        getNbOfGaussLocalization(MEDCouplingField self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getNbOfGaussLocalization(self)


    def getGaussLocalizationIdOfOneCell(self, cellId: 'int') -> "int":
        """
        getGaussLocalizationIdOfOneCell(MEDCouplingField self, int cellId) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getGaussLocalizationIdOfOneCell(self, cellId)


    def getGaussLocalization(self, *args) -> "MEDCoupling::MEDCouplingGaussLocalization const &":
        """
        getGaussLocalization(MEDCouplingField self, int locId) -> MEDCouplingGaussLocalization
        getGaussLocalization(MEDCouplingField self, int locId) -> MEDCouplingGaussLocalization

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getGaussLocalization(self, *args)


    def getGaussLocalizationIdOfOneType(self, type: 'INTERP_KERNEL::NormalizedCellType') -> "int":
        """
        getGaussLocalizationIdOfOneType(MEDCouplingField self, INTERP_KERNEL::NormalizedCellType type) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getGaussLocalizationIdOfOneType(self, type)


    def setDiscretization(self, newDisc: 'MEDCouplingFieldDiscretization') -> "void":
        """
        setDiscretization(MEDCouplingField self, MEDCouplingFieldDiscretization newDisc)

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_setDiscretization(self, newDisc)


    def getMesh(self) -> "PyObject *":
        """
        getMesh(MEDCouplingField self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getMesh(self)


    def getDiscretization(self) -> "PyObject *":
        """
        getDiscretization(MEDCouplingField self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getDiscretization(self)


    def getGaussLocalizationIdsOfOneType(self, type: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
        """
        getGaussLocalizationIdsOfOneType(MEDCouplingField self, INTERP_KERNEL::NormalizedCellType type) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getGaussLocalizationIdsOfOneType(self, type)


    def buildSubMeshData(self, li: 'PyObject *') -> "PyObject *":
        """
        buildSubMeshData(MEDCouplingField self, PyObject * li) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_buildSubMeshData(self, li)


    def buildSubMeshDataRange(self, begin: 'int', end: 'int', step: 'int') -> "PyObject *":
        """
        buildSubMeshDataRange(MEDCouplingField self, int begin, int end, int step) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_buildSubMeshDataRange(self, begin, end, step)


    def computeTupleIdsToSelectFromCellIds(self, cellIds: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        """
        computeTupleIdsToSelectFromCellIds(MEDCouplingField self, PyObject * cellIds) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_computeTupleIdsToSelectFromCellIds(self, cellIds)


    def setGaussLocalizationOnCells(self, li: 'PyObject *', refCoo: 'dvec', gsCoo: 'dvec', wg: 'dvec') -> "void":
        """
        setGaussLocalizationOnCells(MEDCouplingField self, PyObject * li, dvec refCoo, dvec gsCoo, dvec wg)

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_setGaussLocalizationOnCells(self, li, refCoo, gsCoo, wg)


    def getCellIdsHavingGaussLocalization(self, locId: 'int') -> "PyObject *":
        """
        getCellIdsHavingGaussLocalization(MEDCouplingField self, int locId) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getCellIdsHavingGaussLocalization(self, locId)


    def getNumberOfTuplesExpectedRegardingCode(self, code: 'PyObject *', idsPerType: 'PyObject *') -> "int":
        """
        getNumberOfTuplesExpectedRegardingCode(MEDCouplingField self, PyObject * code, PyObject * idsPerType) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingField_getNumberOfTuplesExpectedRegardingCode(self, code, idsPerType)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingField
    __del__ = lambda self: None
MEDCouplingField_swigregister = _MEDCouplingCompat.MEDCouplingField_swigregister
MEDCouplingField_swigregister(MEDCouplingField)

class MEDCouplingFieldTemplate(MEDCouplingField):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldTemplate, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldTemplate, name)

    def New(*args) -> "MEDCoupling::MEDCouplingFieldTemplate *":
        """
        New(MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
        New(MEDCouplingFieldFloat const & f) -> MEDCouplingFieldTemplate
        New(MEDCouplingFieldInt const & f) -> MEDCouplingFieldTemplate
        New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldTemplate

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldTemplate_New(*args)

    New = staticmethod(New)

    def simpleRepr(self) -> "std::string":
        """
        simpleRepr(MEDCouplingFieldTemplate self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldTemplate_simpleRepr(self)


    def advancedRepr(self) -> "std::string":
        """
        advancedRepr(MEDCouplingFieldTemplate self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldTemplate_advancedRepr(self)


    def isEqual(self, other: 'MEDCouplingFieldTemplate', meshPrec: 'double') -> "bool":
        """
        isEqual(MEDCouplingFieldTemplate self, MEDCouplingFieldTemplate other, double meshPrec) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldTemplate_isEqual(self, other, meshPrec)


    def isEqualWithoutConsideringStr(self, other: 'MEDCouplingFieldTemplate', meshPrec: 'double') -> "bool":
        """
        isEqualWithoutConsideringStr(MEDCouplingFieldTemplate self, MEDCouplingFieldTemplate other, double meshPrec) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldTemplate_isEqualWithoutConsideringStr(self, other, meshPrec)


    def __init__(self, *args):
        """
        __init__(MEDCoupling::MEDCouplingFieldTemplate self, MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
        __init__(MEDCoupling::MEDCouplingFieldTemplate self, MEDCouplingFieldFloat const & f) -> MEDCouplingFieldTemplate
        __init__(MEDCoupling::MEDCouplingFieldTemplate self, MEDCouplingFieldInt const & f) -> MEDCouplingFieldTemplate
        __init__(MEDCoupling::MEDCouplingFieldTemplate self, MEDCoupling::TypeOfField type) -> MEDCouplingFieldTemplate

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingFieldTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingFieldTemplate self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldTemplate___str__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(MEDCouplingFieldTemplate self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldTemplate___repr__(self)


    def isEqualIfNotWhy(self, other: 'MEDCouplingFieldTemplate', meshPrec: 'double') -> "PyObject *":
        """
        isEqualIfNotWhy(MEDCouplingFieldTemplate self, MEDCouplingFieldTemplate other, double meshPrec) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldTemplate_isEqualIfNotWhy(self, other, meshPrec)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingFieldTemplate
    __del__ = lambda self: None
MEDCouplingFieldTemplate_swigregister = _MEDCouplingCompat.MEDCouplingFieldTemplate_swigregister
MEDCouplingFieldTemplate_swigregister(MEDCouplingFieldTemplate)

def MEDCouplingFieldTemplate_New(*args) -> "MEDCoupling::MEDCouplingFieldTemplate *":
    """
    New(MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
    New(MEDCouplingFieldFloat const & f) -> MEDCouplingFieldTemplate
    New(MEDCouplingFieldInt const & f) -> MEDCouplingFieldTemplate
    MEDCouplingFieldTemplate_New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldTemplate

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldTemplate_New(*args)

class MEDCouplingFieldTdouble(MEDCouplingField):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldTdouble, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldTdouble, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getTimeDiscretization(self) -> "MEDCoupling::TypeOfTimeDiscretization":
        """
        getTimeDiscretization(MEDCouplingFieldTdouble self) -> MEDCoupling::TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldTdouble_getTimeDiscretization(self)

MEDCouplingFieldTdouble_swigregister = _MEDCouplingCompat.MEDCouplingFieldTdouble_swigregister
MEDCouplingFieldTdouble_swigregister(MEDCouplingFieldTdouble)

class MEDCouplingFieldTfloat(MEDCouplingField):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldTfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldTfloat, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getTimeDiscretization(self) -> "MEDCoupling::TypeOfTimeDiscretization":
        """
        getTimeDiscretization(MEDCouplingFieldTfloat self) -> MEDCoupling::TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldTfloat_getTimeDiscretization(self)

MEDCouplingFieldTfloat_swigregister = _MEDCouplingCompat.MEDCouplingFieldTfloat_swigregister
MEDCouplingFieldTfloat_swigregister(MEDCouplingFieldTfloat)

class MEDCouplingFieldTint(MEDCouplingField):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldTint, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldTint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getTimeDiscretization(self) -> "MEDCoupling::TypeOfTimeDiscretization":
        """
        getTimeDiscretization(MEDCouplingFieldTint self) -> MEDCoupling::TypeOfTimeDiscretization

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldTint_getTimeDiscretization(self)

MEDCouplingFieldTint_swigregister = _MEDCouplingCompat.MEDCouplingFieldTint_swigregister
MEDCouplingFieldTint_swigregister(MEDCouplingFieldTint)

class MEDCouplingFieldDouble(MEDCouplingFieldTdouble):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldTdouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldTdouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldDouble, name)

    def New(*args) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldDouble
        New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldDouble
        New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldDouble
        New(MEDCouplingFieldTemplate ft) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_New(*args)

    New = staticmethod(New)

    def isEqual(self, other: 'MEDCouplingFieldDouble', meshPrec: 'double', valsPrec: 'double') -> "bool":
        """
        isEqual(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_isEqual(self, other, meshPrec, valsPrec)


    def isEqualWithoutConsideringStr(self, other: 'MEDCouplingFieldDouble', meshPrec: 'double', valsPrec: 'double') -> "bool":
        """
        isEqualWithoutConsideringStr(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec)


    def setTimeUnit(self, unit: 'std::string const &') -> "void":
        """
        setTimeUnit(MEDCouplingFieldDouble self, std::string const & unit)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setTimeUnit(self, unit)


    def getTimeUnit(self) -> "std::string":
        """
        getTimeUnit(MEDCouplingFieldDouble self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getTimeUnit(self)


    def synchronizeTimeWithSupport(self) -> "void":
        """
        synchronizeTimeWithSupport(MEDCouplingFieldDouble self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_synchronizeTimeWithSupport(self)


    def copyTinyAttrFrom(self, other: 'MEDCouplingFieldDouble') -> "void":
        """
        copyTinyAttrFrom(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_copyTinyAttrFrom(self, other)


    def copyAllTinyAttrFrom(self, other: 'MEDCouplingFieldDouble') -> "void":
        """
        copyAllTinyAttrFrom(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_copyAllTinyAttrFrom(self, other)


    def simpleRepr(self) -> "std::string":
        """
        simpleRepr(MEDCouplingFieldDouble self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_simpleRepr(self)


    def advancedRepr(self) -> "std::string":
        """
        advancedRepr(MEDCouplingFieldDouble self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_advancedRepr(self)


    def writeVTK(self, fileName: 'std::string const &', isBinary: 'bool'=True) -> "std::string":
        """
        writeVTK(MEDCouplingFieldDouble self, std::string const & fileName, bool isBinary=True) -> std::string
        writeVTK(MEDCouplingFieldDouble self, std::string const & fileName) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_writeVTK(self, fileName, isBinary)


    def convertToIntField(self) -> "MEDCoupling::MEDCouplingFieldInt *":
        """
        convertToIntField(MEDCouplingFieldDouble self) -> MEDCouplingFieldInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_convertToIntField(self)


    def convertToFloatField(self) -> "MEDCoupling::MEDCouplingFieldFloat *":
        """
        convertToFloatField(MEDCouplingFieldDouble self) -> MEDCouplingFieldFloat

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_convertToFloatField(self)


    def clone(self, recDeepCpy: 'bool') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        clone(MEDCouplingFieldDouble self, bool recDeepCpy) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_clone(self, recDeepCpy)


    def cloneWithMesh(self, recDeepCpy: 'bool') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        cloneWithMesh(MEDCouplingFieldDouble self, bool recDeepCpy) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_cloneWithMesh(self, recDeepCpy)


    def deepCopy(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        deepCopy(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_deepCopy(self)


    def buildNewTimeReprFromThis(self, td: 'MEDCoupling::TypeOfTimeDiscretization', deepCopy: 'bool') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        buildNewTimeReprFromThis(MEDCouplingFieldDouble self, MEDCoupling::TypeOfTimeDiscretization td, bool deepCopy) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_buildNewTimeReprFromThis(self, td, deepCopy)


    def nodeToCellDiscretization(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        nodeToCellDiscretization(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_nodeToCellDiscretization(self)


    def cellToNodeDiscretization(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        cellToNodeDiscretization(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_cellToNodeDiscretization(self)


    def getIJ(self, tupleId: 'int', compoId: 'int') -> "double":
        """
        getIJ(MEDCouplingFieldDouble self, int tupleId, int compoId) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getIJ(self, tupleId, compoId)


    def getIJK(self, cellId: 'int', nodeIdInCell: 'int', compoId: 'int') -> "double":
        """
        getIJK(MEDCouplingFieldDouble self, int cellId, int nodeIdInCell, int compoId) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getIJK(self, cellId, nodeIdInCell, compoId)


    def synchronizeTimeWithMesh(self) -> "void":
        """
        synchronizeTimeWithMesh(MEDCouplingFieldDouble self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_synchronizeTimeWithMesh(self)


    def setArray(self, array: 'DataArrayDouble') -> "void":
        """
        setArray(MEDCouplingFieldDouble self, DataArrayDouble array)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setArray(self, array)


    def setEndArray(self, array: 'DataArrayDouble') -> "void":
        """
        setEndArray(MEDCouplingFieldDouble self, DataArrayDouble array)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setEndArray(self, array)


    def setTime(self, val: 'double', iteration: 'int', order: 'int') -> "void":
        """
        setTime(MEDCouplingFieldDouble self, double val, int iteration, int order)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setTime(self, val, iteration, order)


    def setStartTime(self, val: 'double', iteration: 'int', order: 'int') -> "void":
        """
        setStartTime(MEDCouplingFieldDouble self, double val, int iteration, int order)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setStartTime(self, val, iteration, order)


    def setEndTime(self, val: 'double', iteration: 'int', order: 'int') -> "void":
        """
        setEndTime(MEDCouplingFieldDouble self, double val, int iteration, int order)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setEndTime(self, val, iteration, order)


    def applyLin(self, *args) -> "void":
        """
        applyLin(MEDCouplingFieldDouble self, double a, double b, int compoId)
        applyLin(MEDCouplingFieldDouble self, double a, double b)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_applyLin(self, *args)


    def getNumberOfComponents(self) -> "int":
        """
        getNumberOfComponents(MEDCouplingFieldDouble self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getNumberOfComponents(self)


    def getNumberOfTuples(self) -> "int":
        """
        getNumberOfTuples(MEDCouplingFieldDouble self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getNumberOfTuples(self)


    def getNumberOfValues(self) -> "int":
        """
        getNumberOfValues(MEDCouplingFieldDouble self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getNumberOfValues(self)


    def setTimeTolerance(self, val: 'double') -> "void":
        """
        setTimeTolerance(MEDCouplingFieldDouble self, double val)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setTimeTolerance(self, val)


    def getTimeTolerance(self) -> "double":
        """
        getTimeTolerance(MEDCouplingFieldDouble self) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getTimeTolerance(self)


    def setIteration(self, it: 'int') -> "void":
        """
        setIteration(MEDCouplingFieldDouble self, int it)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setIteration(self, it)


    def setEndIteration(self, it: 'int') -> "void":
        """
        setEndIteration(MEDCouplingFieldDouble self, int it)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setEndIteration(self, it)


    def setOrder(self, order: 'int') -> "void":
        """
        setOrder(MEDCouplingFieldDouble self, int order)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setOrder(self, order)


    def setEndOrder(self, order: 'int') -> "void":
        """
        setEndOrder(MEDCouplingFieldDouble self, int order)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setEndOrder(self, order)


    def setTimeValue(self, val: 'double') -> "void":
        """
        setTimeValue(MEDCouplingFieldDouble self, double val)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setTimeValue(self, val)


    def setEndTimeValue(self, val: 'double') -> "void":
        """
        setEndTimeValue(MEDCouplingFieldDouble self, double val)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setEndTimeValue(self, val)


    def changeUnderlyingMesh(self, other: 'MEDCouplingMesh', levOfCheck: 'int', precOnMesh: 'double', eps: 'double'=1e-15) -> "void":
        """
        changeUnderlyingMesh(MEDCouplingFieldDouble self, MEDCouplingMesh other, int levOfCheck, double precOnMesh, double eps=1e-15)
        changeUnderlyingMesh(MEDCouplingFieldDouble self, MEDCouplingMesh other, int levOfCheck, double precOnMesh)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_changeUnderlyingMesh(self, other, levOfCheck, precOnMesh, eps)


    def substractInPlaceDM(self, f: 'MEDCouplingFieldDouble', levOfCheck: 'int', precOnMesh: 'double', eps: 'double'=1e-15) -> "void":
        """
        substractInPlaceDM(MEDCouplingFieldDouble self, MEDCouplingFieldDouble f, int levOfCheck, double precOnMesh, double eps=1e-15)
        substractInPlaceDM(MEDCouplingFieldDouble self, MEDCouplingFieldDouble f, int levOfCheck, double precOnMesh)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_substractInPlaceDM(self, f, levOfCheck, precOnMesh, eps)


    def mergeNodes(self, eps: 'double', epsOnVals: 'double'=1e-15) -> "bool":
        """
        mergeNodes(MEDCouplingFieldDouble self, double eps, double epsOnVals=1e-15) -> bool
        mergeNodes(MEDCouplingFieldDouble self, double eps) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_mergeNodes(self, eps, epsOnVals)


    def mergeNodesCenter(self, eps: 'double', epsOnVals: 'double'=1e-15) -> "bool":
        """
        mergeNodesCenter(MEDCouplingFieldDouble self, double eps, double epsOnVals=1e-15) -> bool
        mergeNodesCenter(MEDCouplingFieldDouble self, double eps) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_mergeNodesCenter(self, eps, epsOnVals)


    def zipCoords(self, epsOnVals: 'double'=1e-15) -> "bool":
        """
        zipCoords(MEDCouplingFieldDouble self, double epsOnVals=1e-15) -> bool
        zipCoords(MEDCouplingFieldDouble self) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_zipCoords(self, epsOnVals)


    def zipConnectivity(self, compType: 'int', epsOnVals: 'double'=1e-15) -> "bool":
        """
        zipConnectivity(MEDCouplingFieldDouble self, int compType, double epsOnVals=1e-15) -> bool
        zipConnectivity(MEDCouplingFieldDouble self, int compType) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_zipConnectivity(self, compType, epsOnVals)


    def simplexize(self, policy: 'int') -> "bool":
        """
        simplexize(MEDCouplingFieldDouble self, int policy) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_simplexize(self, policy)


    def doublyContractedProduct(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        doublyContractedProduct(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_doublyContractedProduct(self)


    def determinant(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        determinant(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_determinant(self)


    def eigenValues(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        eigenValues(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_eigenValues(self)


    def eigenVectors(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        eigenVectors(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_eigenVectors(self)


    def inverse(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        inverse(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_inverse(self)


    def trace(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        trace(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_trace(self)


    def deviator(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        deviator(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_deviator(self)


    def magnitude(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        magnitude(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_magnitude(self)


    def maxPerTuple(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        maxPerTuple(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_maxPerTuple(self)


    def changeNbOfComponents(self, newNbOfComp: 'int', dftValue: 'double'=0.) -> "void":
        """
        changeNbOfComponents(MEDCouplingFieldDouble self, int newNbOfComp, double dftValue=0.)
        changeNbOfComponents(MEDCouplingFieldDouble self, int newNbOfComp)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_changeNbOfComponents(self, newNbOfComp, dftValue)


    def sortPerTuple(self, asc: 'bool') -> "void":
        """
        sortPerTuple(MEDCouplingFieldDouble self, bool asc)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_sortPerTuple(self, asc)


    def assign(self, value: 'double') -> "MEDCoupling::MEDCouplingFieldDouble &":
        """
        assign(MEDCouplingFieldDouble self, double value) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_assign(self, value)


    def fillFromAnalytic(self, nbOfComp: 'int', func: 'std::string const &') -> "void":
        """
        fillFromAnalytic(MEDCouplingFieldDouble self, int nbOfComp, std::string const & func)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_fillFromAnalytic(self, nbOfComp, func)


    def fillFromAnalyticCompo(self, nbOfComp: 'int', func: 'std::string const &') -> "void":
        """
        fillFromAnalyticCompo(MEDCouplingFieldDouble self, int nbOfComp, std::string const & func)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_fillFromAnalyticCompo(self, nbOfComp, func)


    def fillFromAnalyticNamedCompo(self, nbOfComp: 'int', varsOrder: 'svec', func: 'std::string const &') -> "void":
        """
        fillFromAnalyticNamedCompo(MEDCouplingFieldDouble self, int nbOfComp, svec varsOrder, std::string const & func)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_fillFromAnalyticNamedCompo(self, nbOfComp, varsOrder, func)


    def applyFuncCompo(self, nbOfComp: 'int', func: 'std::string const &') -> "void":
        """
        applyFuncCompo(MEDCouplingFieldDouble self, int nbOfComp, std::string const & func)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_applyFuncCompo(self, nbOfComp, func)


    def applyFuncNamedCompo(self, nbOfComp: 'int', varsOrder: 'svec', func: 'std::string const &') -> "void":
        """
        applyFuncNamedCompo(MEDCouplingFieldDouble self, int nbOfComp, svec varsOrder, std::string const & func)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_applyFuncNamedCompo(self, nbOfComp, varsOrder, func)


    def applyFunc(self, *args) -> "void":
        """
        applyFunc(MEDCouplingFieldDouble self, int nbOfComp, std::string const & func)
        applyFunc(MEDCouplingFieldDouble self, int nbOfComp, double val)
        applyFunc(MEDCouplingFieldDouble self, std::string const & func)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_applyFunc(self, *args)


    def applyFuncFast32(self, func: 'std::string const &') -> "void":
        """
        applyFuncFast32(MEDCouplingFieldDouble self, std::string const & func)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_applyFuncFast32(self, func)


    def applyFuncFast64(self, func: 'std::string const &') -> "void":
        """
        applyFuncFast64(MEDCouplingFieldDouble self, std::string const & func)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_applyFuncFast64(self, func)


    def getMaxValue(self) -> "double":
        """
        getMaxValue(MEDCouplingFieldDouble self) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getMaxValue(self)


    def getMinValue(self) -> "double":
        """
        getMinValue(MEDCouplingFieldDouble self) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getMinValue(self)


    def getAverageValue(self) -> "double":
        """
        getAverageValue(MEDCouplingFieldDouble self) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getAverageValue(self)


    def norm2(self) -> "double":
        """
        norm2(MEDCouplingFieldDouble self) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_norm2(self)


    def findIdsInRange(self, vmin: 'double', vmax: 'double') -> "MEDCoupling::DataArrayInt *":
        """
        findIdsInRange(MEDCouplingFieldDouble self, double vmin, double vmax) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_findIdsInRange(self, vmin, vmax)


    def buildSubPartRange(self, begin: 'int', end: 'int', step: 'int') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        buildSubPartRange(MEDCouplingFieldDouble self, int begin, int end, int step) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_buildSubPartRange(self, begin, end, step)


    def MeldFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        MeldFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_MeldFields(f1, f2)

    MeldFields = staticmethod(MeldFields)

    def DotFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        DotFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_DotFields(f1, f2)

    DotFields = staticmethod(DotFields)

    def dot(self, other: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        dot(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_dot(self, other)


    def CrossProductFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        CrossProductFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_CrossProductFields(f1, f2)

    CrossProductFields = staticmethod(CrossProductFields)

    def crossProduct(self, other: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        crossProduct(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_crossProduct(self, other)


    def MaxFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        MaxFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_MaxFields(f1, f2)

    MaxFields = staticmethod(MaxFields)

    def max(self, other: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        max(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_max(self, other)


    def MinFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        MinFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_MinFields(f1, f2)

    MinFields = staticmethod(MinFields)

    def AddFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        AddFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_AddFields(f1, f2)

    AddFields = staticmethod(AddFields)

    def SubstractFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        SubstractFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_SubstractFields(f1, f2)

    SubstractFields = staticmethod(SubstractFields)

    def MultiplyFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        MultiplyFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_MultiplyFields(f1, f2)

    MultiplyFields = staticmethod(MultiplyFields)

    def DivideFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        DivideFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_DivideFields(f1, f2)

    DivideFields = staticmethod(DivideFields)

    def min(self, other: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        min(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_min(self, other)


    def negate(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        negate(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_negate(self)


    def __init__(self, *args):
        """
        __init__(MEDCoupling::MEDCouplingFieldDouble self, MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldDouble
        __init__(MEDCoupling::MEDCouplingFieldDouble self, MEDCoupling::TypeOfField type) -> MEDCouplingFieldDouble
        __init__(MEDCoupling::MEDCouplingFieldDouble self, MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldDouble
        __init__(MEDCoupling::MEDCouplingFieldDouble self, MEDCouplingFieldTemplate ft) -> MEDCouplingFieldDouble

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingFieldDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingFieldDouble self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___str__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(MEDCouplingFieldDouble self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___repr__(self)


    def isEqualIfNotWhy(self, other: 'MEDCouplingFieldDouble', meshPrec: 'double', valsPrec: 'double') -> "PyObject *":
        """
        isEqualIfNotWhy(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other, double meshPrec, double valsPrec) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_isEqualIfNotWhy(self, other, meshPrec, valsPrec)


    def voronoize(self, eps: 'double') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        voronoize(MEDCouplingFieldDouble self, double eps) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_voronoize(self, eps)


    def convertQuadraticCellsToLinear(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        convertQuadraticCellsToLinear(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_convertQuadraticCellsToLinear(self)


    def computeVectorFieldCyl(self, center: 'PyObject *', vector: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        computeVectorFieldCyl(MEDCouplingFieldDouble self, PyObject * center, PyObject * vector) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_computeVectorFieldCyl(self, center, vector)


    def getArray(self) -> "MEDCoupling::DataArrayDouble *":
        """
        getArray(MEDCouplingFieldDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getArray(self)


    def getArrays(self) -> "PyObject *":
        """
        getArrays(MEDCouplingFieldDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getArrays(self)


    def setArrays(self, ls: 'PyObject *') -> "void":
        """
        setArrays(MEDCouplingFieldDouble self, PyObject * ls)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setArrays(self, ls)


    def getEndArray(self) -> "MEDCoupling::DataArrayDouble *":
        """
        getEndArray(MEDCouplingFieldDouble self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getEndArray(self)


    def getValueOnPos(self, i: 'int', j: 'int', k: 'int') -> "PyObject *":
        """
        getValueOnPos(MEDCouplingFieldDouble self, int i, int j, int k) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getValueOnPos(self, i, j, k)


    def getValueOnMulti(self, locs: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        """
        getValueOnMulti(MEDCouplingFieldDouble self, PyObject * locs) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getValueOnMulti(self, locs)


    def getValueOn(self, *args) -> "PyObject *":
        """
        getValueOn(MEDCouplingFieldDouble self, PyObject * sl) -> PyObject
        getValueOn(MEDCouplingFieldDouble self, PyObject * sl, double time) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getValueOn(self, *args)


    def setValues(self, li: 'PyObject *', nbOfTuples: 'PyObject *'=None, nbOfComp: 'PyObject *'=None) -> "void":
        """
        setValues(MEDCouplingFieldDouble self, PyObject * li, PyObject * nbOfTuples=None, PyObject * nbOfComp=None)
        setValues(MEDCouplingFieldDouble self, PyObject * li, PyObject * nbOfTuples=None)
        setValues(MEDCouplingFieldDouble self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setValues(self, li, nbOfTuples, nbOfComp)


    def getTime(self) -> "PyObject *":
        """
        getTime(MEDCouplingFieldDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getTime(self)


    def getStartTime(self) -> "PyObject *":
        """
        getStartTime(MEDCouplingFieldDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getStartTime(self)


    def getEndTime(self) -> "PyObject *":
        """
        getEndTime(MEDCouplingFieldDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getEndTime(self)


    def accumulate(self, *args) -> "PyObject *":
        """
        accumulate(MEDCouplingFieldDouble self, int compId) -> double
        accumulate(MEDCouplingFieldDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_accumulate(self, *args)


    def integral(self, *args) -> "PyObject *":
        """
        integral(MEDCouplingFieldDouble self, int compId, bool isWAbs) -> double
        integral(MEDCouplingFieldDouble self, bool isWAbs) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_integral(self, *args)


    def getWeightedAverageValue(self, *args) -> "PyObject *":
        """
        getWeightedAverageValue(MEDCouplingFieldDouble self, int compId, bool isWAbs) -> double
        getWeightedAverageValue(MEDCouplingFieldDouble self, bool isWAbs=True) -> PyObject
        getWeightedAverageValue(MEDCouplingFieldDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getWeightedAverageValue(self, *args)


    def normL1(self, *args) -> "PyObject *":
        """
        normL1(MEDCouplingFieldDouble self, int compId) -> double
        normL1(MEDCouplingFieldDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_normL1(self, *args)


    def normL2(self, *args) -> "PyObject *":
        """
        normL2(MEDCouplingFieldDouble self, int compId) -> double
        normL2(MEDCouplingFieldDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_normL2(self, *args)


    def normMax(self, *args) -> "PyObject *":
        """
        normMax(MEDCouplingFieldDouble self, int compId) -> double
        normMax(MEDCouplingFieldDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_normMax(self, *args)


    def renumberCells(self, li: 'PyObject *', check: 'bool'=True) -> "void":
        """
        renumberCells(MEDCouplingFieldDouble self, PyObject * li, bool check=True)
        renumberCells(MEDCouplingFieldDouble self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_renumberCells(self, li, check)


    def renumberCellsWithoutMesh(self, li: 'PyObject *', check: 'bool'=True) -> "void":
        """
        renumberCellsWithoutMesh(MEDCouplingFieldDouble self, PyObject * li, bool check=True)
        renumberCellsWithoutMesh(MEDCouplingFieldDouble self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_renumberCellsWithoutMesh(self, li, check)


    def renumberNodes(self, li: 'PyObject *', eps: 'double'=1e-15) -> "void":
        """
        renumberNodes(MEDCouplingFieldDouble self, PyObject * li, double eps=1e-15)
        renumberNodes(MEDCouplingFieldDouble self, PyObject * li)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_renumberNodes(self, li, eps)


    def renumberNodesWithoutMesh(self, li: 'PyObject *', newNbOfNodes: 'int', eps: 'double'=1e-15) -> "void":
        """
        renumberNodesWithoutMesh(MEDCouplingFieldDouble self, PyObject * li, int newNbOfNodes, double eps=1e-15)
        renumberNodesWithoutMesh(MEDCouplingFieldDouble self, PyObject * li, int newNbOfNodes)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_renumberNodesWithoutMesh(self, li, newNbOfNodes, eps)


    def buildSubPart(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        buildSubPart(MEDCouplingFieldDouble self, PyObject * li) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_buildSubPart(self, li)


    def __getitem__(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        __getitem__(MEDCouplingFieldDouble self, PyObject * li) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___getitem__(self, li)


    def getMaxValue2(self) -> "PyObject *":
        """
        getMaxValue2(MEDCouplingFieldDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getMaxValue2(self)


    def getMinValue2(self) -> "PyObject *":
        """
        getMinValue2(MEDCouplingFieldDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getMinValue2(self)


    def keepSelectedComponents(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        keepSelectedComponents(MEDCouplingFieldDouble self, PyObject * li) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_keepSelectedComponents(self, li)


    def setSelectedComponents(self, f: 'MEDCouplingFieldDouble', li: 'PyObject *') -> "void":
        """
        setSelectedComponents(MEDCouplingFieldDouble self, MEDCouplingFieldDouble f, PyObject * li)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_setSelectedComponents(self, f, li)


    def extractSlice3D(self, origin: 'PyObject *', vec: 'PyObject *', eps: 'double') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        extractSlice3D(MEDCouplingFieldDouble self, PyObject * origin, PyObject * vec, double eps) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_extractSlice3D(self, origin, vec, eps)


    def __add__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        __add__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___add__(self, obj)


    def __radd__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        __radd__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___radd__(self, obj)


    def __sub__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        __sub__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___sub__(self, obj)


    def __rsub__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        __rsub__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___rsub__(self, obj)


    def __mul__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        __mul__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___mul__(self, obj)


    def __rmul__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        __rmul__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___rmul__(self, obj)


    def __div__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        __div__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___div__(self, obj)


    def __rdiv__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        __rdiv__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___rdiv__(self, obj)


    def __pow__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        __pow__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___pow__(self, obj)


    def __neg__(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        __neg__(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___neg__(self)


    def ___iadd___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___iadd___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble____iadd___(self, trueSelf, obj)


    def ___isub___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___isub___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble____isub___(self, trueSelf, obj)


    def ___imul___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___imul___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble____imul___(self, trueSelf, obj)


    def ___idiv___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___idiv___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble____idiv___(self, trueSelf, obj)


    def ___ipow___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        """
        ___ipow___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble____ipow___(self, trueSelf, obj)


    def MergeFields(*args) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        MergeFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        MergeFields(PyObject * li) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_MergeFields(*args)

    MergeFields = staticmethod(MergeFields)

    def WriteVTK(fileName: 'char const *', li: 'PyObject *', isBinary: 'bool'=True) -> "std::string":
        """
        WriteVTK(char const * fileName, PyObject * li, bool isBinary=True) -> std::string
        WriteVTK(char const * fileName, PyObject * li) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_WriteVTK(fileName, li, isBinary)

    WriteVTK = staticmethod(WriteVTK)

    def getTinySerializationInformation(self) -> "PyObject *":
        """
        getTinySerializationInformation(MEDCouplingFieldDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_getTinySerializationInformation(self)


    def serialize(self) -> "PyObject *":
        """
        serialize(MEDCouplingFieldDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble_serialize(self)


    def __getstate__(self) -> "PyObject *":
        """
        __getstate__(MEDCouplingFieldDouble self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___getstate__(self)


    def __setstate__(self, inp: 'PyObject *') -> "void":
        """
        __setstate__(MEDCouplingFieldDouble self, PyObject * inp)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldDouble___setstate__(self, inp)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingFieldDouble
    __del__ = lambda self: None
MEDCouplingFieldDouble_swigregister = _MEDCouplingCompat.MEDCouplingFieldDouble_swigregister
MEDCouplingFieldDouble_swigregister(MEDCouplingFieldDouble)

def MEDCouplingFieldDouble_New(*args) -> "MEDCoupling::MEDCouplingFieldDouble *":
    """
    New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldDouble
    New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldDouble
    New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldDouble
    MEDCouplingFieldDouble_New(MEDCouplingFieldTemplate ft) -> MEDCouplingFieldDouble

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDouble_New(*args)

def MEDCouplingFieldDouble_MeldFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    """
    MEDCouplingFieldDouble_MeldFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDouble_MeldFields(f1, f2)

def MEDCouplingFieldDouble_DotFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    """
    MEDCouplingFieldDouble_DotFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDouble_DotFields(f1, f2)

def MEDCouplingFieldDouble_CrossProductFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    """
    MEDCouplingFieldDouble_CrossProductFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDouble_CrossProductFields(f1, f2)

def MEDCouplingFieldDouble_MaxFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    """
    MEDCouplingFieldDouble_MaxFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDouble_MaxFields(f1, f2)

def MEDCouplingFieldDouble_MinFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    """
    MEDCouplingFieldDouble_MinFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDouble_MinFields(f1, f2)

def MEDCouplingFieldDouble_AddFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    """
    MEDCouplingFieldDouble_AddFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDouble_AddFields(f1, f2)

def MEDCouplingFieldDouble_SubstractFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    """
    MEDCouplingFieldDouble_SubstractFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDouble_SubstractFields(f1, f2)

def MEDCouplingFieldDouble_MultiplyFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    """
    MEDCouplingFieldDouble_MultiplyFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDouble_MultiplyFields(f1, f2)

def MEDCouplingFieldDouble_DivideFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    """
    MEDCouplingFieldDouble_DivideFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDouble_DivideFields(f1, f2)

def MEDCouplingFieldDouble_MergeFields(*args) -> "MEDCoupling::MEDCouplingFieldDouble *":
    """
    MergeFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
    MEDCouplingFieldDouble_MergeFields(PyObject * li) -> MEDCouplingFieldDouble

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDouble_MergeFields(*args)

def MEDCouplingFieldDouble_WriteVTK(fileName: 'char const *', li: 'PyObject *', isBinary: 'bool'=True) -> "std::string":
    """
    WriteVTK(char const * fileName, PyObject * li, bool isBinary=True) -> std::string
    MEDCouplingFieldDouble_WriteVTK(char const * fileName, PyObject * li) -> std::string

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldDouble_WriteVTK(fileName, li, isBinary)

class MEDCouplingMultiFields(RefCountObject, TimeLabel):
    """1"""

    __swig_setmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingMultiFields, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingMultiFields, name)
    __repr__ = _swig_repr

    def getNumberOfFields(self) -> "int":
        """
        getNumberOfFields(MEDCouplingMultiFields self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields_getNumberOfFields(self)


    def deepCopy(self) -> "MEDCoupling::MEDCouplingMultiFields *":
        """
        deepCopy(MEDCouplingMultiFields self) -> MEDCouplingMultiFields

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields_deepCopy(self)


    def simpleRepr(self) -> "std::string":
        """
        simpleRepr(MEDCouplingMultiFields self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields_simpleRepr(self)


    def advancedRepr(self) -> "std::string":
        """
        advancedRepr(MEDCouplingMultiFields self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields_advancedRepr(self)


    def isEqual(self, other: 'MEDCouplingMultiFields', meshPrec: 'double', valsPrec: 'double') -> "bool":
        """
        isEqual(MEDCouplingMultiFields self, MEDCouplingMultiFields other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields_isEqual(self, other, meshPrec, valsPrec)


    def isEqualWithoutConsideringStr(self, other: 'MEDCouplingMultiFields', meshPrec: 'double', valsPrec: 'double') -> "bool":
        """
        isEqualWithoutConsideringStr(MEDCouplingMultiFields self, MEDCouplingMultiFields other, double meshPrec, double valsPrec) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields_isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec)


    def checkConsistencyLight(self) -> "void":
        """
        checkConsistencyLight(MEDCouplingMultiFields self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields_checkConsistencyLight(self)


    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingMultiFields self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields___str__(self)


    def New(li: 'PyObject *') -> "MEDCoupling::MEDCouplingMultiFields *":
        """
        New(PyObject * li) -> MEDCouplingMultiFields

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields_New(li)

    New = staticmethod(New)

    def __init__(self, li: 'PyObject *'):
        """
        __init__(MEDCoupling::MEDCouplingMultiFields self, PyObject * li) -> MEDCouplingMultiFields

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingMultiFields(li)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getFields(self) -> "PyObject *":
        """
        getFields(MEDCouplingMultiFields self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields_getFields(self)


    def getFieldAtPos(self, id: 'int') -> "PyObject *":
        """
        getFieldAtPos(MEDCouplingMultiFields self, int id) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields_getFieldAtPos(self, id)


    def getMeshes(self) -> "PyObject *":
        """
        getMeshes(MEDCouplingMultiFields self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields_getMeshes(self)


    def getDifferentMeshes(self) -> "PyObject *":
        """
        getDifferentMeshes(MEDCouplingMultiFields self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields_getDifferentMeshes(self)


    def getArrays(self) -> "PyObject *":
        """
        getArrays(MEDCouplingMultiFields self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields_getArrays(self)


    def getDifferentArrays(self) -> "PyObject *":
        """
        getDifferentArrays(MEDCouplingMultiFields self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingMultiFields_getDifferentArrays(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingMultiFields
    __del__ = lambda self: None
MEDCouplingMultiFields_swigregister = _MEDCouplingCompat.MEDCouplingMultiFields_swigregister
MEDCouplingMultiFields_swigregister(MEDCouplingMultiFields)

def MEDCouplingMultiFields_New(li: 'PyObject *') -> "MEDCoupling::MEDCouplingMultiFields *":
    """
    MEDCouplingMultiFields_New(PyObject * li) -> MEDCouplingMultiFields

    1
    """
    return _MEDCouplingCompat.MEDCouplingMultiFields_New(li)

class MEDCouplingFieldInt(MEDCouplingFieldTint):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldTint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldInt, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldTint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldInt, name)

    def New(*args) -> "MEDCoupling::MEDCouplingFieldInt *":
        """
        New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldInt
        New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldInt
        New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldInt
        New(MEDCouplingFieldTemplate ft) -> MEDCouplingFieldInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_New(*args)

    New = staticmethod(New)

    def isEqual(self, other: 'MEDCouplingFieldInt', meshPrec: 'double', valsPrec: 'int') -> "bool":
        """
        isEqual(MEDCouplingFieldInt self, MEDCouplingFieldInt other, double meshPrec, int valsPrec) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_isEqual(self, other, meshPrec, valsPrec)


    def isEqualWithoutConsideringStr(self, other: 'MEDCouplingFieldInt', meshPrec: 'double', valsPrec: 'int') -> "bool":
        """
        isEqualWithoutConsideringStr(MEDCouplingFieldInt self, MEDCouplingFieldInt other, double meshPrec, int valsPrec) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec)


    def setTimeUnit(self, unit: 'std::string const &') -> "void":
        """
        setTimeUnit(MEDCouplingFieldInt self, std::string const & unit)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_setTimeUnit(self, unit)


    def getTimeUnit(self) -> "std::string":
        """
        getTimeUnit(MEDCouplingFieldInt self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_getTimeUnit(self)


    def setTime(self, val: 'double', iteration: 'int', order: 'int') -> "void":
        """
        setTime(MEDCouplingFieldInt self, double val, int iteration, int order)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_setTime(self, val, iteration, order)


    def setArray(self, array: 'DataArrayInt') -> "void":
        """
        setArray(MEDCouplingFieldInt self, DataArrayInt array)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_setArray(self, array)


    def deepCopy(self) -> "MEDCoupling::MEDCouplingFieldInt *":
        """
        deepCopy(MEDCouplingFieldInt self) -> MEDCouplingFieldInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_deepCopy(self)


    def clone(self, recDeepCpy: 'bool') -> "MEDCoupling::MEDCouplingFieldInt *":
        """
        clone(MEDCouplingFieldInt self, bool recDeepCpy) -> MEDCouplingFieldInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_clone(self, recDeepCpy)


    def cloneWithMesh(self, recDeepCpy: 'bool') -> "MEDCoupling::MEDCouplingFieldInt *":
        """
        cloneWithMesh(MEDCouplingFieldInt self, bool recDeepCpy) -> MEDCouplingFieldInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_cloneWithMesh(self, recDeepCpy)


    def convertToDblField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        convertToDblField(MEDCouplingFieldInt self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_convertToDblField(self)


    def buildSubPartRange(self, begin: 'int', end: 'int', step: 'int') -> "MEDCoupling::MEDCouplingFieldInt *":
        """
        buildSubPartRange(MEDCouplingFieldInt self, int begin, int end, int step) -> MEDCouplingFieldInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_buildSubPartRange(self, begin, end, step)


    def __init__(self, *args):
        """
        __init__(MEDCoupling::MEDCouplingFieldInt self, MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldInt
        __init__(MEDCoupling::MEDCouplingFieldInt self, MEDCoupling::TypeOfField type) -> MEDCouplingFieldInt
        __init__(MEDCoupling::MEDCouplingFieldInt self, MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldInt
        __init__(MEDCoupling::MEDCouplingFieldInt self, MEDCouplingFieldTemplate ft) -> MEDCouplingFieldInt

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingFieldInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isEqualIfNotWhy(self, other: 'MEDCouplingFieldInt', meshPrec: 'double', valsPrec: 'int') -> "PyObject *":
        """
        isEqualIfNotWhy(MEDCouplingFieldInt self, MEDCouplingFieldInt other, double meshPrec, int valsPrec) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_isEqualIfNotWhy(self, other, meshPrec, valsPrec)


    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingFieldInt self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt___str__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(MEDCouplingFieldInt self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt___repr__(self)


    def buildSubPart(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldInt *":
        """
        buildSubPart(MEDCouplingFieldInt self, PyObject * li) -> MEDCouplingFieldInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_buildSubPart(self, li)


    def __getitem__(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldInt *":
        """
        __getitem__(MEDCouplingFieldInt self, PyObject * li) -> MEDCouplingFieldInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt___getitem__(self, li)


    def getArray(self) -> "MEDCoupling::DataArrayInt *":
        """
        getArray(MEDCouplingFieldInt self) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_getArray(self)


    def getTime(self) -> "PyObject *":
        """
        getTime(MEDCouplingFieldInt self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_getTime(self)


    def getTinySerializationInformation(self) -> "PyObject *":
        """
        getTinySerializationInformation(MEDCouplingFieldInt self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_getTinySerializationInformation(self)


    def serialize(self) -> "PyObject *":
        """
        serialize(MEDCouplingFieldInt self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt_serialize(self)


    def __getstate__(self) -> "PyObject *":
        """
        __getstate__(MEDCouplingFieldInt self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt___getstate__(self)


    def __setstate__(self, inp: 'PyObject *') -> "void":
        """
        __setstate__(MEDCouplingFieldInt self, PyObject * inp)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldInt___setstate__(self, inp)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingFieldInt
    __del__ = lambda self: None
MEDCouplingFieldInt_swigregister = _MEDCouplingCompat.MEDCouplingFieldInt_swigregister
MEDCouplingFieldInt_swigregister(MEDCouplingFieldInt)

def MEDCouplingFieldInt_New(*args) -> "MEDCoupling::MEDCouplingFieldInt *":
    """
    New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldInt
    New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldInt
    New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldInt
    MEDCouplingFieldInt_New(MEDCouplingFieldTemplate ft) -> MEDCouplingFieldInt

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldInt_New(*args)

class MEDCouplingFieldFloat(MEDCouplingFieldTfloat):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingFieldTfloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingFieldTfloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldFloat, name)

    def New(*args) -> "MEDCoupling::MEDCouplingFieldFloat *":
        """
        New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldFloat
        New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldFloat
        New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldFloat
        New(MEDCouplingFieldTemplate ft) -> MEDCouplingFieldFloat

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_New(*args)

    New = staticmethod(New)

    def isEqual(self, other: 'MEDCouplingFieldFloat', meshPrec: 'double', valsPrec: 'float') -> "bool":
        """
        isEqual(MEDCouplingFieldFloat self, MEDCouplingFieldFloat other, double meshPrec, float valsPrec) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_isEqual(self, other, meshPrec, valsPrec)


    def isEqualWithoutConsideringStr(self, other: 'MEDCouplingFieldFloat', meshPrec: 'double', valsPrec: 'float') -> "bool":
        """
        isEqualWithoutConsideringStr(MEDCouplingFieldFloat self, MEDCouplingFieldFloat other, double meshPrec, float valsPrec) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec)


    def setTimeUnit(self, unit: 'std::string const &') -> "void":
        """
        setTimeUnit(MEDCouplingFieldFloat self, std::string const & unit)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_setTimeUnit(self, unit)


    def getTimeUnit(self) -> "std::string":
        """
        getTimeUnit(MEDCouplingFieldFloat self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_getTimeUnit(self)


    def setTime(self, val: 'double', iteration: 'int', order: 'int') -> "void":
        """
        setTime(MEDCouplingFieldFloat self, double val, int iteration, int order)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_setTime(self, val, iteration, order)


    def setArray(self, array: 'DataArrayFloat') -> "void":
        """
        setArray(MEDCouplingFieldFloat self, DataArrayFloat array)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_setArray(self, array)


    def deepCopy(self) -> "MEDCoupling::MEDCouplingFieldFloat *":
        """
        deepCopy(MEDCouplingFieldFloat self) -> MEDCouplingFieldFloat

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_deepCopy(self)


    def clone(self, recDeepCpy: 'bool') -> "MEDCoupling::MEDCouplingFieldFloat *":
        """
        clone(MEDCouplingFieldFloat self, bool recDeepCpy) -> MEDCouplingFieldFloat

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_clone(self, recDeepCpy)


    def cloneWithMesh(self, recDeepCpy: 'bool') -> "MEDCoupling::MEDCouplingFieldFloat *":
        """
        cloneWithMesh(MEDCouplingFieldFloat self, bool recDeepCpy) -> MEDCouplingFieldFloat

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_cloneWithMesh(self, recDeepCpy)


    def convertToDblField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        convertToDblField(MEDCouplingFieldFloat self) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_convertToDblField(self)


    def buildSubPartRange(self, begin: 'int', end: 'int', step: 'int') -> "MEDCoupling::MEDCouplingFieldFloat *":
        """
        buildSubPartRange(MEDCouplingFieldFloat self, int begin, int end, int step) -> MEDCouplingFieldFloat

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_buildSubPartRange(self, begin, end, step)


    def __init__(self, *args):
        """
        __init__(MEDCoupling::MEDCouplingFieldFloat self, MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldFloat
        __init__(MEDCoupling::MEDCouplingFieldFloat self, MEDCoupling::TypeOfField type) -> MEDCouplingFieldFloat
        __init__(MEDCoupling::MEDCouplingFieldFloat self, MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldFloat
        __init__(MEDCoupling::MEDCouplingFieldFloat self, MEDCouplingFieldTemplate ft) -> MEDCouplingFieldFloat

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingFieldFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isEqualIfNotWhy(self, other: 'MEDCouplingFieldFloat', meshPrec: 'double', valsPrec: 'float') -> "PyObject *":
        """
        isEqualIfNotWhy(MEDCouplingFieldFloat self, MEDCouplingFieldFloat other, double meshPrec, float valsPrec) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_isEqualIfNotWhy(self, other, meshPrec, valsPrec)


    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingFieldFloat self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat___str__(self)


    def __repr__(self) -> "std::string":
        """
        __repr__(MEDCouplingFieldFloat self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat___repr__(self)


    def buildSubPart(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldFloat *":
        """
        buildSubPart(MEDCouplingFieldFloat self, PyObject * li) -> MEDCouplingFieldFloat

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_buildSubPart(self, li)


    def __getitem__(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldFloat *":
        """
        __getitem__(MEDCouplingFieldFloat self, PyObject * li) -> MEDCouplingFieldFloat

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat___getitem__(self, li)


    def getArray(self) -> "MEDCoupling::DataArrayFloat *":
        """
        getArray(MEDCouplingFieldFloat self) -> DataArrayFloat

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_getArray(self)


    def getTime(self) -> "PyObject *":
        """
        getTime(MEDCouplingFieldFloat self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_getTime(self)


    def getTinySerializationInformation(self) -> "PyObject *":
        """
        getTinySerializationInformation(MEDCouplingFieldFloat self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_getTinySerializationInformation(self)


    def serialize(self) -> "PyObject *":
        """
        serialize(MEDCouplingFieldFloat self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat_serialize(self)


    def __getstate__(self) -> "PyObject *":
        """
        __getstate__(MEDCouplingFieldFloat self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat___getstate__(self)


    def __setstate__(self, inp: 'PyObject *') -> "void":
        """
        __setstate__(MEDCouplingFieldFloat self, PyObject * inp)

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldFloat___setstate__(self, inp)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingFieldFloat
    __del__ = lambda self: None
MEDCouplingFieldFloat_swigregister = _MEDCouplingCompat.MEDCouplingFieldFloat_swigregister
MEDCouplingFieldFloat_swigregister(MEDCouplingFieldFloat)

def MEDCouplingFieldFloat_New(*args) -> "MEDCoupling::MEDCouplingFieldFloat *":
    """
    New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldFloat
    New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldFloat
    New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td) -> MEDCouplingFieldFloat
    MEDCouplingFieldFloat_New(MEDCouplingFieldTemplate ft) -> MEDCouplingFieldFloat

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldFloat_New(*args)

class MEDCouplingDefinitionTime(_object):
    """1"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingDefinitionTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingDefinitionTime, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(MEDCoupling::MEDCouplingDefinitionTime self) -> MEDCouplingDefinitionTime

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingDefinitionTime()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, other: 'MEDCouplingDefinitionTime') -> "void":
        """
        assign(MEDCouplingDefinitionTime self, MEDCouplingDefinitionTime other)

        1
        """
        return _MEDCouplingCompat.MEDCouplingDefinitionTime_assign(self, other)


    def isEqual(self, other: 'MEDCouplingDefinitionTime') -> "bool":
        """
        isEqual(MEDCouplingDefinitionTime self, MEDCouplingDefinitionTime other) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingDefinitionTime_isEqual(self, other)


    def getTimeResolution(self) -> "double":
        """
        getTimeResolution(MEDCouplingDefinitionTime self) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingDefinitionTime_getTimeResolution(self)


    def getHotSpotsTime(self) -> "std::vector< double,std::allocator< double > >":
        """
        getHotSpotsTime(MEDCouplingDefinitionTime self) -> dvec

        1
        """
        return _MEDCouplingCompat.MEDCouplingDefinitionTime_getHotSpotsTime(self)


    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingDefinitionTime self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingDefinitionTime___str__(self)


    def getIdsOnTimeRight(self, tm: 'double') -> "PyObject *":
        """
        getIdsOnTimeRight(MEDCouplingDefinitionTime self, double tm) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingDefinitionTime_getIdsOnTimeRight(self, tm)


    def getIdsOnTimeLeft(self, tm: 'double') -> "PyObject *":
        """
        getIdsOnTimeLeft(MEDCouplingDefinitionTime self, double tm) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingDefinitionTime_getIdsOnTimeLeft(self, tm)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingDefinitionTime
    __del__ = lambda self: None
MEDCouplingDefinitionTime_swigregister = _MEDCouplingCompat.MEDCouplingDefinitionTime_swigregister
MEDCouplingDefinitionTime_swigregister(MEDCouplingDefinitionTime)

class MEDCouplingFieldOverTime(MEDCouplingMultiFields):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingMultiFields]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingFieldOverTime, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingMultiFields]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingFieldOverTime, name)
    __repr__ = _swig_repr

    def getTimeTolerance(self) -> "double":
        """
        getTimeTolerance(MEDCouplingFieldOverTime self) -> double

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldOverTime_getTimeTolerance(self)


    def getDefinitionTimeZone(self) -> "MEDCoupling::MEDCouplingDefinitionTime":
        """
        getDefinitionTimeZone(MEDCouplingFieldOverTime self) -> MEDCouplingDefinitionTime

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldOverTime_getDefinitionTimeZone(self)


    def __init__(self, li: 'PyObject *'):
        """
        __init__(MEDCoupling::MEDCouplingFieldOverTime self, PyObject * li) -> MEDCouplingFieldOverTime

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingFieldOverTime(li)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self) -> "std::string":
        """
        __str__(MEDCouplingFieldOverTime self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldOverTime___str__(self)


    def New(li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldOverTime *":
        """
        New(PyObject * li) -> MEDCouplingFieldOverTime

        1
        """
        return _MEDCouplingCompat.MEDCouplingFieldOverTime_New(li)

    New = staticmethod(New)
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingFieldOverTime
    __del__ = lambda self: None
MEDCouplingFieldOverTime_swigregister = _MEDCouplingCompat.MEDCouplingFieldOverTime_swigregister
MEDCouplingFieldOverTime_swigregister(MEDCouplingFieldOverTime)

def MEDCouplingFieldOverTime_New(li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldOverTime *":
    """
    MEDCouplingFieldOverTime_New(PyObject * li) -> MEDCouplingFieldOverTime

    1
    """
    return _MEDCouplingCompat.MEDCouplingFieldOverTime_New(li)

class MEDCouplingCartesianAMRPatchGen(RefCountObject):
    """1"""

    __swig_setmethods__ = {}
    for _s in [RefCountObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingCartesianAMRPatchGen, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingCartesianAMRPatchGen, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCellsRecursiveWithOverlap(self) -> "int":
        """
        getNumberOfCellsRecursiveWithOverlap(MEDCouplingCartesianAMRPatchGen self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRPatchGen_getNumberOfCellsRecursiveWithOverlap(self)


    def getNumberOfCellsRecursiveWithoutOverlap(self) -> "int":
        """
        getNumberOfCellsRecursiveWithoutOverlap(MEDCouplingCartesianAMRPatchGen self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRPatchGen_getNumberOfCellsRecursiveWithoutOverlap(self)


    def getMaxNumberOfLevelsRelativeToThis(self) -> "int":
        """
        getMaxNumberOfLevelsRelativeToThis(MEDCouplingCartesianAMRPatchGen self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRPatchGen_getMaxNumberOfLevelsRelativeToThis(self)


    def getMesh(self) -> "MEDCouplingCartesianAMRMeshGen *":
        """
        getMesh(MEDCouplingCartesianAMRPatchGen self) -> MEDCouplingCartesianAMRMeshGen *

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRPatchGen_getMesh(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingCartesianAMRPatchGen
    __del__ = lambda self: None
MEDCouplingCartesianAMRPatchGen_swigregister = _MEDCouplingCompat.MEDCouplingCartesianAMRPatchGen_swigregister
MEDCouplingCartesianAMRPatchGen_swigregister(MEDCouplingCartesianAMRPatchGen)

class MEDCouplingCartesianAMRPatch(MEDCouplingCartesianAMRPatchGen):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingCartesianAMRPatchGen]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingCartesianAMRPatch, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingCartesianAMRPatchGen]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingCartesianAMRPatch, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfOverlapedCellsForFather(self) -> "int":
        """
        getNumberOfOverlapedCellsForFather(MEDCouplingCartesianAMRPatch self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRPatch_getNumberOfOverlapedCellsForFather(self)


    def isInMyNeighborhood(self, other: 'MEDCouplingCartesianAMRPatch', ghostLev: 'int') -> "bool":
        """
        isInMyNeighborhood(MEDCouplingCartesianAMRPatch self, MEDCouplingCartesianAMRPatch other, int ghostLev) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRPatch_isInMyNeighborhood(self, other, ghostLev)


    def computeCellGridSt(self) -> "std::vector< int,std::allocator< int > >":
        """
        computeCellGridSt(MEDCouplingCartesianAMRPatch self) -> ivec

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRPatch_computeCellGridSt(self)


    def getBLTRRange(self) -> "PyObject *":
        """
        getBLTRRange(MEDCouplingCartesianAMRPatch self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRPatch_getBLTRRange(self)


    def getBLTRRangeRelativeToGF(self) -> "PyObject *":
        """
        getBLTRRangeRelativeToGF(MEDCouplingCartesianAMRPatch self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRPatch_getBLTRRangeRelativeToGF(self)


    def addPatch(self, bottomLeftTopRight: 'PyObject *', factors: 'ivec') -> "void":
        """
        addPatch(MEDCouplingCartesianAMRPatch self, PyObject * bottomLeftTopRight, ivec factors)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRPatch_addPatch(self, bottomLeftTopRight, factors)


    def __getitem__(self, patchId: 'int') -> "MEDCoupling::MEDCouplingCartesianAMRPatch *":
        """
        __getitem__(MEDCouplingCartesianAMRPatch self, int patchId) -> MEDCouplingCartesianAMRPatch

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRPatch___getitem__(self, patchId)


    def __delitem__(self, patchId: 'int') -> "void":
        """
        __delitem__(MEDCouplingCartesianAMRPatch self, int patchId)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRPatch___delitem__(self, patchId)


    def __len__(self) -> "int":
        """
        __len__(MEDCouplingCartesianAMRPatch self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRPatch___len__(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingCartesianAMRPatch
    __del__ = lambda self: None
MEDCouplingCartesianAMRPatch_swigregister = _MEDCouplingCompat.MEDCouplingCartesianAMRPatch_swigregister
MEDCouplingCartesianAMRPatch_swigregister(MEDCouplingCartesianAMRPatch)

class MEDCouplingCartesianAMRPatchGF(MEDCouplingCartesianAMRPatchGen):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingCartesianAMRPatchGen]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingCartesianAMRPatchGF, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingCartesianAMRPatchGen]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingCartesianAMRPatchGF, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingCartesianAMRPatchGF
    __del__ = lambda self: None
MEDCouplingCartesianAMRPatchGF_swigregister = _MEDCouplingCompat.MEDCouplingCartesianAMRPatchGF_swigregister
MEDCouplingCartesianAMRPatchGF_swigregister(MEDCouplingCartesianAMRPatchGF)

class MEDCouplingCartesianAMRMeshGen(RefCountObject, TimeLabel):
    """1"""

    __swig_setmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingCartesianAMRMeshGen, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingCartesianAMRMeshGen, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getAbsoluteLevel(self) -> "int":
        """
        getAbsoluteLevel(MEDCouplingCartesianAMRMeshGen self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getAbsoluteLevel(self)


    def getAbsoluteLevelRelativeTo(self, ref: 'MEDCouplingCartesianAMRMeshGen') -> "int":
        """
        getAbsoluteLevelRelativeTo(MEDCouplingCartesianAMRMeshGen self, MEDCouplingCartesianAMRMeshGen ref) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getAbsoluteLevelRelativeTo(self, ref)


    def getPositionRelativeTo(self, ref: 'MEDCouplingCartesianAMRMeshGen') -> "std::vector< int,std::allocator< int > >":
        """
        getPositionRelativeTo(MEDCouplingCartesianAMRMeshGen self, MEDCouplingCartesianAMRMeshGen ref) -> ivec

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getPositionRelativeTo(self, ref)


    def getSpaceDimension(self) -> "int":
        """
        getSpaceDimension(MEDCouplingCartesianAMRMeshGen self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getSpaceDimension(self)


    def getFactors(self) -> "std::vector< int,std::allocator< int > > const &":
        """
        getFactors(MEDCouplingCartesianAMRMeshGen self) -> ivec

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getFactors(self)


    def setFactors(self, newFactors: 'ivec') -> "void":
        """
        setFactors(MEDCouplingCartesianAMRMeshGen self, ivec newFactors)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_setFactors(self, newFactors)


    def getMaxNumberOfLevelsRelativeToThis(self) -> "int":
        """
        getMaxNumberOfLevelsRelativeToThis(MEDCouplingCartesianAMRMeshGen self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getMaxNumberOfLevelsRelativeToThis(self)


    def getNumberOfCellsAtCurrentLevel(self) -> "int":
        """
        getNumberOfCellsAtCurrentLevel(MEDCouplingCartesianAMRMeshGen self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getNumberOfCellsAtCurrentLevel(self)


    def getNumberOfCellsAtCurrentLevelGhost(self, ghostLev: 'int') -> "int":
        """
        getNumberOfCellsAtCurrentLevelGhost(MEDCouplingCartesianAMRMeshGen self, int ghostLev) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getNumberOfCellsAtCurrentLevelGhost(self, ghostLev)


    def getNumberOfCellsRecursiveWithOverlap(self) -> "int":
        """
        getNumberOfCellsRecursiveWithOverlap(MEDCouplingCartesianAMRMeshGen self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getNumberOfCellsRecursiveWithOverlap(self)


    def getNumberOfCellsRecursiveWithoutOverlap(self) -> "int":
        """
        getNumberOfCellsRecursiveWithoutOverlap(MEDCouplingCartesianAMRMeshGen self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getNumberOfCellsRecursiveWithoutOverlap(self)


    def isPatchInNeighborhoodOf(self, patchId1: 'int', patchId2: 'int', ghostLev: 'int') -> "bool":
        """
        isPatchInNeighborhoodOf(MEDCouplingCartesianAMRMeshGen self, int patchId1, int patchId2, int ghostLev) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_isPatchInNeighborhoodOf(self, patchId1, patchId2, ghostLev)


    def detachFromFather(self) -> "void":
        """
        detachFromFather(MEDCouplingCartesianAMRMeshGen self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_detachFromFather(self)


    def getNumberOfPatches(self) -> "int":
        """
        getNumberOfPatches(MEDCouplingCartesianAMRMeshGen self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getNumberOfPatches(self)


    def getPatchIdFromChildMesh(self, mesh: 'MEDCouplingCartesianAMRMeshGen') -> "int":
        """
        getPatchIdFromChildMesh(MEDCouplingCartesianAMRMeshGen self, MEDCouplingCartesianAMRMeshGen mesh) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getPatchIdFromChildMesh(self, mesh)


    def buildUnstructured(self) -> "MEDCoupling::MEDCouplingUMesh *":
        """
        buildUnstructured(MEDCouplingCartesianAMRMeshGen self) -> MEDCouplingUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_buildUnstructured(self)


    def extractGhostFrom(self, ghostSz: 'int', arr: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        """
        extractGhostFrom(MEDCouplingCartesianAMRMeshGen self, int ghostSz, DataArrayDouble arr) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_extractGhostFrom(self, ghostSz, arr)


    def getPatchIdsInTheNeighborhoodOf(self, patchId: 'int', ghostLev: 'int') -> "std::vector< int,std::allocator< int > >":
        """
        getPatchIdsInTheNeighborhoodOf(MEDCouplingCartesianAMRMeshGen self, int patchId, int ghostLev) -> ivec

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getPatchIdsInTheNeighborhoodOf(self, patchId, ghostLev)


    def buildMeshFromPatchEnvelop(self) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        """
        buildMeshFromPatchEnvelop(MEDCouplingCartesianAMRMeshGen self) -> MEDCoupling1SGTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_buildMeshFromPatchEnvelop(self)


    def buildMeshOfDirectChildrenOnly(self) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        """
        buildMeshOfDirectChildrenOnly(MEDCouplingCartesianAMRMeshGen self) -> MEDCoupling1SGTUMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_buildMeshOfDirectChildrenOnly(self)


    def removeAllPatches(self) -> "void":
        """
        removeAllPatches(MEDCouplingCartesianAMRMeshGen self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_removeAllPatches(self)


    def removePatch(self, patchId: 'int') -> "void":
        """
        removePatch(MEDCouplingCartesianAMRMeshGen self, int patchId)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_removePatch(self, patchId)


    def createPatchesFromCriterion(self, *args) -> "void":
        """
        createPatchesFromCriterion(MEDCouplingCartesianAMRMeshGen self, BoxSplittingOptions bso, DataArrayByte criterion, ivec factors)
        createPatchesFromCriterion(MEDCouplingCartesianAMRMeshGen self, BoxSplittingOptions bso, DataArrayDouble criterion, ivec factors, double eps)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_createPatchesFromCriterion(self, *args)


    def createCellFieldOnPatch(self, patchId: 'int', cellFieldOnThis: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        """
        createCellFieldOnPatch(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnThis) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_createCellFieldOnPatch(self, patchId, cellFieldOnThis)


    def fillCellFieldOnPatch(self, patchId: 'int', cellFieldOnThis: 'DataArrayDouble', cellFieldOnPatch: 'DataArrayDouble', isConservative: 'bool'=True) -> "void":
        """
        fillCellFieldOnPatch(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnThis, DataArrayDouble cellFieldOnPatch, bool isConservative=True)
        fillCellFieldOnPatch(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnThis, DataArrayDouble cellFieldOnPatch)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatch(self, patchId, cellFieldOnThis, cellFieldOnPatch, isConservative)


    def fillCellFieldOnPatchGhost(self, patchId: 'int', cellFieldOnThis: 'DataArrayDouble', cellFieldOnPatch: 'DataArrayDouble', ghostLev: 'int', isConservative: 'bool'=True) -> "void":
        """
        fillCellFieldOnPatchGhost(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnThis, DataArrayDouble cellFieldOnPatch, int ghostLev, bool isConservative=True)
        fillCellFieldOnPatchGhost(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnThis, DataArrayDouble cellFieldOnPatch, int ghostLev)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchGhost(self, patchId, cellFieldOnThis, cellFieldOnPatch, ghostLev, isConservative)


    def fillCellFieldOnPatchOnlyOnGhostZone(self, patchId: 'int', cellFieldOnThis: 'DataArrayDouble', cellFieldOnPatch: 'DataArrayDouble', ghostLev: 'int') -> "void":
        """
        fillCellFieldOnPatchOnlyOnGhostZone(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnThis, DataArrayDouble cellFieldOnPatch, int ghostLev)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchOnlyOnGhostZone(self, patchId, cellFieldOnThis, cellFieldOnPatch, ghostLev)


    def fillCellFieldOnPatchOnlyOnGhostZoneWith(self, ghostLev: 'int', patchToBeModified: 'MEDCouplingCartesianAMRPatch', neighborPatch: 'MEDCouplingCartesianAMRPatch', cellFieldOnPatch: 'DataArrayDouble', cellFieldNeighbor: 'DataArrayDouble') -> "void":
        """
        fillCellFieldOnPatchOnlyOnGhostZoneWith(MEDCouplingCartesianAMRMeshGen self, int ghostLev, MEDCouplingCartesianAMRPatch patchToBeModified, MEDCouplingCartesianAMRPatch neighborPatch, DataArrayDouble cellFieldOnPatch, DataArrayDouble cellFieldNeighbor)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchOnlyOnGhostZoneWith(self, ghostLev, patchToBeModified, neighborPatch, cellFieldOnPatch, cellFieldNeighbor)


    def fillCellFieldComingFromPatch(self, patchId: 'int', cellFieldOnPatch: 'DataArrayDouble', cellFieldOnThis: 'DataArrayDouble', isConservative: 'bool'=True) -> "void":
        """
        fillCellFieldComingFromPatch(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnPatch, DataArrayDouble cellFieldOnThis, bool isConservative=True)
        fillCellFieldComingFromPatch(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnPatch, DataArrayDouble cellFieldOnThis)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_fillCellFieldComingFromPatch(self, patchId, cellFieldOnPatch, cellFieldOnThis, isConservative)


    def fillCellFieldComingFromPatchGhost(self, patchId: 'int', cellFieldOnPatch: 'DataArrayDouble', cellFieldOnThis: 'DataArrayDouble', ghostLev: 'int', isConservative: 'bool'=True) -> "void":
        """
        fillCellFieldComingFromPatchGhost(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnPatch, DataArrayDouble cellFieldOnThis, int ghostLev, bool isConservative=True)
        fillCellFieldComingFromPatchGhost(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnPatch, DataArrayDouble cellFieldOnThis, int ghostLev)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_fillCellFieldComingFromPatchGhost(self, patchId, cellFieldOnPatch, cellFieldOnThis, ghostLev, isConservative)


    def findPatchesInTheNeighborhoodOf(self, patchId: 'int', ghostLev: 'int') -> "MEDCoupling::DataArrayInt *":
        """
        findPatchesInTheNeighborhoodOf(MEDCouplingCartesianAMRMeshGen self, int patchId, int ghostLev) -> DataArrayInt

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_findPatchesInTheNeighborhoodOf(self, patchId, ghostLev)


    def buildPythonDumpOfThis(self) -> "std::string":
        """
        buildPythonDumpOfThis(MEDCouplingCartesianAMRMeshGen self) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_buildPythonDumpOfThis(self)


    def addPatch(self, bottomLeftTopRight: 'PyObject *', factors: 'ivec') -> "void":
        """
        addPatch(MEDCouplingCartesianAMRMeshGen self, PyObject * bottomLeftTopRight, ivec factors)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_addPatch(self, bottomLeftTopRight, factors)


    def getPatches(self) -> "PyObject *":
        """
        getPatches(MEDCouplingCartesianAMRMeshGen self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getPatches(self)


    def deepCopy(self, father: 'MEDCouplingCartesianAMRMeshGen') -> "PyObject *":
        """
        deepCopy(MEDCouplingCartesianAMRMeshGen self, MEDCouplingCartesianAMRMeshGen father) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_deepCopy(self, father)


    def getPatchAtPosition(self, pos: 'ivec') -> "MEDCoupling::MEDCouplingCartesianAMRPatch *":
        """
        getPatchAtPosition(MEDCouplingCartesianAMRMeshGen self, ivec pos) -> MEDCouplingCartesianAMRPatch

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getPatchAtPosition(self, pos)


    def getMeshAtPosition(self, pos: 'ivec') -> "MEDCoupling::MEDCouplingCartesianAMRMeshGen *":
        """
        getMeshAtPosition(MEDCouplingCartesianAMRMeshGen self, ivec pos) -> MEDCouplingCartesianAMRMeshGen

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getMeshAtPosition(self, pos)


    def positionRelativeToGodFather(self) -> "PyObject *":
        """
        positionRelativeToGodFather(MEDCouplingCartesianAMRMeshGen self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_positionRelativeToGodFather(self)


    def retrieveGridsAt(self, absoluteLev: 'int') -> "PyObject *":
        """
        retrieveGridsAt(MEDCouplingCartesianAMRMeshGen self, int absoluteLev) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_retrieveGridsAt(self, absoluteLev)


    def buildCellFieldOnRecurseWithoutOverlapWithoutGhost(self, ghostSz: 'int', recurseArrs: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        buildCellFieldOnRecurseWithoutOverlapWithoutGhost(MEDCouplingCartesianAMRMeshGen self, int ghostSz, PyObject * recurseArrs) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_buildCellFieldOnRecurseWithoutOverlapWithoutGhost(self, ghostSz, recurseArrs)


    def getFather(self) -> "MEDCoupling::MEDCouplingCartesianAMRMeshGen *":
        """
        getFather(MEDCouplingCartesianAMRMeshGen self) -> MEDCouplingCartesianAMRMeshGen

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getFather(self)


    def getGodFather(self) -> "MEDCoupling::MEDCouplingCartesianAMRMeshGen *":
        """
        getGodFather(MEDCouplingCartesianAMRMeshGen self) -> MEDCouplingCartesianAMRMeshGen

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getGodFather(self)


    def getPatch(self, patchId: 'int') -> "MEDCoupling::MEDCouplingCartesianAMRPatch *":
        """
        getPatch(MEDCouplingCartesianAMRMeshGen self, int patchId) -> MEDCouplingCartesianAMRPatch

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getPatch(self, patchId)


    def getImageMesh(self) -> "MEDCoupling::MEDCouplingIMesh *":
        """
        getImageMesh(MEDCouplingCartesianAMRMeshGen self) -> MEDCouplingIMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_getImageMesh(self)


    def __getitem__(self, patchId: 'int') -> "MEDCoupling::MEDCouplingCartesianAMRPatch *":
        """
        __getitem__(MEDCouplingCartesianAMRMeshGen self, int patchId) -> MEDCouplingCartesianAMRPatch

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen___getitem__(self, patchId)


    def fillCellFieldOnPatchGhostAdv(self, patchId: 'int', cellFieldOnThis: 'DataArrayDouble', ghostLev: 'int', arrsOnPatches: 'PyObject *', isConservative: 'bool'=True) -> "void":
        """
        fillCellFieldOnPatchGhostAdv(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnThis, int ghostLev, PyObject * arrsOnPatches, bool isConservative=True)
        fillCellFieldOnPatchGhostAdv(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnThis, int ghostLev, PyObject * arrsOnPatches)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchGhostAdv(self, patchId, cellFieldOnThis, ghostLev, arrsOnPatches, isConservative)


    def fillCellFieldOnPatchOnlyGhostAdv(self, patchId: 'int', ghostLev: 'int', arrsOnPatches: 'PyObject *') -> "void":
        """
        fillCellFieldOnPatchOnlyGhostAdv(MEDCouplingCartesianAMRMeshGen self, int patchId, int ghostLev, PyObject * arrsOnPatches)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchOnlyGhostAdv(self, patchId, ghostLev, arrsOnPatches)


    def __delitem__(self, patchId: 'int') -> "void":
        """
        __delitem__(MEDCouplingCartesianAMRMeshGen self, int patchId)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen___delitem__(self, patchId)


    def __len__(self) -> "int":
        """
        __len__(MEDCouplingCartesianAMRMeshGen self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen___len__(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingCartesianAMRMeshGen
    __del__ = lambda self: None
MEDCouplingCartesianAMRMeshGen_swigregister = _MEDCouplingCompat.MEDCouplingCartesianAMRMeshGen_swigregister
MEDCouplingCartesianAMRMeshGen_swigregister(MEDCouplingCartesianAMRMeshGen)

class MEDCouplingCartesianAMRMeshSub(MEDCouplingCartesianAMRMeshGen):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingCartesianAMRMeshGen]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingCartesianAMRMeshSub, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingCartesianAMRMeshGen]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingCartesianAMRMeshSub, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingCartesianAMRMeshSub
    __del__ = lambda self: None
MEDCouplingCartesianAMRMeshSub_swigregister = _MEDCouplingCompat.MEDCouplingCartesianAMRMeshSub_swigregister
MEDCouplingCartesianAMRMeshSub_swigregister(MEDCouplingCartesianAMRMeshSub)

class MEDCouplingCartesianAMRMesh(MEDCouplingCartesianAMRMeshGen):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingCartesianAMRMeshGen]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingCartesianAMRMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingCartesianAMRMeshGen]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingCartesianAMRMesh, name)
    __repr__ = _swig_repr

    def New(*args) -> "MEDCoupling::MEDCouplingCartesianAMRMesh *":
        """
        New(MEDCouplingIMesh mesh) -> MEDCouplingCartesianAMRMesh
        New(std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingCartesianAMRMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMesh_New(*args)

    New = staticmethod(New)

    def createPatchesFromCriterionML(self, bso: 'PyObject *', criterion: 'DataArrayDouble', factors: 'PyObject *', eps: 'double') -> "void":
        """
        createPatchesFromCriterionML(MEDCouplingCartesianAMRMesh self, PyObject * bso, DataArrayDouble criterion, PyObject * factors, double eps)

        1
        """
        return _MEDCouplingCompat.MEDCouplingCartesianAMRMesh_createPatchesFromCriterionML(self, bso, criterion, factors, eps)


    def __init__(self, *args):
        """
        __init__(MEDCoupling::MEDCouplingCartesianAMRMesh self, std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingCartesianAMRMesh
        __init__(MEDCoupling::MEDCouplingCartesianAMRMesh self, MEDCouplingIMesh mesh) -> MEDCouplingCartesianAMRMesh

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingCartesianAMRMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingCartesianAMRMesh
    __del__ = lambda self: None
MEDCouplingCartesianAMRMesh_swigregister = _MEDCouplingCompat.MEDCouplingCartesianAMRMesh_swigregister
MEDCouplingCartesianAMRMesh_swigregister(MEDCouplingCartesianAMRMesh)

def MEDCouplingCartesianAMRMesh_New(*args) -> "MEDCoupling::MEDCouplingCartesianAMRMesh *":
    """
    New(MEDCouplingIMesh mesh) -> MEDCouplingCartesianAMRMesh
    MEDCouplingCartesianAMRMesh_New(std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingCartesianAMRMesh

    1
    """
    return _MEDCouplingCompat.MEDCouplingCartesianAMRMesh_New(*args)

class MEDCouplingDataForGodFather(RefCountObject):
    """1"""

    __swig_setmethods__ = {}
    for _s in [RefCountObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingDataForGodFather, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingDataForGodFather, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def synchronizeFineToCoarse(self) -> "void":
        """
        synchronizeFineToCoarse(MEDCouplingDataForGodFather self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingDataForGodFather_synchronizeFineToCoarse(self)


    def synchronizeFineToCoarseBetween(self, fromLev: 'int', toLev: 'int') -> "void":
        """
        synchronizeFineToCoarseBetween(MEDCouplingDataForGodFather self, int fromLev, int toLev)

        1
        """
        return _MEDCouplingCompat.MEDCouplingDataForGodFather_synchronizeFineToCoarseBetween(self, fromLev, toLev)


    def synchronizeCoarseToFine(self) -> "void":
        """
        synchronizeCoarseToFine(MEDCouplingDataForGodFather self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingDataForGodFather_synchronizeCoarseToFine(self)


    def synchronizeCoarseToFineBetween(self, fromLev: 'int', toLev: 'int') -> "void":
        """
        synchronizeCoarseToFineBetween(MEDCouplingDataForGodFather self, int fromLev, int toLev)

        1
        """
        return _MEDCouplingCompat.MEDCouplingDataForGodFather_synchronizeCoarseToFineBetween(self, fromLev, toLev)


    def synchronizeAllGhostZones(self) -> "void":
        """
        synchronizeAllGhostZones(MEDCouplingDataForGodFather self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingDataForGodFather_synchronizeAllGhostZones(self)


    def synchronizeAllGhostZonesOfDirectChidrenOf(self, mesh: 'MEDCouplingCartesianAMRMeshGen') -> "void":
        """
        synchronizeAllGhostZonesOfDirectChidrenOf(MEDCouplingDataForGodFather self, MEDCouplingCartesianAMRMeshGen mesh)

        1
        """
        return _MEDCouplingCompat.MEDCouplingDataForGodFather_synchronizeAllGhostZonesOfDirectChidrenOf(self, mesh)


    def synchronizeAllGhostZonesAtASpecifiedLevel(self, level: 'int') -> "void":
        """
        synchronizeAllGhostZonesAtASpecifiedLevel(MEDCouplingDataForGodFather self, int level)

        1
        """
        return _MEDCouplingCompat.MEDCouplingDataForGodFather_synchronizeAllGhostZonesAtASpecifiedLevel(self, level)


    def synchronizeAllGhostZonesAtASpecifiedLevelUsingOnlyFather(self, level: 'int') -> "void":
        """
        synchronizeAllGhostZonesAtASpecifiedLevelUsingOnlyFather(MEDCouplingDataForGodFather self, int level)

        1
        """
        return _MEDCouplingCompat.MEDCouplingDataForGodFather_synchronizeAllGhostZonesAtASpecifiedLevelUsingOnlyFather(self, level)


    def alloc(self) -> "void":
        """
        alloc(MEDCouplingDataForGodFather self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingDataForGodFather_alloc(self)


    def dealloc(self) -> "void":
        """
        dealloc(MEDCouplingDataForGodFather self)

        1
        """
        return _MEDCouplingCompat.MEDCouplingDataForGodFather_dealloc(self)


    def getMyGodFather(self) -> "MEDCoupling::MEDCouplingCartesianAMRMesh *":
        """
        getMyGodFather(MEDCouplingDataForGodFather self) -> MEDCouplingCartesianAMRMesh

        1
        """
        return _MEDCouplingCompat.MEDCouplingDataForGodFather_getMyGodFather(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingDataForGodFather
    __del__ = lambda self: None
MEDCouplingDataForGodFather_swigregister = _MEDCouplingCompat.MEDCouplingDataForGodFather_swigregister
MEDCouplingDataForGodFather_swigregister(MEDCouplingDataForGodFather)

class MEDCouplingAMRAttribute(MEDCouplingDataForGodFather, TimeLabel):
    """1"""

    __swig_setmethods__ = {}
    for _s in [MEDCouplingDataForGodFather, TimeLabel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MEDCouplingAMRAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [MEDCouplingDataForGodFather, TimeLabel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MEDCouplingAMRAttribute, name)
    __repr__ = _swig_repr

    def getNumberOfLevels(self) -> "int":
        """
        getNumberOfLevels(MEDCouplingAMRAttribute self) -> int

        1
        """
        return _MEDCouplingCompat.MEDCouplingAMRAttribute_getNumberOfLevels(self)


    def deepCopy(self) -> "MEDCoupling::MEDCouplingAMRAttribute *":
        """
        deepCopy(MEDCouplingAMRAttribute self) -> MEDCouplingAMRAttribute

        1
        """
        return _MEDCouplingCompat.MEDCouplingAMRAttribute_deepCopy(self)


    def deepCpyWithoutGodFather(self) -> "MEDCoupling::MEDCouplingAMRAttribute *":
        """
        deepCpyWithoutGodFather(MEDCouplingAMRAttribute self) -> MEDCouplingAMRAttribute

        1
        """
        return _MEDCouplingCompat.MEDCouplingAMRAttribute_deepCpyWithoutGodFather(self)


    def buildCellFieldOnRecurseWithoutOverlapWithoutGhost(self, mesh: 'MEDCouplingCartesianAMRMeshGen', fieldName: 'std::string const &') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        buildCellFieldOnRecurseWithoutOverlapWithoutGhost(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh, std::string const & fieldName) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingAMRAttribute_buildCellFieldOnRecurseWithoutOverlapWithoutGhost(self, mesh, fieldName)


    def buildCellFieldOnWithGhost(self, mesh: 'MEDCouplingCartesianAMRMeshGen', fieldName: 'std::string const &') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        buildCellFieldOnWithGhost(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh, std::string const & fieldName) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingAMRAttribute_buildCellFieldOnWithGhost(self, mesh, fieldName)


    def buildCellFieldOnWithoutGhost(self, mesh: 'MEDCouplingCartesianAMRMeshGen', fieldName: 'std::string const &') -> "MEDCoupling::MEDCouplingFieldDouble *":
        """
        buildCellFieldOnWithoutGhost(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh, std::string const & fieldName) -> MEDCouplingFieldDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingAMRAttribute_buildCellFieldOnWithoutGhost(self, mesh, fieldName)


    def changeGodFather(self, gf: 'MEDCouplingCartesianAMRMesh') -> "bool":
        """
        changeGodFather(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMesh gf) -> bool

        1
        """
        return _MEDCouplingCompat.MEDCouplingAMRAttribute_changeGodFather(self, gf)


    def projectTo(self, targetGF: 'MEDCouplingCartesianAMRMesh') -> "MEDCoupling::MEDCouplingAMRAttribute *":
        """
        projectTo(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMesh targetGF) -> MEDCouplingAMRAttribute

        1
        """
        return _MEDCouplingCompat.MEDCouplingAMRAttribute_projectTo(self, targetGF)


    def writeVTHB(self, fileName: 'std::string const &') -> "std::string":
        """
        writeVTHB(MEDCouplingAMRAttribute self, std::string const & fileName) -> std::string

        1
        """
        return _MEDCouplingCompat.MEDCouplingAMRAttribute_writeVTHB(self, fileName)


    def New(gf: 'MEDCouplingCartesianAMRMesh', fieldNames: 'PyObject *', ghostLev: 'int') -> "MEDCoupling::MEDCouplingAMRAttribute *":
        """
        New(MEDCouplingCartesianAMRMesh gf, PyObject * fieldNames, int ghostLev) -> MEDCouplingAMRAttribute

        1
        """
        return _MEDCouplingCompat.MEDCouplingAMRAttribute_New(gf, fieldNames, ghostLev)

    New = staticmethod(New)

    def __init__(self, gf: 'MEDCouplingCartesianAMRMesh', fieldNames: 'PyObject *', ghostLev: 'int'):
        """
        __init__(MEDCoupling::MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMesh gf, PyObject * fieldNames, int ghostLev) -> MEDCouplingAMRAttribute

        1
        """
        this = _MEDCouplingCompat.new_MEDCouplingAMRAttribute(gf, fieldNames, ghostLev)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getFieldOn(self, mesh: 'MEDCouplingCartesianAMRMeshGen', fieldName: 'std::string const &') -> "MEDCoupling::DataArrayDouble *":
        """
        getFieldOn(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh, std::string const & fieldName) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.MEDCouplingAMRAttribute_getFieldOn(self, mesh, fieldName)


    def spillInfoOnComponents(self, compNames: 'PyObject *') -> "void":
        """
        spillInfoOnComponents(MEDCouplingAMRAttribute self, PyObject * compNames)

        1
        """
        return _MEDCouplingCompat.MEDCouplingAMRAttribute_spillInfoOnComponents(self, compNames)


    def spillNatures(self, nfs: 'PyObject *') -> "void":
        """
        spillNatures(MEDCouplingAMRAttribute self, PyObject * nfs)

        1
        """
        return _MEDCouplingCompat.MEDCouplingAMRAttribute_spillNatures(self, nfs)


    def retrieveFieldsOn(self, mesh: 'MEDCouplingCartesianAMRMeshGen') -> "PyObject *":
        """
        retrieveFieldsOn(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh) -> PyObject *

        1
        """
        return _MEDCouplingCompat.MEDCouplingAMRAttribute_retrieveFieldsOn(self, mesh)

    __swig_destroy__ = _MEDCouplingCompat.delete_MEDCouplingAMRAttribute
    __del__ = lambda self: None
MEDCouplingAMRAttribute_swigregister = _MEDCouplingCompat.MEDCouplingAMRAttribute_swigregister
MEDCouplingAMRAttribute_swigregister(MEDCouplingAMRAttribute)

def MEDCouplingAMRAttribute_New(gf: 'MEDCouplingCartesianAMRMesh', fieldNames: 'PyObject *', ghostLev: 'int') -> "MEDCoupling::MEDCouplingAMRAttribute *":
    """
    MEDCouplingAMRAttribute_New(MEDCouplingCartesianAMRMesh gf, PyObject * fieldNames, int ghostLev) -> MEDCouplingAMRAttribute

    1
    """
    return _MEDCouplingCompat.MEDCouplingAMRAttribute_New(gf, fieldNames, ghostLev)

class DenseMatrix(RefCountObject, TimeLabel):
    """1"""

    __swig_setmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DenseMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [RefCountObject, TimeLabel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DenseMatrix, name)
    __repr__ = _swig_repr

    def New(*args) -> "MEDCoupling::DenseMatrix *":
        """
        New(int nbRows, int nbCols) -> DenseMatrix
        New(DataArrayDouble array, int nbRows, int nbCols) -> DenseMatrix

        1
        """
        return _MEDCouplingCompat.DenseMatrix_New(*args)

    New = staticmethod(New)

    def deepCopy(self) -> "MEDCoupling::DenseMatrix *":
        """
        deepCopy(DenseMatrix self) -> DenseMatrix

        1
        """
        return _MEDCouplingCompat.DenseMatrix_deepCopy(self)


    def shallowCpy(self) -> "MEDCoupling::DenseMatrix *":
        """
        shallowCpy(DenseMatrix self) -> DenseMatrix

        1
        """
        return _MEDCouplingCompat.DenseMatrix_shallowCpy(self)


    def getNumberOfRows(self) -> "int":
        """
        getNumberOfRows(DenseMatrix self) -> int

        1
        """
        return _MEDCouplingCompat.DenseMatrix_getNumberOfRows(self)


    def getNumberOfCols(self) -> "int":
        """
        getNumberOfCols(DenseMatrix self) -> int

        1
        """
        return _MEDCouplingCompat.DenseMatrix_getNumberOfCols(self)


    def getNbOfElems(self) -> "int":
        """
        getNbOfElems(DenseMatrix self) -> int

        1
        """
        return _MEDCouplingCompat.DenseMatrix_getNbOfElems(self)


    def reBuild(self, array: 'DataArrayDouble', nbRows: 'int'=-1, nbCols: 'int'=-1) -> "void":
        """
        reBuild(DenseMatrix self, DataArrayDouble array, int nbRows=-1, int nbCols=-1)
        reBuild(DenseMatrix self, DataArrayDouble array, int nbRows=-1)
        reBuild(DenseMatrix self, DataArrayDouble array)

        1
        """
        return _MEDCouplingCompat.DenseMatrix_reBuild(self, array, nbRows, nbCols)


    def reShape(self, nbRows: 'int', nbCols: 'int') -> "void":
        """
        reShape(DenseMatrix self, int nbRows, int nbCols)

        1
        """
        return _MEDCouplingCompat.DenseMatrix_reShape(self, nbRows, nbCols)


    def transpose(self) -> "void":
        """
        transpose(DenseMatrix self)

        1
        """
        return _MEDCouplingCompat.DenseMatrix_transpose(self)


    def isEqual(self, other: 'DenseMatrix', eps: 'double') -> "bool":
        """
        isEqual(DenseMatrix self, DenseMatrix other, double eps) -> bool

        1
        """
        return _MEDCouplingCompat.DenseMatrix_isEqual(self, other, eps)


    def matVecMult(self, vec: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        """
        matVecMult(DenseMatrix self, DataArrayDouble vec) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DenseMatrix_matVecMult(self, vec)


    def MatVecMult(mat: 'DenseMatrix', vec: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        """
        MatVecMult(DenseMatrix mat, DataArrayDouble vec) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DenseMatrix_MatVecMult(mat, vec)

    MatVecMult = staticmethod(MatVecMult)

    def __init__(self, *args):
        """
        __init__(MEDCoupling::DenseMatrix self, int nbRows, int nbCols) -> DenseMatrix
        __init__(MEDCoupling::DenseMatrix self, DataArrayDouble array, int nbRows, int nbCols) -> DenseMatrix

        1
        """
        this = _MEDCouplingCompat.new_DenseMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isEqualIfNotWhy(self, other: 'DenseMatrix', eps: 'double') -> "PyObject *":
        """
        isEqualIfNotWhy(DenseMatrix self, DenseMatrix other, double eps) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DenseMatrix_isEqualIfNotWhy(self, other, eps)


    def getData(self) -> "MEDCoupling::DataArrayDouble *":
        """
        getData(DenseMatrix self) -> DataArrayDouble

        1
        """
        return _MEDCouplingCompat.DenseMatrix_getData(self)


    def __add__(self, other: 'DenseMatrix') -> "MEDCoupling::DenseMatrix *":
        """
        __add__(DenseMatrix self, DenseMatrix other) -> DenseMatrix

        1
        """
        return _MEDCouplingCompat.DenseMatrix___add__(self, other)


    def __sub__(self, other: 'DenseMatrix') -> "MEDCoupling::DenseMatrix *":
        """
        __sub__(DenseMatrix self, DenseMatrix other) -> DenseMatrix

        1
        """
        return _MEDCouplingCompat.DenseMatrix___sub__(self, other)


    def __mul__(self, *args) -> "MEDCoupling::DenseMatrix *":
        """
        __mul__(DenseMatrix self, DenseMatrix other) -> DenseMatrix
        __mul__(DenseMatrix self, DataArrayDouble other) -> DenseMatrix

        1
        """
        return _MEDCouplingCompat.DenseMatrix___mul__(self, *args)


    def ___iadd___(self, trueSelf: 'PyObject *', other: 'DenseMatrix') -> "PyObject *":
        """
        ___iadd___(DenseMatrix self, PyObject * trueSelf, DenseMatrix other) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DenseMatrix____iadd___(self, trueSelf, other)


    def ___isub___(self, trueSelf: 'PyObject *', other: 'DenseMatrix') -> "PyObject *":
        """
        ___isub___(DenseMatrix self, PyObject * trueSelf, DenseMatrix other) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DenseMatrix____isub___(self, trueSelf, other)


    def toNumPyMatrix(self) -> "PyObject *":
        """
        toNumPyMatrix(DenseMatrix self) -> PyObject *

        1
        """
        return _MEDCouplingCompat.DenseMatrix_toNumPyMatrix(self)

    __swig_destroy__ = _MEDCouplingCompat.delete_DenseMatrix
    __del__ = lambda self: None
DenseMatrix_swigregister = _MEDCouplingCompat.DenseMatrix_swigregister
DenseMatrix_swigregister(DenseMatrix)

def DenseMatrix_New(*args) -> "MEDCoupling::DenseMatrix *":
    """
    New(int nbRows, int nbCols) -> DenseMatrix
    DenseMatrix_New(DataArrayDouble array, int nbRows, int nbCols) -> DenseMatrix

    1
    """
    return _MEDCouplingCompat.DenseMatrix_New(*args)

def DenseMatrix_MatVecMult(mat: 'DenseMatrix', vec: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    """
    DenseMatrix_MatVecMult(DenseMatrix mat, DataArrayDouble vec) -> DataArrayDouble

    1
    """
    return _MEDCouplingCompat.DenseMatrix_MatVecMult(mat, vec)


def MEDCouplingUMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingUMesh,((),(self.__getstate__()),))
def MEDCouplingCMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingCMesh,((),(self.__getstate__()),))
def MEDCouplingIMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingIMesh,((),(self.__getstate__()),))
def MEDCouplingMappedExtrudedMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingMappedExtrudedMesh,((),(self.__getstate__()),))
def MEDCouplingCurveLinearMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingCurveLinearMesh,((),(self.__getstate__()),))
def MEDCoupling1SGTUMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCoupling1SGTUMesh,((),(self.__getstate__()),))
def MEDCoupling1DGTUMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCoupling1DGTUMesh,((),(self.__getstate__()),))
def MEDCouplingFieldDoubleReduce(self):
    self.checkConsistencyLight()
    d=(self.getTypeOfField(),self.getTimeDiscretization())
    return MEDCouplingStdReduceFunct,(MEDCouplingFieldDouble,(d,(self.__getstate__()),))
def MEDCouplingFieldIntReduce(self):
    self.checkConsistencyLight()
    d=(self.getTypeOfField(),self.getTimeDiscretization())
    return MEDCouplingStdReduceFunct,(MEDCouplingFieldInt,(d,(self.__getstate__()),))
def MEDCouplingFieldFloatReduce(self):
    self.checkConsistencyLight()
    d=(self.getTypeOfField(),self.getTimeDiscretization())
    return MEDCouplingStdReduceFunct,(MEDCouplingFieldFloat,(d,(self.__getstate__()),))

#
# Forwarding DataArrayInt functions to MEDCouplingUMesh:
#
MEDCouplingUMesh.ExtractFromIndexedArrays           = DataArrayInt.ExtractFromIndexedArrays
MEDCouplingUMesh.ExtractFromIndexedArraysSlice      = DataArrayInt.ExtractFromIndexedArraysSlice
MEDCouplingUMesh.SetPartOfIndexedArrays             = DataArrayInt.SetPartOfIndexedArrays
##MEDCouplingUMesh.SetPartOfIndexedArraysSlice        = DataArrayInt.SetPartOfIndexedArraysSlice
MEDCouplingUMesh.SetPartOfIndexedArraysSameIdx      = DataArrayInt.SetPartOfIndexedArraysSameIdx
MEDCouplingUMesh.RemoveIdsFromIndexedArrays         = DataArrayInt.RemoveIdsFromIndexedArrays
##MEDCouplingUMesh.SetPartOfIndexedArraysSameIdxSlice = DataArrayInt.SetPartOfIndexedArraysSameIdxSlice



import os
__filename=os.environ.get('PYTHONSTARTUP')
if __filename and os.path.isfile(__filename):
  exec(open(__filename).read())
  pass


def MEDCouplingDataArrayDoubleIadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDouble____iadd___(self, self, *args)
def MEDCouplingDataArrayDoubleIsub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDouble____isub___(self, self, *args)
def MEDCouplingDataArrayDoubleImul(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDouble____imul___(self, self, *args)
def MEDCouplingDataArrayDoubleIdiv(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDouble____idiv___(self, self, *args)
def MEDCouplingDataArrayDoubleIpow(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDouble____ipow___(self, self, *args)
def MEDCouplingFieldDoubleIadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.MEDCouplingFieldDouble____iadd___(self, self, *args)
def MEDCouplingFieldDoubleIsub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.MEDCouplingFieldDouble____isub___(self, self, *args)
def MEDCouplingFieldDoubleImul(self,*args):
    import _MEDCoupling
    return _MEDCoupling.MEDCouplingFieldDouble____imul___(self, self, *args)
def MEDCouplingFieldDoubleIdiv(self,*args):
    import _MEDCoupling
    return _MEDCoupling.MEDCouplingFieldDouble____idiv___(self, self, *args)
def MEDCouplingFieldDoubleIpow(self,*args):
    import _MEDCoupling
    return _MEDCoupling.MEDCouplingFieldDouble____ipow___(self, self, *args)
def MEDCouplingDataArrayIntIadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt____iadd___(self, self, *args)
def MEDCouplingDataArrayIntIsub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt____isub___(self, self, *args)
def MEDCouplingDataArrayIntImul(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt____imul___(self, self, *args)
def MEDCouplingDataArrayIntIdiv(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt____idiv___(self, self, *args)
def MEDCouplingDataArrayIntImod(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt____imod___(self, self, *args)
def MEDCouplingDataArrayIntIpow(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayInt____ipow___(self, self, *args)
def MEDCouplingDataArrayFloatIadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayFloat____iadd___(self, self, *args)
def MEDCouplingDataArrayFloatIsub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayFloat____isub___(self, self, *args)
def MEDCouplingDataArrayFloatImul(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayFloat____imul___(self, self, *args)
def MEDCouplingDataArrayFloatIdiv(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayFloat____idiv___(self, self, *args)
def MEDCouplingDataArrayDoubleTupleIadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDoubleTuple____iadd___(self, self, *args)
def MEDCouplingDataArrayDoubleTupleIsub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDoubleTuple____isub___(self, self, *args)
def MEDCouplingDataArrayDoubleTupleImul(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDoubleTuple____imul___(self, self, *args)
def MEDCouplingDataArrayDoubleTupleIdiv(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayDoubleTuple____idiv___(self, self, *args)
def MEDCouplingDataArrayIntTupleIadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayIntTuple____iadd___(self, self, *args)
def MEDCouplingDataArrayIntTupleIsub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayIntTuple____isub___(self, self, *args)
def MEDCouplingDataArrayIntTupleImul(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayIntTuple____imul___(self, self, *args)
def MEDCouplingDataArrayIntTupleIdiv(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayIntTuple____idiv___(self, self, *args)
def MEDCouplingDataArrayIntTupleImod(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DataArrayIntTuple____imod___(self, self, *args)
def MEDCouplingDenseMatrixIadd(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DenseMatrix____iadd___(self, self, *args)
def MEDCouplingDenseMatrixIsub(self,*args):
    import _MEDCoupling
    return _MEDCoupling.DenseMatrix____isub___(self, self, *args)


InterpKernelException.__reduce__=INTERPKERNELExceptionReduce

DataArrayDouble.__reduce__=MEDCouplingDataArrayDoubleReduce
DataArrayDouble.__iadd__=MEDCouplingDataArrayDoubleIadd
DataArrayDouble.__isub__=MEDCouplingDataArrayDoubleIsub
DataArrayDouble.__imul__=MEDCouplingDataArrayDoubleImul
DataArrayDouble.__idiv__=MEDCouplingDataArrayDoubleIdiv
DataArrayDouble.__ipow__=MEDCouplingDataArrayDoubleIpow
DataArrayDouble.__truediv__=DataArrayDouble.__div__
DataArrayDouble.__itruediv__=MEDCouplingDataArrayDoubleIdiv
DataArrayDouble.__rtruediv__=DataArrayDouble.__rdiv__
DataArrayDouble.__floordiv__=DataArrayDouble.__div__
DataArrayDouble.__ifloordiv__=MEDCouplingDataArrayDoubleIdiv
DataArrayDouble.__rfloordiv__=DataArrayDouble.__rdiv__

DataArrayInt.__reduce__=MEDCouplingDataArrayIntReduce
DataArrayInt.__iadd__=MEDCouplingDataArrayIntIadd
DataArrayInt.__isub__=MEDCouplingDataArrayIntIsub
DataArrayInt.__imul__=MEDCouplingDataArrayIntImul
DataArrayInt.__idiv__=MEDCouplingDataArrayIntIdiv
DataArrayInt.__imod__=MEDCouplingDataArrayIntImod
DataArrayInt.__ipow__=MEDCouplingDataArrayIntIpow
DataArrayInt.__truediv__=DataArrayInt.__div__
DataArrayInt.__itruediv__=MEDCouplingDataArrayIntIdiv
DataArrayInt.__rtruediv__=DataArrayInt.__rdiv__
DataArrayInt.__floordiv__=DataArrayInt.__div__
DataArrayInt.__ifloordiv__=MEDCouplingDataArrayIntIdiv
DataArrayInt.__rfloordiv__=DataArrayInt.__rdiv__

DataArrayByte.__reduce__=MEDCouplingDataArrayByteReduce

DataArrayFloat.__reduce__=MEDCouplingDataArrayFloatReduce
DataArrayFloat.__iadd__=MEDCouplingDataArrayFloatIadd
DataArrayFloat.__isub__=MEDCouplingDataArrayFloatIsub
DataArrayFloat.__imul__=MEDCouplingDataArrayFloatImul
DataArrayFloat.__idiv__=MEDCouplingDataArrayFloatIdiv
DataArrayFloat.__itruediv__=MEDCouplingDataArrayFloatIdiv
DataArrayFloat.__ifloordiv__=MEDCouplingDataArrayFloatIdiv

MEDCouplingFieldDouble.__reduce__=MEDCouplingFieldDoubleReduce
MEDCouplingFieldDouble.__iadd__=MEDCouplingFieldDoubleIadd
MEDCouplingFieldDouble.__isub__=MEDCouplingFieldDoubleIsub
MEDCouplingFieldDouble.__imul__=MEDCouplingFieldDoubleImul
MEDCouplingFieldDouble.__idiv__=MEDCouplingFieldDoubleIdiv
MEDCouplingFieldDouble.__ipow__=MEDCouplingFieldDoubleIpow
MEDCouplingFieldDouble.__truediv__=MEDCouplingFieldDouble.__div__
MEDCouplingFieldDouble.__rtruediv__=MEDCouplingFieldDouble.__rdiv__
MEDCouplingFieldDouble.__itruediv__=MEDCouplingFieldDoubleIdiv
MEDCouplingFieldDouble.__floordiv__=MEDCouplingFieldDouble.__div__
MEDCouplingFieldDouble.__rfloordiv__=MEDCouplingFieldDouble.__rdiv__
MEDCouplingFieldDouble.__ifloordiv__=MEDCouplingFieldDoubleIdiv

MEDCouplingFieldInt.__reduce__=MEDCouplingFieldIntReduce

MEDCouplingFieldFloat.__reduce__=MEDCouplingFieldFloatReduce

DataArrayDoubleTuple.__iadd__=MEDCouplingDataArrayDoubleTupleIadd
DataArrayDoubleTuple.__isub__=MEDCouplingDataArrayDoubleTupleIsub
DataArrayDoubleTuple.__imul__=MEDCouplingDataArrayDoubleTupleImul
DataArrayDoubleTuple.__idiv__=MEDCouplingDataArrayDoubleTupleIdiv
DataArrayDoubleTuple.__itruediv__=MEDCouplingDataArrayDoubleTupleIdiv
DataArrayDoubleTuple.__ifloordiv__=MEDCouplingDataArrayDoubleTupleIdiv

DataArrayIntTuple.__iadd__=MEDCouplingDataArrayIntTupleIadd
DataArrayIntTuple.__isub__=MEDCouplingDataArrayIntTupleIsub
DataArrayIntTuple.__imul__=MEDCouplingDataArrayIntTupleImul
DataArrayIntTuple.__idiv__=MEDCouplingDataArrayIntTupleIdiv
DataArrayIntTuple.__itruediv__=MEDCouplingDataArrayIntTupleIdiv
DataArrayIntTuple.__ifloordiv__=MEDCouplingDataArrayIntTupleIdiv
DataArrayIntTuple.__imod__=MEDCouplingDataArrayIntTupleImod

DenseMatrix.__iadd__=MEDCouplingDenseMatrixIadd
DenseMatrix.__isub__=MEDCouplingDenseMatrixIsub

MEDCouplingUMesh.__reduce__=MEDCouplingUMeshReduce
MEDCoupling1DGTUMesh.__reduce__=MEDCoupling1DGTUMeshReduce
MEDCoupling1SGTUMesh.__reduce__=MEDCoupling1SGTUMeshReduce
MEDCouplingCurveLinearMesh.__reduce__=MEDCouplingCurveLinearMeshReduce
MEDCouplingCMesh.__reduce__=MEDCouplingCMeshReduce
MEDCouplingIMesh.__reduce__=MEDCouplingIMeshReduce
MEDCouplingMappedExtrudedMesh.__reduce__=MEDCouplingMappedExtrudedMeshReduce

DataArrayAsciiCharIterator.__next__ = DataArrayAsciiCharIterator.next
DataArrayIntIterator.__next__ = DataArrayIntIterator.next
DataArrayDoubleIterator.__next__ = DataArrayDoubleIterator.next
MEDCouplingUMeshCellIterator.__next__ = MEDCouplingUMeshCellIterator.next
MEDCouplingUMeshCellByTypeIterator.__next__ = MEDCouplingUMeshCellByTypeIterator.next

del INTERPKERNELExceptionReduce
del MEDCouplingDataArrayDoubleReduce
del MEDCouplingDataArrayFloatReduce
del MEDCouplingDataArrayIntReduce
del MEDCouplingDataArrayByteReduce
del MEDCouplingUMeshReduce
del MEDCouplingCMeshReduce
del MEDCouplingIMeshReduce
del MEDCouplingMappedExtrudedMeshReduce
del MEDCouplingCurveLinearMeshReduce
del MEDCoupling1SGTUMeshReduce
del MEDCoupling1DGTUMeshReduce
del MEDCouplingFieldDoubleReduce
del MEDCouplingFieldFloatReduce
del MEDCouplingFieldIntReduce
del MEDCouplingDataArrayDoubleIadd
del MEDCouplingDataArrayDoubleIsub
del MEDCouplingDataArrayDoubleImul
del MEDCouplingDataArrayDoubleIdiv
del MEDCouplingFieldDoubleIadd
del MEDCouplingFieldDoubleIsub
del MEDCouplingFieldDoubleImul
del MEDCouplingFieldDoubleIdiv
del MEDCouplingFieldDoubleIpow
del MEDCouplingDataArrayIntIadd
del MEDCouplingDataArrayIntIsub
del MEDCouplingDataArrayIntImul
del MEDCouplingDataArrayIntIdiv
del MEDCouplingDataArrayIntImod
del MEDCouplingDataArrayFloatIadd
del MEDCouplingDataArrayFloatIsub
del MEDCouplingDataArrayFloatImul
del MEDCouplingDataArrayFloatIdiv
del MEDCouplingDataArrayDoubleTupleIadd
del MEDCouplingDataArrayDoubleTupleIsub
del MEDCouplingDataArrayDoubleTupleImul
del MEDCouplingDataArrayDoubleTupleIdiv
del MEDCouplingDataArrayIntTupleIadd
del MEDCouplingDataArrayIntTupleIsub
del MEDCouplingDataArrayIntTupleImul
del MEDCouplingDataArrayIntTupleIdiv
del MEDCouplingDataArrayIntTupleImod
del MEDCouplingDenseMatrixIadd
del MEDCouplingDenseMatrixIsub


print("""**************************************************************************************************
"MEDCoupling" python module as been replaced by "medcoupling" for Salome9.

"MEDCoupling" python module is still here for backwards compatibility reason but it is deprecated.

Please replace "MEDCoupling" by "medcoupling" in you import line right now to remove this message.
**************************************************************************************************""")

# This file is compatible with both classic and new-style classes.


