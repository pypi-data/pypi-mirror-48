# coding: utf-8

#
# Copyright 2018 Radiant Solutions
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
    DeepCore Server
    A server that runs object detection models

    OpenAPI spec version: 1.3.2-SNAPSHOT
    Contact: deepcore-support@digitalglobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ServiceVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service': 'str',
        'gbdxm': 'str',
        'deepcore': 'str'
    }

    attribute_map = {
        'service': 'service',
        'gbdxm': 'gbdxm',
        'deepcore': 'deepcore'
    }

    def __init__(self, service=None, gbdxm=None, deepcore=None):  # noqa: E501
        """ServiceVersion - a model defined in Swagger"""  # noqa: E501

        self._service = None
        self._gbdxm = None
        self._deepcore = None
        self.discriminator = None

        if service is not None:
            self.service = service
        if gbdxm is not None:
            self.gbdxm = gbdxm
        if deepcore is not None:
            self.deepcore = deepcore

    @property
    def service(self):
        """Gets the service of this ServiceVersion.  # noqa: E501

        The overall version  # noqa: E501

        :return: The service of this ServiceVersion.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ServiceVersion.

        The overall version  # noqa: E501

        :param service: The service of this ServiceVersion.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def gbdxm(self):
        """Gets the gbdxm of this ServiceVersion.  # noqa: E501

        The version of the gbdxm metadata  # noqa: E501

        :return: The gbdxm of this ServiceVersion.  # noqa: E501
        :rtype: str
        """
        return self._gbdxm

    @gbdxm.setter
    def gbdxm(self, gbdxm):
        """Sets the gbdxm of this ServiceVersion.

        The version of the gbdxm metadata  # noqa: E501

        :param gbdxm: The gbdxm of this ServiceVersion.  # noqa: E501
        :type: str
        """

        self._gbdxm = gbdxm

    @property
    def deepcore(self):
        """Gets the deepcore of this ServiceVersion.  # noqa: E501

        The version of the deepcore library  # noqa: E501

        :return: The deepcore of this ServiceVersion.  # noqa: E501
        :rtype: str
        """
        return self._deepcore

    @deepcore.setter
    def deepcore(self, deepcore):
        """Sets the deepcore of this ServiceVersion.

        The version of the deepcore library  # noqa: E501

        :param deepcore: The deepcore of this ServiceVersion.  # noqa: E501
        :type: str
        """

        self._deepcore = deepcore

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
