# coding: utf-8

#
# Copyright 2018 Radiant Solutions
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
    DeepCore Server
    A server that runs object detection models

    OpenAPI spec version: 1.3.2-SNAPSHOT
    Contact: deepcore-support@digitalglobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from deepcore_server.models.color_mode import ColorMode  # noqa: F401,E501
from deepcore_server.models.lat_lon_bounding_box import LatLonBoundingBox  # noqa: F401,E501
from deepcore_server.models.size import Size  # noqa: F401,E501


class ModelMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'model_version': 'str',
        'name': 'str',
        'description': 'str',
        'time_created': 'datetime',
        'model_size': 'Size',
        'bounding_box': 'LatLonBoundingBox',
        'color_mode': 'ColorMode',
        'labels': 'list[str]',
        'size': 'int',
        'category': 'str',
        'options': 'dict(str, str)',
        'resolution': 'Size'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'model_version': 'modelVersion',
        'name': 'name',
        'description': 'description',
        'time_created': 'timeCreated',
        'model_size': 'modelSize',
        'bounding_box': 'boundingBox',
        'color_mode': 'colorMode',
        'labels': 'labels',
        'size': 'size',
        'category': 'category',
        'options': 'options',
        'resolution': 'resolution'
    }

    def __init__(self, id=None, type=None, model_version=None, name=None, description=None, time_created=None, model_size=None, bounding_box=None, color_mode=None, labels=None, size=None, category=None, options=None, resolution=None):  # noqa: E501
        """ModelMetadata - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._model_version = None
        self._name = None
        self._description = None
        self._time_created = None
        self._model_size = None
        self._bounding_box = None
        self._color_mode = None
        self._labels = None
        self._size = None
        self._category = None
        self._options = None
        self._resolution = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if model_version is not None:
            self.model_version = model_version
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if time_created is not None:
            self.time_created = time_created
        if model_size is not None:
            self.model_size = model_size
        if bounding_box is not None:
            self.bounding_box = bounding_box
        if color_mode is not None:
            self.color_mode = color_mode
        if labels is not None:
            self.labels = labels
        if size is not None:
            self.size = size
        if category is not None:
            self.category = category
        if options is not None:
            self.options = options
        if resolution is not None:
            self.resolution = resolution

    @property
    def id(self):
        """Gets the id of this ModelMetadata.  # noqa: E501


        :return: The id of this ModelMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelMetadata.


        :param id: The id of this ModelMetadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ModelMetadata.  # noqa: E501


        :return: The type of this ModelMetadata.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelMetadata.


        :param type: The type of this ModelMetadata.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def model_version(self):
        """Gets the model_version of this ModelMetadata.  # noqa: E501


        :return: The model_version of this ModelMetadata.  # noqa: E501
        :rtype: str
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """Sets the model_version of this ModelMetadata.


        :param model_version: The model_version of this ModelMetadata.  # noqa: E501
        :type: str
        """

        self._model_version = model_version

    @property
    def name(self):
        """Gets the name of this ModelMetadata.  # noqa: E501


        :return: The name of this ModelMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelMetadata.


        :param name: The name of this ModelMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ModelMetadata.  # noqa: E501


        :return: The description of this ModelMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelMetadata.


        :param description: The description of this ModelMetadata.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def time_created(self):
        """Gets the time_created of this ModelMetadata.  # noqa: E501


        :return: The time_created of this ModelMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this ModelMetadata.


        :param time_created: The time_created of this ModelMetadata.  # noqa: E501
        :type: datetime
        """

        self._time_created = time_created

    @property
    def model_size(self):
        """Gets the model_size of this ModelMetadata.  # noqa: E501


        :return: The model_size of this ModelMetadata.  # noqa: E501
        :rtype: Size
        """
        return self._model_size

    @model_size.setter
    def model_size(self, model_size):
        """Sets the model_size of this ModelMetadata.


        :param model_size: The model_size of this ModelMetadata.  # noqa: E501
        :type: Size
        """

        self._model_size = model_size

    @property
    def bounding_box(self):
        """Gets the bounding_box of this ModelMetadata.  # noqa: E501


        :return: The bounding_box of this ModelMetadata.  # noqa: E501
        :rtype: LatLonBoundingBox
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this ModelMetadata.


        :param bounding_box: The bounding_box of this ModelMetadata.  # noqa: E501
        :type: LatLonBoundingBox
        """

        self._bounding_box = bounding_box

    @property
    def color_mode(self):
        """Gets the color_mode of this ModelMetadata.  # noqa: E501


        :return: The color_mode of this ModelMetadata.  # noqa: E501
        :rtype: ColorMode
        """
        return self._color_mode

    @color_mode.setter
    def color_mode(self, color_mode):
        """Sets the color_mode of this ModelMetadata.


        :param color_mode: The color_mode of this ModelMetadata.  # noqa: E501
        :type: ColorMode
        """

        self._color_mode = color_mode

    @property
    def labels(self):
        """Gets the labels of this ModelMetadata.  # noqa: E501


        :return: The labels of this ModelMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ModelMetadata.


        :param labels: The labels of this ModelMetadata.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def size(self):
        """Gets the size of this ModelMetadata.  # noqa: E501


        :return: The size of this ModelMetadata.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ModelMetadata.


        :param size: The size of this ModelMetadata.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def category(self):
        """Gets the category of this ModelMetadata.  # noqa: E501


        :return: The category of this ModelMetadata.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ModelMetadata.


        :param category: The category of this ModelMetadata.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def options(self):
        """Gets the options of this ModelMetadata.  # noqa: E501


        :return: The options of this ModelMetadata.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ModelMetadata.


        :param options: The options of this ModelMetadata.  # noqa: E501
        :type: dict(str, str)
        """

        self._options = options

    @property
    def resolution(self):
        """Gets the resolution of this ModelMetadata.  # noqa: E501


        :return: The resolution of this ModelMetadata.  # noqa: E501
        :rtype: Size
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this ModelMetadata.


        :param resolution: The resolution of this ModelMetadata.  # noqa: E501
        :type: Size
        """

        self._resolution = resolution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
