# coding: utf-8

#
# Copyright 2018 Radiant Solutions
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
    DeepCore Server
    A server that runs object detection models

    OpenAPI spec version: 1.3.2-SNAPSHOT
    Contact: deepcore-support@digitalglobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from deepcore_server.models.image import Image  # noqa: F401,E501
from deepcore_server.models.label_filter import LabelFilter  # noqa: F401,E501
from deepcore_server.models.r2_p_properties import R2PProperties  # noqa: F401,E501
from deepcore_server.models.size_step import SizeStep  # noqa: F401,E501


class JobRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model': 'str',
        'image': 'Image',
        'confidence': 'float',
        'nms': 'float',
        'type': 'str',
        'size_steps': 'list[SizeStep]',
        'resampled_size': 'float',
        'r2p_properties': 'R2PProperties',
        'label_filters': 'list[LabelFilter]'
    }

    attribute_map = {
        'model': 'model',
        'image': 'image',
        'confidence': 'confidence',
        'nms': 'nms',
        'type': 'type',
        'size_steps': 'sizeSteps',
        'resampled_size': 'resampledSize',
        'r2p_properties': 'r2pProperties',
        'label_filters': 'labelFilters'
    }

    def __init__(self, model=None, image=None, confidence=None, nms=None, type=None, size_steps=None, resampled_size=None, r2p_properties=None, label_filters=None):  # noqa: E501
        """JobRequest - a model defined in Swagger"""  # noqa: E501

        self._model = None
        self._image = None
        self._confidence = None
        self._nms = None
        self._type = None
        self._size_steps = None
        self._resampled_size = None
        self._r2p_properties = None
        self._label_filters = None
        self.discriminator = None

        self.model = model
        self.image = image
        if confidence is not None:
            self.confidence = confidence
        if nms is not None:
            self.nms = nms
        if type is not None:
            self.type = type
        if size_steps is not None:
            self.size_steps = size_steps
        if resampled_size is not None:
            self.resampled_size = resampled_size
        if r2p_properties is not None:
            self.r2p_properties = r2p_properties
        if label_filters is not None:
            self.label_filters = label_filters

    @property
    def model(self):
        """Gets the model of this JobRequest.  # noqa: E501

        The model ID for the job  # noqa: E501

        :return: The model of this JobRequest.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this JobRequest.

        The model ID for the job  # noqa: E501

        :param model: The model of this JobRequest.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def image(self):
        """Gets the image of this JobRequest.  # noqa: E501


        :return: The image of this JobRequest.  # noqa: E501
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this JobRequest.


        :param image: The image of this JobRequest.  # noqa: E501
        :type: Image
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def confidence(self):
        """Gets the confidence of this JobRequest.  # noqa: E501

        Minimum percent score for results to be included in the output.  # noqa: E501

        :return: The confidence of this JobRequest.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this JobRequest.

        Minimum percent score for results to be included in the output.  # noqa: E501

        :param confidence: The confidence of this JobRequest.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def nms(self):
        """Gets the nms of this JobRequest.  # noqa: E501

        Perform non-maximum suppression on the output. When two or more detects overlap more then PERCENT, only the one with the highest confidence is retained. (30 is a useful default)  # noqa: E501

        :return: The nms of this JobRequest.  # noqa: E501
        :rtype: float
        """
        return self._nms

    @nms.setter
    def nms(self, nms):
        """Sets the nms of this JobRequest.

        Perform non-maximum suppression on the output. When two or more detects overlap more then PERCENT, only the one with the highest confidence is retained. (30 is a useful default)  # noqa: E501

        :param nms: The nms of this JobRequest.  # noqa: E501
        :type: float
        """
        if nms is not None and nms > 100:  # noqa: E501
            raise ValueError("Invalid value for `nms`, must be a value less than or equal to `100`")  # noqa: E501
        if nms is not None and nms < 0:  # noqa: E501
            raise ValueError("Invalid value for `nms`, must be a value greater than or equal to `0`")  # noqa: E501

        self._nms = nms

    @property
    def type(self):
        """Gets the type of this JobRequest.  # noqa: E501

        The geometry output type  # noqa: E501

        :return: The type of this JobRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobRequest.

        The geometry output type  # noqa: E501

        :param type: The type of this JobRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["point", "polygon"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def size_steps(self):
        """Gets the size_steps of this JobRequest.  # noqa: E501

        Sliding window sizes and steps  # noqa: E501

        :return: The size_steps of this JobRequest.  # noqa: E501
        :rtype: list[SizeStep]
        """
        return self._size_steps

    @size_steps.setter
    def size_steps(self, size_steps):
        """Sets the size_steps of this JobRequest.

        Sliding window sizes and steps  # noqa: E501

        :param size_steps: The size_steps of this JobRequest.  # noqa: E501
        :type: list[SizeStep]
        """

        self._size_steps = size_steps

    @property
    def resampled_size(self):
        """Gets the resampled_size of this JobRequest.  # noqa: E501

        Resample window chips to a fixed size. This must fit within the model.  # noqa: E501

        :return: The resampled_size of this JobRequest.  # noqa: E501
        :rtype: float
        """
        return self._resampled_size

    @resampled_size.setter
    def resampled_size(self, resampled_size):
        """Sets the resampled_size of this JobRequest.

        Resample window chips to a fixed size. This must fit within the model.  # noqa: E501

        :param resampled_size: The resampled_size of this JobRequest.  # noqa: E501
        :type: float
        """

        self._resampled_size = resampled_size

    @property
    def r2p_properties(self):
        """Gets the r2p_properties of this JobRequest.  # noqa: E501


        :return: The r2p_properties of this JobRequest.  # noqa: E501
        :rtype: R2PProperties
        """
        return self._r2p_properties

    @r2p_properties.setter
    def r2p_properties(self, r2p_properties):
        """Sets the r2p_properties of this JobRequest.


        :param r2p_properties: The r2p_properties of this JobRequest.  # noqa: E501
        :type: R2PProperties
        """

        self._r2p_properties = r2p_properties

    @property
    def label_filters(self):
        """Gets the label_filters of this JobRequest.  # noqa: E501

        Label filters  # noqa: E501

        :return: The label_filters of this JobRequest.  # noqa: E501
        :rtype: list[LabelFilter]
        """
        return self._label_filters

    @label_filters.setter
    def label_filters(self, label_filters):
        """Sets the label_filters of this JobRequest.

        Label filters  # noqa: E501

        :param label_filters: The label_filters of this JobRequest.  # noqa: E501
        :type: list[LabelFilter]
        """

        self._label_filters = label_filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
