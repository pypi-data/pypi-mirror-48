# coding: utf-8

#
# Copyright 2018 Radiant Solutions
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
    DeepCore Server
    A server that runs object detection models

    OpenAPI spec version: 1.3.2-SNAPSHOT
    Contact: deepcore-support@digitalglobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class R2PProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'r2p_method': 'str',
        'r2p_accuracy': 'float',
        'r2p_min_area': 'float'
    }

    attribute_map = {
        'r2p_method': 'r2pMethod',
        'r2p_accuracy': 'r2pAccuracy',
        'r2p_min_area': 'r2pMinArea'
    }

    def __init__(self, r2p_method='simple', r2p_accuracy=3.0, r2p_min_area=None):  # noqa: E501
        """R2PProperties - a model defined in Swagger"""  # noqa: E501

        self._r2p_method = None
        self._r2p_accuracy = None
        self._r2p_min_area = None
        self.discriminator = None

        if r2p_method is not None:
            self.r2p_method = r2p_method
        if r2p_accuracy is not None:
            self.r2p_accuracy = r2p_accuracy
        if r2p_min_area is not None:
            self.r2p_min_area = r2p_min_area

    @property
    def r2p_method(self):
        """Gets the r2p_method of this R2PProperties.  # noqa: E501

        Raster-to-polygon approximation method.  # noqa: E501

        :return: The r2p_method of this R2PProperties.  # noqa: E501
        :rtype: str
        """
        return self._r2p_method

    @r2p_method.setter
    def r2p_method(self, r2p_method):
        """Sets the r2p_method of this R2PProperties.

        Raster-to-polygon approximation method.  # noqa: E501

        :param r2p_method: The r2p_method of this R2PProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "simple", "tc89-l1", "tc89-kcos"]  # noqa: E501
        if r2p_method not in allowed_values:
            raise ValueError(
                "Invalid value for `r2p_method` ({0}), must be one of {1}"  # noqa: E501
                .format(r2p_method, allowed_values)
            )

        self._r2p_method = r2p_method

    @property
    def r2p_accuracy(self):
        """Gets the r2p_accuracy of this R2PProperties.  # noqa: E501

        Approximation accuracy for the raster-to-polygon operation.  # noqa: E501

        :return: The r2p_accuracy of this R2PProperties.  # noqa: E501
        :rtype: float
        """
        return self._r2p_accuracy

    @r2p_accuracy.setter
    def r2p_accuracy(self, r2p_accuracy):
        """Sets the r2p_accuracy of this R2PProperties.

        Approximation accuracy for the raster-to-polygon operation.  # noqa: E501

        :param r2p_accuracy: The r2p_accuracy of this R2PProperties.  # noqa: E501
        :type: float
        """

        self._r2p_accuracy = r2p_accuracy

    @property
    def r2p_min_area(self):
        """Gets the r2p_min_area of this R2PProperties.  # noqa: E501

        Minimum polygon area (in pixels).  # noqa: E501

        :return: The r2p_min_area of this R2PProperties.  # noqa: E501
        :rtype: float
        """
        return self._r2p_min_area

    @r2p_min_area.setter
    def r2p_min_area(self, r2p_min_area):
        """Sets the r2p_min_area of this R2PProperties.

        Minimum polygon area (in pixels).  # noqa: E501

        :param r2p_min_area: The r2p_min_area of this R2PProperties.  # noqa: E501
        :type: float
        """

        self._r2p_min_area = r2p_min_area

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(R2PProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, R2PProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
