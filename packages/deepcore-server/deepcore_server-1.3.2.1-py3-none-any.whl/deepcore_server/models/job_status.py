# coding: utf-8

#
# Copyright 2018 Radiant Solutions
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
    DeepCore Server
    A server that runs object detection models

    OpenAPI spec version: 1.3.2-SNAPSHOT
    Contact: deepcore-support@digitalglobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JobStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'state': 'str',
        'message': 'str',
        'progress': 'dict(str, float)',
        'time_elapsed': 'float',
        'time_remaining': 'float',
        'runner': 'str'
    }

    attribute_map = {
        'id': 'id',
        'state': 'state',
        'message': 'message',
        'progress': 'progress',
        'time_elapsed': 'timeElapsed',
        'time_remaining': 'timeRemaining',
        'runner': 'runner'
    }

    def __init__(self, id=None, state=None, message=None, progress=None, time_elapsed=None, time_remaining=None, runner=None):  # noqa: E501
        """JobStatus - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._state = None
        self._message = None
        self._progress = None
        self._time_elapsed = None
        self._time_remaining = None
        self._runner = None
        self.discriminator = None

        self.id = id
        self.state = state
        if message is not None:
            self.message = message
        if progress is not None:
            self.progress = progress
        if time_elapsed is not None:
            self.time_elapsed = time_elapsed
        if time_remaining is not None:
            self.time_remaining = time_remaining
        if runner is not None:
            self.runner = runner

    @property
    def id(self):
        """Gets the id of this JobStatus.  # noqa: E501

        The jobId  # noqa: E501

        :return: The id of this JobStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobStatus.

        The jobId  # noqa: E501

        :param id: The id of this JobStatus.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def state(self):
        """Gets the state of this JobStatus.  # noqa: E501

        Status state and message type  # noqa: E501

        :return: The state of this JobStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobStatus.

        Status state and message type  # noqa: E501

        :param state: The state of this JobStatus.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["Queued", "Setup", "Waiting", "Starting", "Running", "Successful", "Failed", "Canceled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def message(self):
        """Gets the message of this JobStatus.  # noqa: E501

        A description of the status  # noqa: E501

        :return: The message of this JobStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this JobStatus.

        A description of the status  # noqa: E501

        :param message: The message of this JobStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def progress(self):
        """Gets the progress of this JobStatus.  # noqa: E501

        Different types of progress  # noqa: E501

        :return: The progress of this JobStatus.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this JobStatus.

        Different types of progress  # noqa: E501

        :param progress: The progress of this JobStatus.  # noqa: E501
        :type: dict(str, float)
        """

        self._progress = progress

    @property
    def time_elapsed(self):
        """Gets the time_elapsed of this JobStatus.  # noqa: E501

        Number of seconds elapsed  # noqa: E501

        :return: The time_elapsed of this JobStatus.  # noqa: E501
        :rtype: float
        """
        return self._time_elapsed

    @time_elapsed.setter
    def time_elapsed(self, time_elapsed):
        """Sets the time_elapsed of this JobStatus.

        Number of seconds elapsed  # noqa: E501

        :param time_elapsed: The time_elapsed of this JobStatus.  # noqa: E501
        :type: float
        """

        self._time_elapsed = time_elapsed

    @property
    def time_remaining(self):
        """Gets the time_remaining of this JobStatus.  # noqa: E501

        Estimated number of seconds remaining  # noqa: E501

        :return: The time_remaining of this JobStatus.  # noqa: E501
        :rtype: float
        """
        return self._time_remaining

    @time_remaining.setter
    def time_remaining(self, time_remaining):
        """Sets the time_remaining of this JobStatus.

        Estimated number of seconds remaining  # noqa: E501

        :param time_remaining: The time_remaining of this JobStatus.  # noqa: E501
        :type: float
        """

        self._time_remaining = time_remaining

    @property
    def runner(self):
        """Gets the runner of this JobStatus.  # noqa: E501

        The runnerId of the job runner being used.  # noqa: E501

        :return: The runner of this JobStatus.  # noqa: E501
        :rtype: str
        """
        return self._runner

    @runner.setter
    def runner(self, runner):
        """Sets the runner of this JobStatus.

        The runnerId of the job runner being used.  # noqa: E501

        :param runner: The runner of this JobStatus.  # noqa: E501
        :type: str
        """

        self._runner = runner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
