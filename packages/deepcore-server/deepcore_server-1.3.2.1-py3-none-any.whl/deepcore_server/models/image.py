# coding: utf-8

#
# Copyright 2018 Radiant Solutions
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
    DeepCore Server
    A server that runs object detection models

    OpenAPI spec version: 1.3.2-SNAPSHOT
    Contact: deepcore-support@digitalglobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from deepcore_server.models.lat_lon_bounding_box import LatLonBoundingBox  # noqa: F401,E501


class Image(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'bbox': 'LatLonBoundingBox',
        'url': 'str',
        'credentials': 'str'
    }

    attribute_map = {
        'type': 'type',
        'bbox': 'bbox',
        'url': 'url',
        'credentials': 'credentials'
    }

    def __init__(self, type=None, bbox=None, url=None, credentials=None):  # noqa: E501
        """Image - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._bbox = None
        self._url = None
        self._credentials = None
        self.discriminator = None

        self.type = type
        if bbox is not None:
            self.bbox = bbox
        if url is not None:
            self.url = url
        if credentials is not None:
            self.credentials = credentials

    @property
    def type(self):
        """Gets the type of this Image.  # noqa: E501

        Image type  # noqa: E501

        :return: The type of this Image.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Image.

        Image type  # noqa: E501

        :param type: The type of this Image.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ImageUrl"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def bbox(self):
        """Gets the bbox of this Image.  # noqa: E501

        Bounding box within the image  # noqa: E501

        :return: The bbox of this Image.  # noqa: E501
        :rtype: LatLonBoundingBox
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this Image.

        Bounding box within the image  # noqa: E501

        :param bbox: The bbox of this Image.  # noqa: E501
        :type: LatLonBoundingBox
        """

        self._bbox = bbox

    @property
    def url(self):
        """Gets the url of this Image.  # noqa: E501

        The URL from which to download the image  # noqa: E501

        :return: The url of this Image.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Image.

        The URL from which to download the image  # noqa: E501

        :param url: The url of this Image.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def credentials(self):
        """Gets the credentials of this Image.  # noqa: E501

        Credentials for the download URL in \"user:password\" format (optional).  # noqa: E501

        :return: The credentials of this Image.  # noqa: E501
        :rtype: str
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Image.

        Credentials for the download URL in \"user:password\" format (optional).  # noqa: E501

        :param credentials: The credentials of this Image.  # noqa: E501
        :type: str
        """

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Image, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
