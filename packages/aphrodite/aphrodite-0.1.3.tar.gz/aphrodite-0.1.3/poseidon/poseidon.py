import hashlib
X =hashlib .sha256
import hmac
k =hmac .new
import base64
j =base64 .b64encode
v =base64 .b64decode
import time
a =time .time
from Crypto .PublicKey import RSA
m =RSA .importKey
from Crypto .Cipher import PKCS1_OAEP
E =PKCS1_OAEP .new
from urllib import request ,parse ,error
P =error .URLError
f =parse .urlencode
o =request .urlopen
B =request .Request
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import simplejson
O =simplejson .loads
H =2 *60 *60 *1000
y =30 *24 *60 *60 *1000
sk ='knoczslufdasvhbivbewnrvuywachsrawqdpzesccknrhhetgmrcwfqfudywbeon'
N =b'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAokFjy0wLMKH0/39hxPN6JYRkMDXzvVIGQh55Keo2LIsP/jRU/yZHT/Vkg34yU9koNjSaacPvooXEoI5eFGuRrsBMrotZ5xfejCrTbGvZqjhnMPBheDmxfflIZzRrF/zoQvF0nIbmGNkxEfROHtDDkgNuGRdthXrNavCgfM2z3LNF83UT9CGpxJWBeKK3pXfYLsQ4f8uyrQRcy2BhKfJ/PKai1mocXYqr07JfQ0XZM4xIzuQ7E4ybNk5IFreDuuhF63wXAi1uonGzqjEYcbC1xT2boNiZORoOQWpAHhSbIRpljmW/uHBvoKZ573PQbbxE62hXv1Z1iVky0dtAV65dXwIDAQAB'

def __O00OO000OOO0000O0 (O000O00O0O0OOOO0O ,O00OO0O0O00OOOO00 ):
 O000O00O0OOO0O00O =[O000O00O0O0OOOO0O .split ("-")[1 ],O00OO0O0O00OOOO00 .split ("-")[1 ]]
 O00000OO0O00000OO =''.join (O000O00O0OOO0O00O )
 return str (int (O00000OO0O00000OO ,16 ))[:6 ]
def __OOOOOO00O0OO0O00O (OOOOOO0O0OOOOOOO0 ,O0O0OO00OO0OO000O ,O0OOO00O0OOO0000O ):
 OO00000O00O00OOOO =OOOOOO0O0OOOOOOO0 +str (int (round (a ()*1000 ))+O0O0OO00OO0OO000O )
 O00000000O0O000O0 =OOOOOO0O0OOOOOOO0 +str (int (round (a ()*1000 ))+O0OOO00O0OOO0000O )
 O00O0O0OOOOOO0O0O =list ()
 O00O0O0OOOOOO0O0O .append (k (sk .encode ('UTF-8'),OO00000O00O00OOOO .encode ('UTF-8'),X ).hexdigest ())
 O00O0O0OOOOOO0O0O .append (k (sk .encode ('UTF-8'),O00000000O0O000O0 .encode ('UTF-8'),X ).hexdigest ())
 return O00O0O0OOOOOO0O0O
def __OO00O0OOOOOO00O00 (OOOOO0OOO00OO0OOO ,OO000OOO000O0O000 ):
 OOO00O0OO00OO00OO =OOOOO0OOO00OO0OOO +str (int (round (a ()*1000 ))+OO000OOO000O0O000 )
 return k (sk .encode ('UTF-8'),OOO00O0OO00OO00OO .encode ('UTF-8'),X ).hexdigest ()
def __O0000O0O000OO0OOO (OO0O0O000OO0O0OO0 ,O0000O0OOO0O00OO0 ,OO0OOOO000OO0OO00 ,OOOOO0O000OO000OO ,O00O0OO000OOO00OO ):
 OO0O0OO0O0000OO0O =OO0O0O000OO0O0OO0 +'$'+O0000O0OOO0O00OO0 +'$'+OO0OOOO000OO0OO00 +'$'+OOOOO0O000OO000OO +'$'+O00O0OO000OOO00OO
 O000OOO0O0O0O0000 =v (N )
 OO0O0O000000O000O =m (O000OOO0O0O0O0000 )
 OO0OO0OO0OO0OOOO0 =E (OO0O0O000000O000O )
 OO0O0OO0O0000OO0O =OO0OO0OO0OO0OOOO0 .encrypt (OO0O0OO0O0000OO0O .encode ('UTF-8'))
 return j (OO0O0OO0O0000OO0O ).decode ()
def urlopen (O00OOO00OO0O0OO00 ,O00OOO0OOOO0O000O ,O0000O0O0OOOO0O0O ,data =None ,headers ={}):
 OOOOOO00OOOO0O000 =__O00OO000OOO0000O0 (O00OOO00OO0O0OO00 ,O00OOO0OOOO0O000O )
 O00OOOO0OOO0OO000 =__OOOOOO00O0OO0O00O (OOOOOO00OOOO0O000 ,H ,y )
 O0000OO0O000OOO00 =__O0000O0O000OO0OOO (OOOOOO00OOOO0O000 ,O00OOO00OO0O0OO00 ,O00OOO0OOOO0O000O ,O00OOOO0OOO0OO000 [0 ],O00OOOO0OOO0OO000 [1 ])
 if data !=None :
  data =f (data ).encode ('UTF-8')
 OO00O0OOOOOO00000 =B (O0000O0O0OOOO0O0O ,data )
 OO00O0OOOOOO00000 .add_header ('apim-accesstoken',O0000OO0O000OOO00 )
 OO00O0OOOOOO00000 .add_header ('Content-Type','application/json;charset=utf-8')
 OO00O0OOOOOO00000 .add_header ('User-Agent','Python_enos_api')
 for O00OOO00OO0O0OO00 ,OOO0OO00OO000OO00 in headers .items ():
  OO00O0OOOOOO00000 .add_header (O00OOO00OO0O0OO00 ,OOO0OO00OO000OO00 )
 try :
  OO0000O0O0OO000OO =o (OO00O0OOOOOO00000 )
  O0OO0OO00000O00OO =OO0000O0O0OO000OO .read ().decode ('UTF-8')
  OO0O0OO0O000000OO =O (O0OO0OO00000O00OO )
  try :
   OO0O0O0000OOOOO0O =OO0O0OO0O000000OO ['apim_status']
   if OO0O0O0000OOOOO0O ==4011 :
    OOO0OOO0O000OOOO0 =OO0O0OO0O000000OO ['apim_refreshtoken']
    O0O0000O0OO0OOO00 =__OO00O0OOOOOO00O00 (OOOOOO00OOOO0O000 ,H )
    O0000OO0O000OOO00 =__O0000O0O000OO0OOO (OOOOOO00OOOO0O000 ,O00OOO00OO0O0OO00 ,O00OOO0OOOO0O000O ,O0O0000O0OO0OOO00 ,OOO0OOO0O000OOOO0 )
   elif OO0O0O0000OOOOO0O ==4012 :
    O00OOOO0OOO0OO000 =__OOOOOO00O0OO0O00O (OOOOOO00OOOO0O000 ,H ,y )
    O0000OO0O000OOO00 =__O0000O0O000OO0OOO (OOOOOO00OOOO0O000 ,O00OOO00OO0O0OO00 ,O00OOO0OOOO0O000O ,O00OOOO0OOO0OO000 [0 ],O00OOOO0OOO0OO000 [1 ])
   if data !=None :
    data =f (data ).encode ('UTF-8')
   OO00O0OOOOOO00000 =B (O0000O0O0OOOO0O0O ,data )
   OO00O0OOOOOO00000 .add_header ('apim-accesstoken',O0000OO0O000OOO00 )
   OO00O0OOOOOO00000 .add_header ('Content-Type','application/json;charset=utf-8')
   OO00O0OOOOOO00000 .add_header ('User-Agent','Python_enos_api')
   for O00OOO00OO0O0OO00 ,OOO0OO00OO000OO00 in headers .items ():
    OO00O0OOOOOO00000 .add_header (O00OOO00OO0O0OO00 ,OOO0OO00OO000OO00 )
   OO0000O0O0OO000OO =o (OO00O0OOOOOO00000 )
   return OO0000O0O0OO000OO .read ().decode ('UTF-8')
  except KeyError :
   return OO0O0OO0O000000OO
 except P as OOOOOOO00O0O000O0 :
  print (OOOOOOO00O0O000O0 )
