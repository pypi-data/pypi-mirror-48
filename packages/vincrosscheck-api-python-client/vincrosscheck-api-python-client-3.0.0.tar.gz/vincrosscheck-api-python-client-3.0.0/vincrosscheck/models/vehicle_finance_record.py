# coding: utf-8

"""
    VXC Services API

    API for methods pertaining to all VXC services  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vincrosscheck.models.vehicle_finance_dealer import VehicleFinanceDealer  # noqa: F401,E501
from vincrosscheck.models.vehicle_finance_details import VehicleFinanceDetails  # noqa: F401,E501
from vincrosscheck.models.vehicle_finance_location import VehicleFinanceLocation  # noqa: F401,E501
from vincrosscheck.models.vehicle_finance_odometer import VehicleFinanceOdometer  # noqa: F401,E501


class VehicleFinanceRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dealer': 'VehicleFinanceDealer',
        'details': 'VehicleFinanceDetails',
        'location': 'VehicleFinanceLocation',
        'odometer': 'VehicleFinanceOdometer',
        'vin': 'str'
    }

    attribute_map = {
        'dealer': 'dealer',
        'details': 'details',
        'location': 'location',
        'odometer': 'odometer',
        'vin': 'vin'
    }

    def __init__(self, dealer=None, details=None, location=None, odometer=None, vin=None):  # noqa: E501
        """VehicleFinanceRecord - a model defined in Swagger"""  # noqa: E501

        self._dealer = None
        self._details = None
        self._location = None
        self._odometer = None
        self._vin = None
        self.discriminator = None

        if dealer is not None:
            self.dealer = dealer
        self.details = details
        if location is not None:
            self.location = location
        if odometer is not None:
            self.odometer = odometer
        self.vin = vin

    @property
    def dealer(self):
        """Gets the dealer of this VehicleFinanceRecord.  # noqa: E501


        :return: The dealer of this VehicleFinanceRecord.  # noqa: E501
        :rtype: VehicleFinanceDealer
        """
        return self._dealer

    @dealer.setter
    def dealer(self, dealer):
        """Sets the dealer of this VehicleFinanceRecord.


        :param dealer: The dealer of this VehicleFinanceRecord.  # noqa: E501
        :type: VehicleFinanceDealer
        """

        self._dealer = dealer

    @property
    def details(self):
        """Gets the details of this VehicleFinanceRecord.  # noqa: E501


        :return: The details of this VehicleFinanceRecord.  # noqa: E501
        :rtype: VehicleFinanceDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this VehicleFinanceRecord.


        :param details: The details of this VehicleFinanceRecord.  # noqa: E501
        :type: VehicleFinanceDetails
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details

    @property
    def location(self):
        """Gets the location of this VehicleFinanceRecord.  # noqa: E501


        :return: The location of this VehicleFinanceRecord.  # noqa: E501
        :rtype: VehicleFinanceLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this VehicleFinanceRecord.


        :param location: The location of this VehicleFinanceRecord.  # noqa: E501
        :type: VehicleFinanceLocation
        """

        self._location = location

    @property
    def odometer(self):
        """Gets the odometer of this VehicleFinanceRecord.  # noqa: E501


        :return: The odometer of this VehicleFinanceRecord.  # noqa: E501
        :rtype: VehicleFinanceOdometer
        """
        return self._odometer

    @odometer.setter
    def odometer(self, odometer):
        """Sets the odometer of this VehicleFinanceRecord.


        :param odometer: The odometer of this VehicleFinanceRecord.  # noqa: E501
        :type: VehicleFinanceOdometer
        """

        self._odometer = odometer

    @property
    def vin(self):
        """Gets the vin of this VehicleFinanceRecord.  # noqa: E501

        Vehicle Identification Number  # noqa: E501

        :return: The vin of this VehicleFinanceRecord.  # noqa: E501
        :rtype: str
        """
        return self._vin

    @vin.setter
    def vin(self, vin):
        """Sets the vin of this VehicleFinanceRecord.

        Vehicle Identification Number  # noqa: E501

        :param vin: The vin of this VehicleFinanceRecord.  # noqa: E501
        :type: str
        """
        if vin is None:
            raise ValueError("Invalid value for `vin`, must not be `None`")  # noqa: E501

        self._vin = vin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleFinanceRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
