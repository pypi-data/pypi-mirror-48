# coding: utf-8

"""
    VXC Services API

    API for methods pertaining to all VXC services  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VehicleFinanceOdometer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'date',
        'reading': 'int',
        'uom': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'reading': 'reading',
        'uom': 'uom'
    }

    def __init__(self, _date=None, reading=None, uom=None):  # noqa: E501
        """VehicleFinanceOdometer - a model defined in Swagger"""  # noqa: E501

        self.__date = None
        self._reading = None
        self._uom = None
        self.discriminator = None

        if _date is not None:
            self._date = _date
        if reading is not None:
            self.reading = reading
        if uom is not None:
            self.uom = uom

    @property
    def _date(self):
        """Gets the _date of this VehicleFinanceOdometer.  # noqa: E501

        the date the odometer reading was taken  # noqa: E501

        :return: The _date of this VehicleFinanceOdometer.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this VehicleFinanceOdometer.

        the date the odometer reading was taken  # noqa: E501

        :param _date: The _date of this VehicleFinanceOdometer.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def reading(self):
        """Gets the reading of this VehicleFinanceOdometer.  # noqa: E501

        the odometer reading from the vehicle at sale time  # noqa: E501

        :return: The reading of this VehicleFinanceOdometer.  # noqa: E501
        :rtype: int
        """
        return self._reading

    @reading.setter
    def reading(self, reading):
        """Sets the reading of this VehicleFinanceOdometer.

        the odometer reading from the vehicle at sale time  # noqa: E501

        :param reading: The reading of this VehicleFinanceOdometer.  # noqa: E501
        :type: int
        """

        self._reading = reading

    @property
    def uom(self):
        """Gets the uom of this VehicleFinanceOdometer.  # noqa: E501

        the kilometer or mile indicator that accompanies the odometer reading  # noqa: E501

        :return: The uom of this VehicleFinanceOdometer.  # noqa: E501
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this VehicleFinanceOdometer.

        the kilometer or mile indicator that accompanies the odometer reading  # noqa: E501

        :param uom: The uom of this VehicleFinanceOdometer.  # noqa: E501
        :type: str
        """
        allowed_values = ["M", "K"]  # noqa: E501
        if uom not in allowed_values:
            raise ValueError(
                "Invalid value for `uom` ({0}), must be one of {1}"  # noqa: E501
                .format(uom, allowed_values)
            )

        self._uom = uom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleFinanceOdometer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
