# coding: utf-8

"""
    VXC Services API

    API for methods pertaining to all VXC services  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VehicleFinancePortfolio(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_end_date': 'str',
        'auction_access_id': 'int',
        'balance': 'float',
        'branch_id': 'str',
        '_date': 'date',
        'dealer_number': 'str',
        'event_date': 'date',
        'make': 'str',
        'model': 'str',
        'odometer_date': 'date',
        'odometer_reading': 'int',
        'scheduled_end_date': 'date',
        'state': 'str',
        'title': 'bool',
        'uom': 'str',
        'vin': 'str',
        'year': 'str'
    }

    attribute_map = {
        'actual_end_date': 'actualEndDate',
        'auction_access_id': 'auctionAccessId',
        'balance': 'balance',
        'branch_id': 'branchId',
        '_date': 'date',
        'dealer_number': 'dealerNumber',
        'event_date': 'eventDate',
        'make': 'make',
        'model': 'model',
        'odometer_date': 'odometerDate',
        'odometer_reading': 'odometerReading',
        'scheduled_end_date': 'scheduledEndDate',
        'state': 'state',
        'title': 'title',
        'uom': 'uom',
        'vin': 'vin',
        'year': 'year'
    }

    def __init__(self, actual_end_date=None, auction_access_id=None, balance=None, branch_id=None, _date=None, dealer_number=None, event_date=None, make=None, model=None, odometer_date=None, odometer_reading=None, scheduled_end_date=None, state=None, title=None, uom=None, vin=None, year=None):  # noqa: E501
        """VehicleFinancePortfolio - a model defined in Swagger"""  # noqa: E501

        self._actual_end_date = None
        self._auction_access_id = None
        self._balance = None
        self._branch_id = None
        self.__date = None
        self._dealer_number = None
        self._event_date = None
        self._make = None
        self._model = None
        self._odometer_date = None
        self._odometer_reading = None
        self._scheduled_end_date = None
        self._state = None
        self._title = None
        self._uom = None
        self._vin = None
        self._year = None
        self.discriminator = None

        if actual_end_date is not None:
            self.actual_end_date = actual_end_date
        if auction_access_id is not None:
            self.auction_access_id = auction_access_id
        if balance is not None:
            self.balance = balance
        if branch_id is not None:
            self.branch_id = branch_id
        if _date is not None:
            self._date = _date
        if dealer_number is not None:
            self.dealer_number = dealer_number
        self.event_date = event_date
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if odometer_date is not None:
            self.odometer_date = odometer_date
        if odometer_reading is not None:
            self.odometer_reading = odometer_reading
        if scheduled_end_date is not None:
            self.scheduled_end_date = scheduled_end_date
        if state is not None:
            self.state = state
        if title is not None:
            self.title = title
        if uom is not None:
            self.uom = uom
        self.vin = vin
        if year is not None:
            self.year = year

    @property
    def actual_end_date(self):
        """Gets the actual_end_date of this VehicleFinancePortfolio.  # noqa: E501

        Acutal Date financing ending  # noqa: E501

        :return: The actual_end_date of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: str
        """
        return self._actual_end_date

    @actual_end_date.setter
    def actual_end_date(self, actual_end_date):
        """Sets the actual_end_date of this VehicleFinancePortfolio.

        Acutal Date financing ending  # noqa: E501

        :param actual_end_date: The actual_end_date of this VehicleFinancePortfolio.  # noqa: E501
        :type: str
        """

        self._actual_end_date = actual_end_date

    @property
    def auction_access_id(self):
        """Gets the auction_access_id of this VehicleFinancePortfolio.  # noqa: E501

        the AuctionACCESS ID of the company – for customers licensed with AuctionACCESS  # noqa: E501

        :return: The auction_access_id of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: int
        """
        return self._auction_access_id

    @auction_access_id.setter
    def auction_access_id(self, auction_access_id):
        """Sets the auction_access_id of this VehicleFinancePortfolio.

        the AuctionACCESS ID of the company – for customers licensed with AuctionACCESS  # noqa: E501

        :param auction_access_id: The auction_access_id of this VehicleFinancePortfolio.  # noqa: E501
        :type: int
        """

        self._auction_access_id = auction_access_id

    @property
    def balance(self):
        """Gets the balance of this VehicleFinancePortfolio.  # noqa: E501

        the amount owed/financed in the portfolio transaction  # noqa: E501

        :return: The balance of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this VehicleFinancePortfolio.

        the amount owed/financed in the portfolio transaction  # noqa: E501

        :param balance: The balance of this VehicleFinancePortfolio.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def branch_id(self):
        """Gets the branch_id of this VehicleFinancePortfolio.  # noqa: E501

        the ID or name of the branch at which the vehicle is physically located  # noqa: E501

        :return: The branch_id of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: str
        """
        return self._branch_id

    @branch_id.setter
    def branch_id(self, branch_id):
        """Sets the branch_id of this VehicleFinancePortfolio.

        the ID or name of the branch at which the vehicle is physically located  # noqa: E501

        :param branch_id: The branch_id of this VehicleFinancePortfolio.  # noqa: E501
        :type: str
        """

        self._branch_id = branch_id

    @property
    def _date(self):
        """Gets the _date of this VehicleFinancePortfolio.  # noqa: E501

        the date  # noqa: E501

        :return: The _date of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this VehicleFinancePortfolio.

        the date  # noqa: E501

        :param _date: The _date of this VehicleFinancePortfolio.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def dealer_number(self):
        """Gets the dealer_number of this VehicleFinancePortfolio.  # noqa: E501

        the dealer number assigned by the auction  # noqa: E501

        :return: The dealer_number of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: str
        """
        return self._dealer_number

    @dealer_number.setter
    def dealer_number(self, dealer_number):
        """Sets the dealer_number of this VehicleFinancePortfolio.

        the dealer number assigned by the auction  # noqa: E501

        :param dealer_number: The dealer_number of this VehicleFinancePortfolio.  # noqa: E501
        :type: str
        """

        self._dealer_number = dealer_number

    @property
    def event_date(self):
        """Gets the event_date of this VehicleFinancePortfolio.  # noqa: E501

        Event Date  # noqa: E501

        :return: The event_date of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: date
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this VehicleFinancePortfolio.

        Event Date  # noqa: E501

        :param event_date: The event_date of this VehicleFinancePortfolio.  # noqa: E501
        :type: date
        """
        if event_date is None:
            raise ValueError("Invalid value for `event_date`, must not be `None`")  # noqa: E501

        self._event_date = event_date

    @property
    def make(self):
        """Gets the make of this VehicleFinancePortfolio.  # noqa: E501

        the vehicle make  # noqa: E501

        :return: The make of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this VehicleFinancePortfolio.

        the vehicle make  # noqa: E501

        :param make: The make of this VehicleFinancePortfolio.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this VehicleFinancePortfolio.  # noqa: E501

        the vehicle model  # noqa: E501

        :return: The model of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this VehicleFinancePortfolio.

        the vehicle model  # noqa: E501

        :param model: The model of this VehicleFinancePortfolio.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def odometer_date(self):
        """Gets the odometer_date of this VehicleFinancePortfolio.  # noqa: E501

        the date of the odometer reading  # noqa: E501

        :return: The odometer_date of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: date
        """
        return self._odometer_date

    @odometer_date.setter
    def odometer_date(self, odometer_date):
        """Sets the odometer_date of this VehicleFinancePortfolio.

        the date of the odometer reading  # noqa: E501

        :param odometer_date: The odometer_date of this VehicleFinancePortfolio.  # noqa: E501
        :type: date
        """

        self._odometer_date = odometer_date

    @property
    def odometer_reading(self):
        """Gets the odometer_reading of this VehicleFinancePortfolio.  # noqa: E501

        the odometer reading from the vehicle  # noqa: E501

        :return: The odometer_reading of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: int
        """
        return self._odometer_reading

    @odometer_reading.setter
    def odometer_reading(self, odometer_reading):
        """Sets the odometer_reading of this VehicleFinancePortfolio.

        the odometer reading from the vehicle  # noqa: E501

        :param odometer_reading: The odometer_reading of this VehicleFinancePortfolio.  # noqa: E501
        :type: int
        """

        self._odometer_reading = odometer_reading

    @property
    def scheduled_end_date(self):
        """Gets the scheduled_end_date of this VehicleFinancePortfolio.  # noqa: E501

        Scheduled End Date  # noqa: E501

        :return: The scheduled_end_date of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: date
        """
        return self._scheduled_end_date

    @scheduled_end_date.setter
    def scheduled_end_date(self, scheduled_end_date):
        """Sets the scheduled_end_date of this VehicleFinancePortfolio.

        Scheduled End Date  # noqa: E501

        :param scheduled_end_date: The scheduled_end_date of this VehicleFinancePortfolio.  # noqa: E501
        :type: date
        """

        self._scheduled_end_date = scheduled_end_date

    @property
    def state(self):
        """Gets the state of this VehicleFinancePortfolio.  # noqa: E501

        the state in which the ownership occurred  # noqa: E501

        :return: The state of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VehicleFinancePortfolio.

        the state in which the ownership occurred  # noqa: E501

        :param state: The state of this VehicleFinancePortfolio.  # noqa: E501
        :type: str
        """
        if state is not None and len(state) > 2:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `2`")  # noqa: E501

        self._state = state

    @property
    def title(self):
        """Gets the title of this VehicleFinancePortfolio.  # noqa: E501

        The indication of whether or not the vehicle title is in your possession  # noqa: E501

        :return: The title of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: bool
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this VehicleFinancePortfolio.

        The indication of whether or not the vehicle title is in your possession  # noqa: E501

        :param title: The title of this VehicleFinancePortfolio.  # noqa: E501
        :type: bool
        """

        self._title = title

    @property
    def uom(self):
        """Gets the uom of this VehicleFinancePortfolio.  # noqa: E501

        the kilometer or mile indicator that accompanies the odometer reading  # noqa: E501

        :return: The uom of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this VehicleFinancePortfolio.

        the kilometer or mile indicator that accompanies the odometer reading  # noqa: E501

        :param uom: The uom of this VehicleFinancePortfolio.  # noqa: E501
        :type: str
        """
        allowed_values = ["M", "K"]  # noqa: E501
        if uom not in allowed_values:
            raise ValueError(
                "Invalid value for `uom` ({0}), must be one of {1}"  # noqa: E501
                .format(uom, allowed_values)
            )

        self._uom = uom

    @property
    def vin(self):
        """Gets the vin of this VehicleFinancePortfolio.  # noqa: E501

        the Vehicle Identification Number  # noqa: E501

        :return: The vin of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: str
        """
        return self._vin

    @vin.setter
    def vin(self, vin):
        """Sets the vin of this VehicleFinancePortfolio.

        the Vehicle Identification Number  # noqa: E501

        :param vin: The vin of this VehicleFinancePortfolio.  # noqa: E501
        :type: str
        """
        if vin is None:
            raise ValueError("Invalid value for `vin`, must not be `None`")  # noqa: E501

        self._vin = vin

    @property
    def year(self):
        """Gets the year of this VehicleFinancePortfolio.  # noqa: E501

        the model year  # noqa: E501

        :return: The year of this VehicleFinancePortfolio.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this VehicleFinancePortfolio.

        the model year  # noqa: E501

        :param year: The year of this VehicleFinancePortfolio.  # noqa: E501
        :type: str
        """

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleFinancePortfolio):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
