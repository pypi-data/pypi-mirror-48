# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkWrapExtrapolateImageFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkWrapExtrapolateImageFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkWrapExtrapolateImageFunctionPython
            return _itkWrapExtrapolateImageFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkWrapExtrapolateImageFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkWrapExtrapolateImageFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkWrapExtrapolateImageFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkInterpolateImageFunctionPython
import itkContinuousIndexPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkRGBAPixelPython
import itkCovariantVectorPython
import itkImageFunctionBasePython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBPixelPython
import itkImageRegionPython
import ITKCommonBasePython
import itkFunctionBasePython
import itkArrayPython

def itkWrapExtrapolateImageFunctionIF3D_New():
  return itkWrapExtrapolateImageFunctionIF3D.New()


def itkWrapExtrapolateImageFunctionIUS3D_New():
  return itkWrapExtrapolateImageFunctionIUS3D.New()


def itkWrapExtrapolateImageFunctionIUC3D_New():
  return itkWrapExtrapolateImageFunctionIUC3D.New()


def itkWrapExtrapolateImageFunctionISS3D_New():
  return itkWrapExtrapolateImageFunctionISS3D.New()


def itkWrapExtrapolateImageFunctionIF2D_New():
  return itkWrapExtrapolateImageFunctionIF2D.New()


def itkWrapExtrapolateImageFunctionIUS2D_New():
  return itkWrapExtrapolateImageFunctionIUS2D.New()


def itkWrapExtrapolateImageFunctionIUC2D_New():
  return itkWrapExtrapolateImageFunctionIUC2D.New()


def itkWrapExtrapolateImageFunctionISS2D_New():
  return itkWrapExtrapolateImageFunctionISS2D.New()


def itkExtrapolateImageFunctionIF3D_New():
  return itkExtrapolateImageFunctionIF3D.New()


def itkExtrapolateImageFunctionIUS3D_New():
  return itkExtrapolateImageFunctionIUS3D.New()


def itkExtrapolateImageFunctionIUC3D_New():
  return itkExtrapolateImageFunctionIUC3D.New()


def itkExtrapolateImageFunctionISS3D_New():
  return itkExtrapolateImageFunctionISS3D.New()


def itkExtrapolateImageFunctionIF2D_New():
  return itkExtrapolateImageFunctionIF2D.New()


def itkExtrapolateImageFunctionIUS2D_New():
  return itkExtrapolateImageFunctionIUS2D.New()


def itkExtrapolateImageFunctionIUC2D_New():
  return itkExtrapolateImageFunctionIUC2D.New()


def itkExtrapolateImageFunctionISS2D_New():
  return itkExtrapolateImageFunctionISS2D.New()

class itkExtrapolateImageFunctionIF2D(itkImageFunctionBasePython.itkImageFunctionIF2DD):
    """Proxy of C++ itkExtrapolateImageFunctionIF2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkExtrapolateImageFunctionIF2D

    def cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionIF2D *":
        """cast(itkLightObject obj) -> itkExtrapolateImageFunctionIF2D"""
        return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIF2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtrapolateImageFunctionIF2D

        Create a new object of the class itkExtrapolateImageFunctionIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtrapolateImageFunctionIF2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtrapolateImageFunctionIF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtrapolateImageFunctionIF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtrapolateImageFunctionIF2D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIF2D_swigregister
itkExtrapolateImageFunctionIF2D_swigregister(itkExtrapolateImageFunctionIF2D)

def itkExtrapolateImageFunctionIF2D_cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionIF2D *":
    """itkExtrapolateImageFunctionIF2D_cast(itkLightObject obj) -> itkExtrapolateImageFunctionIF2D"""
    return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIF2D_cast(obj)

class itkExtrapolateImageFunctionIF3D(itkImageFunctionBasePython.itkImageFunctionIF3DD):
    """Proxy of C++ itkExtrapolateImageFunctionIF3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkExtrapolateImageFunctionIF3D

    def cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionIF3D *":
        """cast(itkLightObject obj) -> itkExtrapolateImageFunctionIF3D"""
        return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIF3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtrapolateImageFunctionIF3D

        Create a new object of the class itkExtrapolateImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtrapolateImageFunctionIF3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtrapolateImageFunctionIF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtrapolateImageFunctionIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtrapolateImageFunctionIF3D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIF3D_swigregister
itkExtrapolateImageFunctionIF3D_swigregister(itkExtrapolateImageFunctionIF3D)

def itkExtrapolateImageFunctionIF3D_cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionIF3D *":
    """itkExtrapolateImageFunctionIF3D_cast(itkLightObject obj) -> itkExtrapolateImageFunctionIF3D"""
    return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIF3D_cast(obj)

class itkExtrapolateImageFunctionISS2D(itkImageFunctionBasePython.itkImageFunctionISS2DD):
    """Proxy of C++ itkExtrapolateImageFunctionISS2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkExtrapolateImageFunctionISS2D

    def cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionISS2D *":
        """cast(itkLightObject obj) -> itkExtrapolateImageFunctionISS2D"""
        return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionISS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtrapolateImageFunctionISS2D

        Create a new object of the class itkExtrapolateImageFunctionISS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtrapolateImageFunctionISS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtrapolateImageFunctionISS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtrapolateImageFunctionISS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtrapolateImageFunctionISS2D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionISS2D_swigregister
itkExtrapolateImageFunctionISS2D_swigregister(itkExtrapolateImageFunctionISS2D)

def itkExtrapolateImageFunctionISS2D_cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionISS2D *":
    """itkExtrapolateImageFunctionISS2D_cast(itkLightObject obj) -> itkExtrapolateImageFunctionISS2D"""
    return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionISS2D_cast(obj)

class itkExtrapolateImageFunctionISS3D(itkImageFunctionBasePython.itkImageFunctionISS3DD):
    """Proxy of C++ itkExtrapolateImageFunctionISS3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkExtrapolateImageFunctionISS3D

    def cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionISS3D *":
        """cast(itkLightObject obj) -> itkExtrapolateImageFunctionISS3D"""
        return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionISS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtrapolateImageFunctionISS3D

        Create a new object of the class itkExtrapolateImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtrapolateImageFunctionISS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtrapolateImageFunctionISS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtrapolateImageFunctionISS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtrapolateImageFunctionISS3D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionISS3D_swigregister
itkExtrapolateImageFunctionISS3D_swigregister(itkExtrapolateImageFunctionISS3D)

def itkExtrapolateImageFunctionISS3D_cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionISS3D *":
    """itkExtrapolateImageFunctionISS3D_cast(itkLightObject obj) -> itkExtrapolateImageFunctionISS3D"""
    return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionISS3D_cast(obj)

class itkExtrapolateImageFunctionIUC2D(itkImageFunctionBasePython.itkImageFunctionIUC2DD):
    """Proxy of C++ itkExtrapolateImageFunctionIUC2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkExtrapolateImageFunctionIUC2D

    def cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionIUC2D *":
        """cast(itkLightObject obj) -> itkExtrapolateImageFunctionIUC2D"""
        return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIUC2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtrapolateImageFunctionIUC2D

        Create a new object of the class itkExtrapolateImageFunctionIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtrapolateImageFunctionIUC2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtrapolateImageFunctionIUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtrapolateImageFunctionIUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtrapolateImageFunctionIUC2D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIUC2D_swigregister
itkExtrapolateImageFunctionIUC2D_swigregister(itkExtrapolateImageFunctionIUC2D)

def itkExtrapolateImageFunctionIUC2D_cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionIUC2D *":
    """itkExtrapolateImageFunctionIUC2D_cast(itkLightObject obj) -> itkExtrapolateImageFunctionIUC2D"""
    return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIUC2D_cast(obj)

class itkExtrapolateImageFunctionIUC3D(itkImageFunctionBasePython.itkImageFunctionIUC3DD):
    """Proxy of C++ itkExtrapolateImageFunctionIUC3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkExtrapolateImageFunctionIUC3D

    def cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionIUC3D *":
        """cast(itkLightObject obj) -> itkExtrapolateImageFunctionIUC3D"""
        return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIUC3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtrapolateImageFunctionIUC3D

        Create a new object of the class itkExtrapolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtrapolateImageFunctionIUC3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtrapolateImageFunctionIUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtrapolateImageFunctionIUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtrapolateImageFunctionIUC3D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIUC3D_swigregister
itkExtrapolateImageFunctionIUC3D_swigregister(itkExtrapolateImageFunctionIUC3D)

def itkExtrapolateImageFunctionIUC3D_cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionIUC3D *":
    """itkExtrapolateImageFunctionIUC3D_cast(itkLightObject obj) -> itkExtrapolateImageFunctionIUC3D"""
    return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIUC3D_cast(obj)

class itkExtrapolateImageFunctionIUS2D(itkImageFunctionBasePython.itkImageFunctionIUS2DD):
    """Proxy of C++ itkExtrapolateImageFunctionIUS2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkExtrapolateImageFunctionIUS2D

    def cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionIUS2D *":
        """cast(itkLightObject obj) -> itkExtrapolateImageFunctionIUS2D"""
        return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIUS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtrapolateImageFunctionIUS2D

        Create a new object of the class itkExtrapolateImageFunctionIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtrapolateImageFunctionIUS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtrapolateImageFunctionIUS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtrapolateImageFunctionIUS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtrapolateImageFunctionIUS2D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIUS2D_swigregister
itkExtrapolateImageFunctionIUS2D_swigregister(itkExtrapolateImageFunctionIUS2D)

def itkExtrapolateImageFunctionIUS2D_cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionIUS2D *":
    """itkExtrapolateImageFunctionIUS2D_cast(itkLightObject obj) -> itkExtrapolateImageFunctionIUS2D"""
    return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIUS2D_cast(obj)

class itkExtrapolateImageFunctionIUS3D(itkImageFunctionBasePython.itkImageFunctionIUS3DD):
    """Proxy of C++ itkExtrapolateImageFunctionIUS3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkExtrapolateImageFunctionIUS3D

    def cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionIUS3D *":
        """cast(itkLightObject obj) -> itkExtrapolateImageFunctionIUS3D"""
        return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIUS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExtrapolateImageFunctionIUS3D

        Create a new object of the class itkExtrapolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExtrapolateImageFunctionIUS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExtrapolateImageFunctionIUS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExtrapolateImageFunctionIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExtrapolateImageFunctionIUS3D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIUS3D_swigregister
itkExtrapolateImageFunctionIUS3D_swigregister(itkExtrapolateImageFunctionIUS3D)

def itkExtrapolateImageFunctionIUS3D_cast(obj: 'itkLightObject') -> "itkExtrapolateImageFunctionIUS3D *":
    """itkExtrapolateImageFunctionIUS3D_cast(itkLightObject obj) -> itkExtrapolateImageFunctionIUS3D"""
    return _itkWrapExtrapolateImageFunctionPython.itkExtrapolateImageFunctionIUS3D_cast(obj)

class itkWrapExtrapolateImageFunctionIF2D(itkExtrapolateImageFunctionIF2D):
    """Proxy of C++ itkWrapExtrapolateImageFunctionIF2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWrapExtrapolateImageFunctionIF2D_Pointer":
        """__New_orig__() -> itkWrapExtrapolateImageFunctionIF2D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWrapExtrapolateImageFunctionIF2D_Pointer":
        """Clone(itkWrapExtrapolateImageFunctionIF2D self) -> itkWrapExtrapolateImageFunctionIF2D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF2D_Clone(self)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIF2D *":
        """GetModifiableInterpolator(itkWrapExtrapolateImageFunctionIF2D self) -> itkInterpolateImageFunctionIF2D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF2D_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIF2D *":
        """
        GetInterpolator(itkWrapExtrapolateImageFunctionIF2D self) -> itkInterpolateImageFunctionIF2D
        GetInterpolator(itkWrapExtrapolateImageFunctionIF2D self) -> itkInterpolateImageFunctionIF2D
        """
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF2D_GetInterpolator(self, *args)


    def SetInterpolator(self, ptr: 'itkInterpolateImageFunctionIF2D') -> "void":
        """SetInterpolator(itkWrapExtrapolateImageFunctionIF2D self, itkInterpolateImageFunctionIF2D ptr)"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF2D_SetInterpolator(self, ptr)

    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkWrapExtrapolateImageFunctionIF2D

    def cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionIF2D *":
        """cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionIF2D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWrapExtrapolateImageFunctionIF2D

        Create a new object of the class itkWrapExtrapolateImageFunctionIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWrapExtrapolateImageFunctionIF2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWrapExtrapolateImageFunctionIF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWrapExtrapolateImageFunctionIF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWrapExtrapolateImageFunctionIF2D.Clone = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF2D_Clone, None, itkWrapExtrapolateImageFunctionIF2D)
itkWrapExtrapolateImageFunctionIF2D.GetModifiableInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF2D_GetModifiableInterpolator, None, itkWrapExtrapolateImageFunctionIF2D)
itkWrapExtrapolateImageFunctionIF2D.GetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF2D_GetInterpolator, None, itkWrapExtrapolateImageFunctionIF2D)
itkWrapExtrapolateImageFunctionIF2D.SetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF2D_SetInterpolator, None, itkWrapExtrapolateImageFunctionIF2D)
itkWrapExtrapolateImageFunctionIF2D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF2D_swigregister
itkWrapExtrapolateImageFunctionIF2D_swigregister(itkWrapExtrapolateImageFunctionIF2D)

def itkWrapExtrapolateImageFunctionIF2D___New_orig__() -> "itkWrapExtrapolateImageFunctionIF2D_Pointer":
    """itkWrapExtrapolateImageFunctionIF2D___New_orig__() -> itkWrapExtrapolateImageFunctionIF2D_Pointer"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF2D___New_orig__()

def itkWrapExtrapolateImageFunctionIF2D_cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionIF2D *":
    """itkWrapExtrapolateImageFunctionIF2D_cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionIF2D"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF2D_cast(obj)

class itkWrapExtrapolateImageFunctionIF3D(itkExtrapolateImageFunctionIF3D):
    """Proxy of C++ itkWrapExtrapolateImageFunctionIF3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWrapExtrapolateImageFunctionIF3D_Pointer":
        """__New_orig__() -> itkWrapExtrapolateImageFunctionIF3D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWrapExtrapolateImageFunctionIF3D_Pointer":
        """Clone(itkWrapExtrapolateImageFunctionIF3D self) -> itkWrapExtrapolateImageFunctionIF3D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF3D_Clone(self)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIF3D *":
        """GetModifiableInterpolator(itkWrapExtrapolateImageFunctionIF3D self) -> itkInterpolateImageFunctionIF3D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF3D_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIF3D *":
        """
        GetInterpolator(itkWrapExtrapolateImageFunctionIF3D self) -> itkInterpolateImageFunctionIF3D
        GetInterpolator(itkWrapExtrapolateImageFunctionIF3D self) -> itkInterpolateImageFunctionIF3D
        """
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF3D_GetInterpolator(self, *args)


    def SetInterpolator(self, ptr: 'itkInterpolateImageFunctionIF3D') -> "void":
        """SetInterpolator(itkWrapExtrapolateImageFunctionIF3D self, itkInterpolateImageFunctionIF3D ptr)"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF3D_SetInterpolator(self, ptr)

    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkWrapExtrapolateImageFunctionIF3D

    def cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionIF3D *":
        """cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionIF3D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWrapExtrapolateImageFunctionIF3D

        Create a new object of the class itkWrapExtrapolateImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWrapExtrapolateImageFunctionIF3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWrapExtrapolateImageFunctionIF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWrapExtrapolateImageFunctionIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWrapExtrapolateImageFunctionIF3D.Clone = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF3D_Clone, None, itkWrapExtrapolateImageFunctionIF3D)
itkWrapExtrapolateImageFunctionIF3D.GetModifiableInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF3D_GetModifiableInterpolator, None, itkWrapExtrapolateImageFunctionIF3D)
itkWrapExtrapolateImageFunctionIF3D.GetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF3D_GetInterpolator, None, itkWrapExtrapolateImageFunctionIF3D)
itkWrapExtrapolateImageFunctionIF3D.SetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF3D_SetInterpolator, None, itkWrapExtrapolateImageFunctionIF3D)
itkWrapExtrapolateImageFunctionIF3D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF3D_swigregister
itkWrapExtrapolateImageFunctionIF3D_swigregister(itkWrapExtrapolateImageFunctionIF3D)

def itkWrapExtrapolateImageFunctionIF3D___New_orig__() -> "itkWrapExtrapolateImageFunctionIF3D_Pointer":
    """itkWrapExtrapolateImageFunctionIF3D___New_orig__() -> itkWrapExtrapolateImageFunctionIF3D_Pointer"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF3D___New_orig__()

def itkWrapExtrapolateImageFunctionIF3D_cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionIF3D *":
    """itkWrapExtrapolateImageFunctionIF3D_cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionIF3D"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIF3D_cast(obj)

class itkWrapExtrapolateImageFunctionISS2D(itkExtrapolateImageFunctionISS2D):
    """Proxy of C++ itkWrapExtrapolateImageFunctionISS2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWrapExtrapolateImageFunctionISS2D_Pointer":
        """__New_orig__() -> itkWrapExtrapolateImageFunctionISS2D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWrapExtrapolateImageFunctionISS2D_Pointer":
        """Clone(itkWrapExtrapolateImageFunctionISS2D self) -> itkWrapExtrapolateImageFunctionISS2D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS2D_Clone(self)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionISS2D *":
        """GetModifiableInterpolator(itkWrapExtrapolateImageFunctionISS2D self) -> itkInterpolateImageFunctionISS2D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS2D_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionISS2D *":
        """
        GetInterpolator(itkWrapExtrapolateImageFunctionISS2D self) -> itkInterpolateImageFunctionISS2D
        GetInterpolator(itkWrapExtrapolateImageFunctionISS2D self) -> itkInterpolateImageFunctionISS2D
        """
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS2D_GetInterpolator(self, *args)


    def SetInterpolator(self, ptr: 'itkInterpolateImageFunctionISS2D') -> "void":
        """SetInterpolator(itkWrapExtrapolateImageFunctionISS2D self, itkInterpolateImageFunctionISS2D ptr)"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS2D_SetInterpolator(self, ptr)

    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkWrapExtrapolateImageFunctionISS2D

    def cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionISS2D *":
        """cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionISS2D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWrapExtrapolateImageFunctionISS2D

        Create a new object of the class itkWrapExtrapolateImageFunctionISS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWrapExtrapolateImageFunctionISS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWrapExtrapolateImageFunctionISS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWrapExtrapolateImageFunctionISS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWrapExtrapolateImageFunctionISS2D.Clone = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS2D_Clone, None, itkWrapExtrapolateImageFunctionISS2D)
itkWrapExtrapolateImageFunctionISS2D.GetModifiableInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS2D_GetModifiableInterpolator, None, itkWrapExtrapolateImageFunctionISS2D)
itkWrapExtrapolateImageFunctionISS2D.GetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS2D_GetInterpolator, None, itkWrapExtrapolateImageFunctionISS2D)
itkWrapExtrapolateImageFunctionISS2D.SetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS2D_SetInterpolator, None, itkWrapExtrapolateImageFunctionISS2D)
itkWrapExtrapolateImageFunctionISS2D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS2D_swigregister
itkWrapExtrapolateImageFunctionISS2D_swigregister(itkWrapExtrapolateImageFunctionISS2D)

def itkWrapExtrapolateImageFunctionISS2D___New_orig__() -> "itkWrapExtrapolateImageFunctionISS2D_Pointer":
    """itkWrapExtrapolateImageFunctionISS2D___New_orig__() -> itkWrapExtrapolateImageFunctionISS2D_Pointer"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS2D___New_orig__()

def itkWrapExtrapolateImageFunctionISS2D_cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionISS2D *":
    """itkWrapExtrapolateImageFunctionISS2D_cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionISS2D"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS2D_cast(obj)

class itkWrapExtrapolateImageFunctionISS3D(itkExtrapolateImageFunctionISS3D):
    """Proxy of C++ itkWrapExtrapolateImageFunctionISS3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWrapExtrapolateImageFunctionISS3D_Pointer":
        """__New_orig__() -> itkWrapExtrapolateImageFunctionISS3D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWrapExtrapolateImageFunctionISS3D_Pointer":
        """Clone(itkWrapExtrapolateImageFunctionISS3D self) -> itkWrapExtrapolateImageFunctionISS3D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS3D_Clone(self)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionISS3D *":
        """GetModifiableInterpolator(itkWrapExtrapolateImageFunctionISS3D self) -> itkInterpolateImageFunctionISS3D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS3D_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionISS3D *":
        """
        GetInterpolator(itkWrapExtrapolateImageFunctionISS3D self) -> itkInterpolateImageFunctionISS3D
        GetInterpolator(itkWrapExtrapolateImageFunctionISS3D self) -> itkInterpolateImageFunctionISS3D
        """
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS3D_GetInterpolator(self, *args)


    def SetInterpolator(self, ptr: 'itkInterpolateImageFunctionISS3D') -> "void":
        """SetInterpolator(itkWrapExtrapolateImageFunctionISS3D self, itkInterpolateImageFunctionISS3D ptr)"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS3D_SetInterpolator(self, ptr)

    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkWrapExtrapolateImageFunctionISS3D

    def cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionISS3D *":
        """cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionISS3D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWrapExtrapolateImageFunctionISS3D

        Create a new object of the class itkWrapExtrapolateImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWrapExtrapolateImageFunctionISS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWrapExtrapolateImageFunctionISS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWrapExtrapolateImageFunctionISS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWrapExtrapolateImageFunctionISS3D.Clone = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS3D_Clone, None, itkWrapExtrapolateImageFunctionISS3D)
itkWrapExtrapolateImageFunctionISS3D.GetModifiableInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS3D_GetModifiableInterpolator, None, itkWrapExtrapolateImageFunctionISS3D)
itkWrapExtrapolateImageFunctionISS3D.GetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS3D_GetInterpolator, None, itkWrapExtrapolateImageFunctionISS3D)
itkWrapExtrapolateImageFunctionISS3D.SetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS3D_SetInterpolator, None, itkWrapExtrapolateImageFunctionISS3D)
itkWrapExtrapolateImageFunctionISS3D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS3D_swigregister
itkWrapExtrapolateImageFunctionISS3D_swigregister(itkWrapExtrapolateImageFunctionISS3D)

def itkWrapExtrapolateImageFunctionISS3D___New_orig__() -> "itkWrapExtrapolateImageFunctionISS3D_Pointer":
    """itkWrapExtrapolateImageFunctionISS3D___New_orig__() -> itkWrapExtrapolateImageFunctionISS3D_Pointer"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS3D___New_orig__()

def itkWrapExtrapolateImageFunctionISS3D_cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionISS3D *":
    """itkWrapExtrapolateImageFunctionISS3D_cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionISS3D"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionISS3D_cast(obj)

class itkWrapExtrapolateImageFunctionIUC2D(itkExtrapolateImageFunctionIUC2D):
    """Proxy of C++ itkWrapExtrapolateImageFunctionIUC2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWrapExtrapolateImageFunctionIUC2D_Pointer":
        """__New_orig__() -> itkWrapExtrapolateImageFunctionIUC2D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWrapExtrapolateImageFunctionIUC2D_Pointer":
        """Clone(itkWrapExtrapolateImageFunctionIUC2D self) -> itkWrapExtrapolateImageFunctionIUC2D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC2D_Clone(self)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIUC2D *":
        """GetModifiableInterpolator(itkWrapExtrapolateImageFunctionIUC2D self) -> itkInterpolateImageFunctionIUC2D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC2D_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIUC2D *":
        """
        GetInterpolator(itkWrapExtrapolateImageFunctionIUC2D self) -> itkInterpolateImageFunctionIUC2D
        GetInterpolator(itkWrapExtrapolateImageFunctionIUC2D self) -> itkInterpolateImageFunctionIUC2D
        """
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC2D_GetInterpolator(self, *args)


    def SetInterpolator(self, ptr: 'itkInterpolateImageFunctionIUC2D') -> "void":
        """SetInterpolator(itkWrapExtrapolateImageFunctionIUC2D self, itkInterpolateImageFunctionIUC2D ptr)"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC2D_SetInterpolator(self, ptr)

    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkWrapExtrapolateImageFunctionIUC2D

    def cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionIUC2D *":
        """cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionIUC2D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWrapExtrapolateImageFunctionIUC2D

        Create a new object of the class itkWrapExtrapolateImageFunctionIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWrapExtrapolateImageFunctionIUC2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWrapExtrapolateImageFunctionIUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWrapExtrapolateImageFunctionIUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWrapExtrapolateImageFunctionIUC2D.Clone = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC2D_Clone, None, itkWrapExtrapolateImageFunctionIUC2D)
itkWrapExtrapolateImageFunctionIUC2D.GetModifiableInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC2D_GetModifiableInterpolator, None, itkWrapExtrapolateImageFunctionIUC2D)
itkWrapExtrapolateImageFunctionIUC2D.GetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC2D_GetInterpolator, None, itkWrapExtrapolateImageFunctionIUC2D)
itkWrapExtrapolateImageFunctionIUC2D.SetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC2D_SetInterpolator, None, itkWrapExtrapolateImageFunctionIUC2D)
itkWrapExtrapolateImageFunctionIUC2D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC2D_swigregister
itkWrapExtrapolateImageFunctionIUC2D_swigregister(itkWrapExtrapolateImageFunctionIUC2D)

def itkWrapExtrapolateImageFunctionIUC2D___New_orig__() -> "itkWrapExtrapolateImageFunctionIUC2D_Pointer":
    """itkWrapExtrapolateImageFunctionIUC2D___New_orig__() -> itkWrapExtrapolateImageFunctionIUC2D_Pointer"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC2D___New_orig__()

def itkWrapExtrapolateImageFunctionIUC2D_cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionIUC2D *":
    """itkWrapExtrapolateImageFunctionIUC2D_cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionIUC2D"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC2D_cast(obj)

class itkWrapExtrapolateImageFunctionIUC3D(itkExtrapolateImageFunctionIUC3D):
    """Proxy of C++ itkWrapExtrapolateImageFunctionIUC3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWrapExtrapolateImageFunctionIUC3D_Pointer":
        """__New_orig__() -> itkWrapExtrapolateImageFunctionIUC3D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWrapExtrapolateImageFunctionIUC3D_Pointer":
        """Clone(itkWrapExtrapolateImageFunctionIUC3D self) -> itkWrapExtrapolateImageFunctionIUC3D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC3D_Clone(self)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIUC3D *":
        """GetModifiableInterpolator(itkWrapExtrapolateImageFunctionIUC3D self) -> itkInterpolateImageFunctionIUC3D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC3D_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIUC3D *":
        """
        GetInterpolator(itkWrapExtrapolateImageFunctionIUC3D self) -> itkInterpolateImageFunctionIUC3D
        GetInterpolator(itkWrapExtrapolateImageFunctionIUC3D self) -> itkInterpolateImageFunctionIUC3D
        """
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC3D_GetInterpolator(self, *args)


    def SetInterpolator(self, ptr: 'itkInterpolateImageFunctionIUC3D') -> "void":
        """SetInterpolator(itkWrapExtrapolateImageFunctionIUC3D self, itkInterpolateImageFunctionIUC3D ptr)"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC3D_SetInterpolator(self, ptr)

    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkWrapExtrapolateImageFunctionIUC3D

    def cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionIUC3D *":
        """cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionIUC3D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWrapExtrapolateImageFunctionIUC3D

        Create a new object of the class itkWrapExtrapolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWrapExtrapolateImageFunctionIUC3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWrapExtrapolateImageFunctionIUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWrapExtrapolateImageFunctionIUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWrapExtrapolateImageFunctionIUC3D.Clone = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC3D_Clone, None, itkWrapExtrapolateImageFunctionIUC3D)
itkWrapExtrapolateImageFunctionIUC3D.GetModifiableInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC3D_GetModifiableInterpolator, None, itkWrapExtrapolateImageFunctionIUC3D)
itkWrapExtrapolateImageFunctionIUC3D.GetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC3D_GetInterpolator, None, itkWrapExtrapolateImageFunctionIUC3D)
itkWrapExtrapolateImageFunctionIUC3D.SetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC3D_SetInterpolator, None, itkWrapExtrapolateImageFunctionIUC3D)
itkWrapExtrapolateImageFunctionIUC3D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC3D_swigregister
itkWrapExtrapolateImageFunctionIUC3D_swigregister(itkWrapExtrapolateImageFunctionIUC3D)

def itkWrapExtrapolateImageFunctionIUC3D___New_orig__() -> "itkWrapExtrapolateImageFunctionIUC3D_Pointer":
    """itkWrapExtrapolateImageFunctionIUC3D___New_orig__() -> itkWrapExtrapolateImageFunctionIUC3D_Pointer"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC3D___New_orig__()

def itkWrapExtrapolateImageFunctionIUC3D_cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionIUC3D *":
    """itkWrapExtrapolateImageFunctionIUC3D_cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionIUC3D"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUC3D_cast(obj)

class itkWrapExtrapolateImageFunctionIUS2D(itkExtrapolateImageFunctionIUS2D):
    """Proxy of C++ itkWrapExtrapolateImageFunctionIUS2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWrapExtrapolateImageFunctionIUS2D_Pointer":
        """__New_orig__() -> itkWrapExtrapolateImageFunctionIUS2D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWrapExtrapolateImageFunctionIUS2D_Pointer":
        """Clone(itkWrapExtrapolateImageFunctionIUS2D self) -> itkWrapExtrapolateImageFunctionIUS2D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS2D_Clone(self)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIUS2D *":
        """GetModifiableInterpolator(itkWrapExtrapolateImageFunctionIUS2D self) -> itkInterpolateImageFunctionIUS2D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS2D_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIUS2D *":
        """
        GetInterpolator(itkWrapExtrapolateImageFunctionIUS2D self) -> itkInterpolateImageFunctionIUS2D
        GetInterpolator(itkWrapExtrapolateImageFunctionIUS2D self) -> itkInterpolateImageFunctionIUS2D
        """
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS2D_GetInterpolator(self, *args)


    def SetInterpolator(self, ptr: 'itkInterpolateImageFunctionIUS2D') -> "void":
        """SetInterpolator(itkWrapExtrapolateImageFunctionIUS2D self, itkInterpolateImageFunctionIUS2D ptr)"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS2D_SetInterpolator(self, ptr)

    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkWrapExtrapolateImageFunctionIUS2D

    def cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionIUS2D *":
        """cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionIUS2D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWrapExtrapolateImageFunctionIUS2D

        Create a new object of the class itkWrapExtrapolateImageFunctionIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWrapExtrapolateImageFunctionIUS2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWrapExtrapolateImageFunctionIUS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWrapExtrapolateImageFunctionIUS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWrapExtrapolateImageFunctionIUS2D.Clone = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS2D_Clone, None, itkWrapExtrapolateImageFunctionIUS2D)
itkWrapExtrapolateImageFunctionIUS2D.GetModifiableInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS2D_GetModifiableInterpolator, None, itkWrapExtrapolateImageFunctionIUS2D)
itkWrapExtrapolateImageFunctionIUS2D.GetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS2D_GetInterpolator, None, itkWrapExtrapolateImageFunctionIUS2D)
itkWrapExtrapolateImageFunctionIUS2D.SetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS2D_SetInterpolator, None, itkWrapExtrapolateImageFunctionIUS2D)
itkWrapExtrapolateImageFunctionIUS2D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS2D_swigregister
itkWrapExtrapolateImageFunctionIUS2D_swigregister(itkWrapExtrapolateImageFunctionIUS2D)

def itkWrapExtrapolateImageFunctionIUS2D___New_orig__() -> "itkWrapExtrapolateImageFunctionIUS2D_Pointer":
    """itkWrapExtrapolateImageFunctionIUS2D___New_orig__() -> itkWrapExtrapolateImageFunctionIUS2D_Pointer"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS2D___New_orig__()

def itkWrapExtrapolateImageFunctionIUS2D_cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionIUS2D *":
    """itkWrapExtrapolateImageFunctionIUS2D_cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionIUS2D"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS2D_cast(obj)

class itkWrapExtrapolateImageFunctionIUS3D(itkExtrapolateImageFunctionIUS3D):
    """Proxy of C++ itkWrapExtrapolateImageFunctionIUS3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWrapExtrapolateImageFunctionIUS3D_Pointer":
        """__New_orig__() -> itkWrapExtrapolateImageFunctionIUS3D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWrapExtrapolateImageFunctionIUS3D_Pointer":
        """Clone(itkWrapExtrapolateImageFunctionIUS3D self) -> itkWrapExtrapolateImageFunctionIUS3D_Pointer"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS3D_Clone(self)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIUS3D *":
        """GetModifiableInterpolator(itkWrapExtrapolateImageFunctionIUS3D self) -> itkInterpolateImageFunctionIUS3D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS3D_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIUS3D *":
        """
        GetInterpolator(itkWrapExtrapolateImageFunctionIUS3D self) -> itkInterpolateImageFunctionIUS3D
        GetInterpolator(itkWrapExtrapolateImageFunctionIUS3D self) -> itkInterpolateImageFunctionIUS3D
        """
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS3D_GetInterpolator(self, *args)


    def SetInterpolator(self, ptr: 'itkInterpolateImageFunctionIUS3D') -> "void":
        """SetInterpolator(itkWrapExtrapolateImageFunctionIUS3D self, itkInterpolateImageFunctionIUS3D ptr)"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS3D_SetInterpolator(self, ptr)

    __swig_destroy__ = _itkWrapExtrapolateImageFunctionPython.delete_itkWrapExtrapolateImageFunctionIUS3D

    def cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionIUS3D *":
        """cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionIUS3D"""
        return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWrapExtrapolateImageFunctionIUS3D

        Create a new object of the class itkWrapExtrapolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWrapExtrapolateImageFunctionIUS3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWrapExtrapolateImageFunctionIUS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWrapExtrapolateImageFunctionIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWrapExtrapolateImageFunctionIUS3D.Clone = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS3D_Clone, None, itkWrapExtrapolateImageFunctionIUS3D)
itkWrapExtrapolateImageFunctionIUS3D.GetModifiableInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS3D_GetModifiableInterpolator, None, itkWrapExtrapolateImageFunctionIUS3D)
itkWrapExtrapolateImageFunctionIUS3D.GetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS3D_GetInterpolator, None, itkWrapExtrapolateImageFunctionIUS3D)
itkWrapExtrapolateImageFunctionIUS3D.SetInterpolator = new_instancemethod(_itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS3D_SetInterpolator, None, itkWrapExtrapolateImageFunctionIUS3D)
itkWrapExtrapolateImageFunctionIUS3D_swigregister = _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS3D_swigregister
itkWrapExtrapolateImageFunctionIUS3D_swigregister(itkWrapExtrapolateImageFunctionIUS3D)

def itkWrapExtrapolateImageFunctionIUS3D___New_orig__() -> "itkWrapExtrapolateImageFunctionIUS3D_Pointer":
    """itkWrapExtrapolateImageFunctionIUS3D___New_orig__() -> itkWrapExtrapolateImageFunctionIUS3D_Pointer"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS3D___New_orig__()

def itkWrapExtrapolateImageFunctionIUS3D_cast(obj: 'itkLightObject') -> "itkWrapExtrapolateImageFunctionIUS3D *":
    """itkWrapExtrapolateImageFunctionIUS3D_cast(itkLightObject obj) -> itkWrapExtrapolateImageFunctionIUS3D"""
    return _itkWrapExtrapolateImageFunctionPython.itkWrapExtrapolateImageFunctionIUS3D_cast(obj)



