<?xml version='1.0' encoding='ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" height="50.0" id="" is_locked="False" uuid="{95f2d4ae-2f94-403c-b7cd-a5fb8c37669f}" width="50.0" x="0.0" y="0.0">
  <label></label>
  <description></description>
  <author></author>
  <copyright></copyright>
  <version></version>
  <source></source>
  <aggregation type="json"><![CDATA[null]]></aggregation>
  <libraries type="json"><![CDATA[[]]]></libraries>
  <pythonpaths type="json"><![CDATA[[]]]></pythonpaths>
  <overrides type="json"><![CDATA[{}]]></overrides>
  <parameters type="json"><![CDATA[{}]]></parameters>
  <ports/>
  <node height="50.0" id="syip.overlay" port_format="1.1" uuid="{17463050-d3c0-4088-8a15-7c2e9f54f956}" width="50.0" x="2150.0" y="1675.0">
    <label>Overlay images</label>
    <description>Combines two images by layering the first (top port) image on top of the other (bottom port) image
, with choice for combining operator. Images must have the same number of channels</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "subtract"}, "use alpha": {"description": "", "editor": null, "label": "", "order": 1, "type": "boolean", "value": false}}]]></parameters>
    <ports>
      <input key="images" requiresdata="False" scheme="hdf5" type="image" type_base="image" uuid="{be342cf7-769b-428f-a18e-ea11292ea175}">
        <label>Input images</label>
        <description>Input images</description>
      </input>
      <input key="images" requiresdata="False" scheme="hdf5" type="image" type_base="image" uuid="{a392bf8e-bbe0-4010-8699-5555519519b5}">
        <label>Input images</label>
        <description>Input images</description>
      </input>
      <output key="result" requiresdata="False" scheme="hdf5" type="image" type_base="image" uuid="{b2f82d5f-dcb0-47fe-8027-1e30ba22ab57}">
        <label>result after filtering</label>
        <description>result after filtering</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.create.createtable" uuid="{43d0db50-6190-4134-b91e-29b8dd3ba41b}" width="50.0" x="1381.25" y="1846.25">
    <label>Manually Create Table</label>
    <description></description>
    <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
    <copyright>(c) 2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json"><![CDATA[{"type": "group", "json_table": {"description": "Configuration window", "editor": null, "label": "GUI", "order": 0, "type": "string", "value": "[[\"x\", \"i\", [8]], [\"y\", \"i\", [8]]]"}}]]></parameters>
    <ports>
      <output key="port0" requiresdata="False" scheme="hdf5" type="table" type_base="table" uuid="{89f11101-6da2-426e-85f5-1453685b9043}">
        <label>Manually created table</label>
        <description>Manually created table</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="syip.imagefiltering" uuid="{56e44c8e-5580-49d2-96f9-7f42af2fd482}" width="50.0" x="1673.75" y="1755.75">
    <label>Filter image</label>
    <description>Filters one image into another using one of a number of predefined filtering operations. The implemented filters are to a large extent based on `scikit-image`, but some filters are not from this package.</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "gaussian"}, "cutoff": {"description": "", "editor": null, "label": "", "order": 1, "type": "float", "value": 0.5}, "horizontal/vertical": {"description": "", "editor": null, "label": "", "order": 2, "type": "string", "value": "horizontal"}, "window size": {"description": "", "editor": null, "label": "", "order": 3, "type": "integer", "value": 1}, "maximum": {"description": "", "editor": null, "label": "", "order": 4, "type": "float", "value": 1.0}, "scale y": {"description": "", "editor": null, "label": "", "order": 5, "type": "float", "value": 1.0}, "scale x": {"description": "", "editor": null, "label": "", "order": 6, "type": "float", "value": 1.0}, "histogram selection": {"description": "", "editor": null, "label": "", "order": 7, "type": "string", "value": "min"}, "diagonal neighborhood": {"description": "", "editor": null, "label": "", "order": 8, "type": "boolean", "value": false}, "height": {"description": "", "editor": null, "label": "", "order": 9, "type": "integer", "value": 512}, "border mode": {"description": "", "editor": null, "label": "", "order": 10, "type": "string", "value": "constant"}, "adaptive kernel size": {"description": "", "editor": null, "label": "", "order": 11, "type": "integer", "value": 4}, "luminance preserving": {"description": "", "editor": null, "label": "", "order": 12, "type": "boolean", "value": true}, "gain": {"description": "", "editor": null, "label": "", "order": 13, "type": "float", "value": 10.0}, "threshold method": {"description": "", "editor": null, "label": "", "order": 14, "type": "string", "value": "gaussian"}, "offset": {"description": "", "editor": null, "label": "", "order": 15, "type": "float", "value": 0.0}, "threshold": {"description": "", "editor": null, "label": "", "order": 16, "type": "float", "value": 0.15}, "kernel size": {"description": "", "editor": null, "label": "", "order": 17, "type": "integer", "value": 3}, "interpolation degree": {"description": "", "editor": null, "label": "", "order": 18, "type": "integer", "value": 3}, "resize": {"description": "", "editor": null, "label": "", "order": 19, "type": "boolean", "value": true}, "inverse": {"description": "", "editor": null, "label": "", "order": 20, "type": "boolean", "value": false}, "scale": {"description": "", "editor": null, "label": "", "order": 21, "type": "float", "value": 1.0}, "angle": {"description": "", "editor": null, "label": "", "order": 22, "type": "float", "value": 0.0}, "add alpha": {"description": "", "editor": null, "label": "", "order": 23, "type": "boolean", "value": false}, "k": {"description": "", "editor": null, "label": "", "order": 24, "type": "float", "value": 0.05}, "sigma-y": {"description": "", "editor": null, "label": "", "order": 25, "type": "float", "value": 1.0}, "sigma-x": {"description": "", "editor": null, "label": "", "order": 26, "type": "float", "value": 1.0}, "n": {"description": "", "editor": null, "label": "", "order": 27, "type": "integer", "value": 12}, "width": {"description": "", "editor": null, "label": "", "order": 28, "type": "integer", "value": 512}, "minimum": {"description": "", "editor": null, "label": "", "order": 29, "type": "float", "value": 0.0}, "positive/negative diagonal": {"description": "", "editor": null, "label": "", "order": 30, "type": "string", "value": "default"}, "bins": {"description": "", "editor": null, "label": "", "order": 31, "type": "integer", "value": 256}, "y": {"description": "", "editor": null, "label": "", "order": 32, "type": "integer", "value": 0}, "x": {"description": "", "editor": null, "label": "", "order": 33, "type": "integer", "value": 0}, "eps": {"description": "", "editor": null, "label": "", "order": 34, "type": "float", "value": 1e-06}, "sigma": {"description": "", "editor": null, "label": "", "order": 35, "type": "float", "value": 1.0}, "preserve alpha": {"description": "", "editor": null, "label": "", "order": 36, "type": "boolean", "value": true}, "gamma": {"description": "", "editor": null, "label": "", "order": 37, "type": "float", "value": 1.0}, "harris method": {"description": "", "editor": null, "label": "", "order": 38, "type": "string", "value": "k"}}]]></parameters>
    <ports>
      <input key="source" requiresdata="False" scheme="hdf5" type="image" type_base="image" uuid="{6339c3b7-a42f-42ee-99fb-2493cecf6583}">
        <label>source image to filter</label>
        <description>source image to filter</description>
      </input>
      <output key="result" requiresdata="False" scheme="hdf5" type="image" type_base="image" uuid="{13d00fca-1fd7-4fd3-9d06-b2b5610013f7}">
        <label>result after filtering</label>
        <description>result after filtering</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="syip.image2list" uuid="{5f136c88-e73b-4086-a9b4-81f7c96ba39f}" width="50.0" x="1800.0" y="1650.0">
    <label>Image to List</label>
    <description>Generates a list of images based on algorithms operating on one image</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "from channels"}, "do background": {"description": "", "editor": null, "label": "", "order": 1, "type": "boolean", "value": true}}]]></parameters>
    <ports>
      <input key="source" requiresdata="False" scheme="hdf5" type="image" type_base="image" uuid="{09c9465a-d6ba-41bf-a565-4cbb5c97e970}">
        <label>source image</label>
        <description>source image</description>
      </input>
      <output key="results" requiresdata="False" scheme="hdf5" type="[image]" type_base="[image]" uuid="{6e5a87b2-b0e6-450b-a441-24bc2f4d572a}">
        <label>Resulting list of images</label>
        <description>Resulting list of images</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="syip.imagedraw" uuid="{c17ed348-a03a-4ec0-b510-f65134261bb0}" width="50.0" x="1548.75" y="1755.75">
    <label>Draw on image</label>
    <description>Annotates an image with drawings based on tabular data.</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "filled circle"}, "x2": {"description": "", "editor": null, "label": "", "order": 1, "type": "string", "value": "X2"}, "blue color": {"description": "", "editor": null, "label": "", "order": 2, "type": "string", "value": "0.5"}, "radius": {"description": "", "editor": null, "label": "", "order": 3, "type": "string", "value": "5"}, "green color": {"description": "", "editor": null, "label": "", "order": 4, "type": "string", "value": "1.0"}, "red color": {"description": "", "editor": null, "label": "", "order": 5, "type": "string", "value": "1.0"}, "y": {"description": "", "editor": null, "label": "", "order": 6, "type": "string", "value": "y"}, "x": {"description": "", "editor": null, "label": "", "order": 7, "type": "string", "value": "x"}, "y2": {"description": "", "editor": null, "label": "", "order": 8, "type": "string", "value": "Y2"}, "alpha value": {"description": "", "editor": null, "label": "", "order": 9, "type": "string", "value": "1.0"}, "N": {"description": "", "editor": null, "label": "", "order": 10, "type": "string", "value": "4"}}]]></parameters>
    <ports>
      <input key="image" requiresdata="False" scheme="hdf5" type="image" type_base="image" uuid="{9041b1f2-5b53-4d4c-a477-f020a54c5452}">
        <label>Image to draw on</label>
        <description>Image to draw on</description>
      </input>
      <input key="table" requiresdata="False" scheme="hdf5" type="table" type_base="table" uuid="{427f879e-8779-44c0-aed5-672b2b1edaa5}">
        <label>Table used for drawing</label>
        <description>Table used for drawing</description>
      </input>
      <output key="output" requiresdata="False" scheme="hdf5" type="image" type_base="image" uuid="{5b1bd647-2ea6-41a0-ae1f-92e53bc54274}">
        <label>Resulting image</label>
        <description>Resulting image</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="syip.list2image" uuid="{c18d25e4-e048-468c-b69a-7ff7bf212e4d}" width="50.0" x="2025.0" y="1650.0">
    <label>List to Image</label>
    <description>Generates an image based on a list of images</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "concatenate channels"}, "do background": {"description": "", "editor": null, "label": "", "order": 1, "type": "boolean", "value": true}}]]></parameters>
    <ports>
      <input key="inputs" requiresdata="False" scheme="hdf5" type="[image]" type_base="[image]" uuid="{a7f35672-ce25-4be0-bcce-4d4ea8fe058f}">
        <label>Input list of images</label>
        <description>Input list of images</description>
      </input>
      <output key="result" requiresdata="False" scheme="hdf5" type="image" type_base="image" uuid="{eb17cc52-1bb5-4db4-9c76-293eb06bdb91}">
        <label>result image</label>
        <description>result image</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.slice.slicelist" uuid="{c39c3b40-e0b2-45e2-bb09-e55b7f18141e}" width="50.0" x="1925.0" y="1650.0">
    <label>Slice List</label>
    <description></description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json"><![CDATA[{"type": "group", "slice": {"description": "Use standard Python syntax to define pattern for slice operation, [start:stop:step]", "editor": null, "label": "Slice", "order": 0, "type": "string", "value": "[::-1]"}, "limit": {"description": "Specify the maximum number of rows in the preview table", "editor": null, "label": "Limit preview to", "order": 1, "type": "integer", "value": 100}}]]></parameters>
    <ports>
      <input key="list" requiresdata="False" scheme="hdf5" type="[image]" type_base="[&lt;a&gt;]" uuid="{b7514093-7a4d-4aa4-9872-326dba804039}">
        <label>Input List</label>
        <description>Input List</description>
      </input>
      <output key="list" requiresdata="False" scheme="hdf5" type="[image]" type_base="[&lt;a&gt;]" uuid="{ddbecfd6-1186-4682-b950-4a77611931a2}">
        <label>Sliced output List</label>
        <description>Sliced output List</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="syip.splitchannels" uuid="{df879f3a-f62d-4f6d-8951-6945f131a1f1}" width="50.0" x="2025.0" y="1725.0">
    <label>Split image channels</label>
    <description>Copies the given channels from the input image to the first output image, remaining channels are copied to second output image</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "selected_channels": {"description": "Comma separated list of channels to send to first image output.\n\nCommon channel numbers and names:\n   0 (red/gray), 1 (green), 2 (blue).\n   Alpha is always last channel.", "editor": null, "label": "selected channels", "order": 0, "type": "string", "value": "blue, green, red"}}]]></parameters>
    <ports>
      <input key="input" requiresdata="False" scheme="hdf5" type="image" type_base="image" uuid="{f53d77d1-0ff9-4119-851f-d7d9b4efa69c}">
        <label>Input image</label>
        <description>Input image</description>
      </input>
      <output key="output1" requiresdata="False" scheme="hdf5" type="image" type_base="image" uuid="{09b834f9-bbf1-4a49-ad8d-b98f3ddcead2}">
        <label>Image with selected channels</label>
        <description>Image with selected channels</description>
      </output>
      <output key="output2" requiresdata="False" scheme="hdf5" type="image" type_base="image" uuid="{d9d53b50-fdb9-4cc2-8ad8-9d41b68ae230}">
        <label>All non-selected channels</label>
        <description>All non-selected channels</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="syip.imagegenerate" uuid="{ed6aad2e-6b50-4e1b-a662-1bbf605892c1}" width="50.0" x="1381.25" y="1746.25">
    <label>Generate image</label>
    <description>Generates an image or structuring element of a given size</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "empty"}, "channels": {"description": "", "editor": null, "label": "", "order": 1, "type": "integer", "value": 3}, "width": {"description": "", "editor": null, "label": "", "order": 2, "type": "integer", "value": 16}, "size": {"description": "", "editor": null, "label": "", "order": 3, "type": "integer", "value": 5}, "other size": {"description": "", "editor": null, "label": "", "order": 4, "type": "integer", "value": 5}, "height": {"description": "", "editor": null, "label": "", "order": 5, "type": "integer", "value": 16}}]]></parameters>
    <ports>
      <output key="output" requiresdata="False" scheme="hdf5" type="image" type_base="image" uuid="{a2e2d5ae-d2ca-4d5c-b20e-b0d1555a203a}">
        <label>Resulting image</label>
        <description>Resulting image</description>
      </output>
    </ports>
  </node>
  <connection type="image" uuid="{06be8501-927f-4d06-b4be-90d9ae537180}">
    <source node="{56e44c8e-5580-49d2-96f9-7f42af2fd482}" port="{13d00fca-1fd7-4fd3-9d06-b2b5610013f7}"/>
    <destination node="{df879f3a-f62d-4f6d-8951-6945f131a1f1}" port="{f53d77d1-0ff9-4119-851f-d7d9b4efa69c}"/>
  </connection>
  <connection type="[image]" uuid="{6637c9b8-d79c-4a3e-9709-6a9136e45418}">
    <source node="{c39c3b40-e0b2-45e2-bb09-e55b7f18141e}" port="{ddbecfd6-1186-4682-b950-4a77611931a2}"/>
    <destination node="{c18d25e4-e048-468c-b69a-7ff7bf212e4d}" port="{a7f35672-ce25-4be0-bcce-4d4ea8fe058f}"/>
  </connection>
  <connection type="image" uuid="{6f7746ff-531b-41fa-96a2-7b37e9155699}">
    <source node="{ed6aad2e-6b50-4e1b-a662-1bbf605892c1}" port="{a2e2d5ae-d2ca-4d5c-b20e-b0d1555a203a}"/>
    <destination node="{c17ed348-a03a-4ec0-b510-f65134261bb0}" port="{9041b1f2-5b53-4d4c-a477-f020a54c5452}"/>
  </connection>
  <connection type="image" uuid="{7bb61033-f9fe-47b3-af49-66b4491e27d6}">
    <source node="{df879f3a-f62d-4f6d-8951-6945f131a1f1}" port="{09b834f9-bbf1-4a49-ad8d-b98f3ddcead2}"/>
    <destination node="{17463050-d3c0-4088-8a15-7c2e9f54f956}" port="{a392bf8e-bbe0-4010-8699-5555519519b5}"/>
  </connection>
  <connection type="[image]" uuid="{7d2ad24e-71de-4a58-9801-c628fa5331b7}">
    <source node="{5f136c88-e73b-4086-a9b4-81f7c96ba39f}" port="{6e5a87b2-b0e6-450b-a441-24bc2f4d572a}"/>
    <destination node="{c39c3b40-e0b2-45e2-bb09-e55b7f18141e}" port="{b7514093-7a4d-4aa4-9872-326dba804039}"/>
  </connection>
  <connection type="image" uuid="{ad539595-157c-4e04-a9f5-ad9505c50741}">
    <source node="{c18d25e4-e048-468c-b69a-7ff7bf212e4d}" port="{eb17cc52-1bb5-4db4-9c76-293eb06bdb91}"/>
    <destination node="{17463050-d3c0-4088-8a15-7c2e9f54f956}" port="{be342cf7-769b-428f-a18e-ea11292ea175}"/>
  </connection>
  <connection type="image" uuid="{f26e9148-57fb-48a7-94fb-34d248831c0b}">
    <source node="{56e44c8e-5580-49d2-96f9-7f42af2fd482}" port="{13d00fca-1fd7-4fd3-9d06-b2b5610013f7}"/>
    <destination node="{5f136c88-e73b-4086-a9b4-81f7c96ba39f}" port="{09c9465a-d6ba-41bf-a565-4cbb5c97e970}"/>
  </connection>
  <connection type="image" uuid="{f5a5c198-71a6-4db0-822c-09bd509de1c4}">
    <source node="{c17ed348-a03a-4ec0-b510-f65134261bb0}" port="{5b1bd647-2ea6-41a0-ae1f-92e53bc54274}"/>
    <destination node="{56e44c8e-5580-49d2-96f9-7f42af2fd482}" port="{6339c3b7-a42f-42ee-99fb-2493cecf6583}"/>
  </connection>
  <connection type="table" uuid="{ff979f85-fcc8-4fb7-8558-4e09b247a6d6}">
    <source node="{43d0db50-6190-4134-b91e-29b8dd3ba41b}" port="{89f11101-6da2-426e-85f5-1453685b9043}"/>
    <destination node="{c17ed348-a03a-4ec0-b510-f65134261bb0}" port="{427f879e-8779-44c0-aed5-672b2b1edaa5}"/>
  </connection>
</flow>
