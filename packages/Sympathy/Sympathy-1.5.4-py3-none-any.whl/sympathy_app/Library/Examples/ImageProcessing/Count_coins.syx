<?xml version='1.0' encoding='US-ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" height="50.0" uuid="{b007c341-b37c-421b-b1d2-42ccb79d91a2}" width="50.0" x="0.0" y="0.0" id="">
  <label></label>
  <description></description>
  <author>Mathias Broxvall</author>
  <copyright>(c) 2016 Combine Control Systems AB</copyright>
  <version></version>
  <min_version></min_version>
  <icon/>
  <aggregation type="json">null</aggregation>
  <libraries type="json">[]</libraries>
  <pythonpaths type="json">[]</pythonpaths>
  <parameters type="json">{}</parameters>
  <ports/>
  <node id="org.sysess.sympathy.data.table.calculatortable" uuid="{06583cd7-7e5d-4664-84b2-76eaef4d6ea9}" x="1675.0" y="1850.0">
    <label>Calculate radius
from std deviation</label>
    <description>Performs user-defined python calculations</description>
    <author>Greger Cronquist &lt;greger.cronquist@combine.se&gt;, Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;, Sara Gustafzelius &lt;sara.gustafzelius@combine.se&gt;, Benedikt Ziegler &lt;benedikt.ziegler@combine.se&gt;</author>
    <copyright>(c) 2016 Combine Control Systems AB</copyright>
    <version>3.0</version>
    <parameters type="json">{"type": "group", "calc_list": {"description": "List of calculations.", "editor": null, "label": "List of calculations", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["X = arg.col('X').data #ENABLED:1", "Y = arg.col('Y').data #ENABLED:1", "radius = 1.414*arg.col('sigma').data+2 #ENABLED:1"], "value": [0], "value_names": []}, "same_length_res": {"description": "Gather all the results generated from an incoming data into a common output table. This requires that the results all have the same length. An error will be given if the lengths of the outgoing results differ.", "editor": null, "label": "Put results in common outputs.", "order": 1, "type": "boolean", "value": true}, "copy_input": {"description": "If enabled the incoming data will be copied to the output before running the calculations. This requires that the results will all have the same length. An exception will be raised if the lengths of the outgoing results differ.", "editor": null, "label": "Copy input", "order": 2, "type": "boolean", "value": false}, "fail_strategy": {"description": "Decide how a failed calculation should be handled", "label": "Action on calculation failure", "mode": "selected", "order": 3, "passthrough": false, "type": "list", "list": ["Exception", "Skip calculation"], "value": [0], "value_names": [], "editor": {"type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="port0" scheme="hdf5" type="table" type_base="table" uuid="{f8248cf5-2f9c-44d8-940a-c16c8136b783}">
        <label>Input Table</label>
        <description>Input Table</description>
      </input>
      <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{9a266603-d6d4-4e60-8e9e-259bddf88b91}">
        <label>Table with results from the calculations.</label>
        <description>Table with results from the calculations.</description>
      </output>
    </ports>
  </node>
  <node id="syip.threshold" uuid="{0c9bf981-2267-4d09-9aac-405addec316b}" x="1125.0" y="1850.0">
    <label>Threshold image</label>
    <description>Applies a threshold to an image giving a boolean output</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "adaptive"}, "padding": {"description": "", "editor": null, "label": "", "order": 1, "type": "boolean", "value": false}, "cutoff": {"description": "", "editor": null, "label": "", "order": 2, "type": "float", "value": 0.5}, "horizontal/vertical": {"description": "", "editor": null, "label": "", "order": 3, "type": "string", "value": "horizontal"}, "window size": {"description": "", "editor": null, "label": "", "order": 4, "type": "integer", "value": 1}, "maximum": {"description": "", "editor": null, "label": "", "order": 5, "type": "float", "value": 1.0}, "scale y": {"description": "", "editor": null, "label": "", "order": 6, "type": "float", "value": 1.0}, "scale x": {"description": "", "editor": null, "label": "", "order": 7, "type": "float", "value": 1.0}, "histogram selection": {"description": "", "editor": null, "label": "", "order": 8, "type": "string", "value": "min"}, "diagonal neighborhood": {"description": "", "editor": null, "label": "", "order": 9, "type": "boolean", "value": false}, "height": {"description": "", "editor": null, "label": "", "order": 10, "type": "integer", "value": 512}, "border mode": {"description": "", "editor": null, "label": "", "order": 11, "type": "string", "value": "constant"}, "adaptive kernel size": {"description": "", "editor": null, "label": "", "order": 12, "type": "integer", "value": 4}, "luminance preserving": {"description": "", "editor": null, "label": "", "order": 13, "type": "boolean", "value": true}, "gain": {"description": "", "editor": null, "label": "", "order": 14, "type": "float", "value": 10.0}, "aspect": {"description": "", "editor": null, "label": "", "order": 15, "type": "boolean", "value": false}, "offset": {"description": "", "editor": null, "label": "", "order": 16, "type": "float", "value": -0.15}, "threshold": {"description": "", "editor": null, "label": "", "order": 17, "type": "float", "value": 0.15}, "kernel size": {"description": "", "editor": null, "label": "", "order": 18, "type": "integer", "value": 81}, "interpolation degree": {"description": "", "editor": null, "label": "", "order": 19, "type": "integer", "value": 3}, "resize": {"description": "", "editor": null, "label": "", "order": 20, "type": "boolean", "value": true}, "inverse": {"description": "", "editor": null, "label": "", "order": 21, "type": "boolean", "value": false}, "scale": {"description": "", "editor": null, "label": "", "order": 22, "type": "float", "value": 1.0}, "angle": {"description": "", "editor": null, "label": "", "order": 23, "type": "float", "value": 0.0}, "threshold method": {"description": "", "editor": null, "label": "", "order": 24, "type": "string", "value": "mean"}, "k": {"description": "", "editor": null, "label": "", "order": 25, "type": "float", "value": 0.05}, "sigma-y": {"description": "", "editor": null, "label": "", "order": 26, "type": "float", "value": 1.0}, "sigma-x": {"description": "", "editor": null, "label": "", "order": 27, "type": "float", "value": 1.0}, "n": {"description": "", "editor": null, "label": "", "order": 28, "type": "integer", "value": 12}, "add alpha": {"description": "", "editor": null, "label": "", "order": 29, "type": "boolean", "value": false}, "width": {"description": "", "editor": null, "label": "", "order": 30, "type": "integer", "value": 512}, "minimum": {"description": "", "editor": null, "label": "", "order": 31, "type": "float", "value": 0.0}, "positive/negative diagonal": {"description": "", "editor": null, "label": "", "order": 32, "type": "string", "value": "default"}, "bins": {"description": "", "editor": null, "label": "", "order": 33, "type": "integer", "value": 256}, "auto threshold method": {"description": "", "editor": null, "label": "", "order": 34, "type": "string", "value": "otsu"}, "cmap": {"description": "", "editor": null, "label": "", "order": 35, "type": "string", "value": "viridis"}, "y": {"description": "", "editor": null, "label": "", "order": 36, "type": "integer", "value": 0}, "x": {"description": "", "editor": null, "label": "", "order": 37, "type": "integer", "value": 0}, "eps": {"description": "", "editor": null, "label": "", "order": 38, "type": "float", "value": 1e-06}, "sigma": {"description": "", "editor": null, "label": "", "order": 39, "type": "float", "value": 1.0}, "preserve alpha": {"description": "", "editor": null, "label": "", "order": 40, "type": "boolean", "value": true}, "gamma": {"description": "", "editor": null, "label": "", "order": 41, "type": "float", "value": 1.0}, "harris method": {"description": "", "editor": null, "label": "", "order": 42, "type": "string", "value": "k"}}</parameters>
    <ports>
      <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{6ed45ac8-a84b-4a25-a910-118418dad61f}">
        <label>source image to filter</label>
        <description>source image to filter</description>
      </input>
      <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{14783aa4-8fa0-46e4-a16e-87a486bb6e11}">
        <label>result after filtering</label>
        <description>result after filtering</description>
      </output>
    </ports>
  </node>
  <node id="syip.splitchannels" uuid="{37eaa9e8-9c88-4bc6-8550-8a7d75f6b8ce}" x="1175.0" y="1725.0">
    <label>create RGB image
from grayscale</label>
    <description>Copies the given channels from the input image to the first output image, remaining channels are copied to second output image</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "selected_channels": {"description": "Comma separated list of channels to send to first image output.\n\nCommon channel numbers and names:\n   0 (red/gray), 1 (green), 2 (blue).\n   Alpha is always last channel", "editor": null, "label": "selected channels", "order": 0, "type": "string", "value": "red,red,red"}}</parameters>
    <ports>
      <input key="input" scheme="hdf5" type="image" type_base="image" uuid="{c37c2aba-aaaa-474f-a9e6-dcfbf6b73f94}">
        <label>Input image</label>
        <description>Input image</description>
      </input>
      <output key="output1" scheme="hdf5" type="image" type_base="image" uuid="{b5e9f64d-9d13-4556-a055-49ab2a846951}">
        <label>Image with selected channels</label>
        <description>Image with selected channels</description>
      </output>
      <output key="output2" scheme="hdf5" type="image" type_base="image" uuid="{05d93989-4f2d-4703-9654-af3abce1dc67}">
        <label>All non-selected channels</label>
        <description>All non-selected channels</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.hjointable" uuid="{3be3971a-8ad7-405c-a858-b9205b60d540}" x="1975.0" y="1850.0">
    <label>HJoin Table</label>
    <description>Horizontal join of two Tables</description>
    <author>Alexander Busck &lt;alexander.busck@combine.se&gt;</author>
    <copyright>(C) 2013 Combine Control Systems AB</copyright>
    <version>1.1</version>
    <parameters type="json">{"type": "group", "name": {"description": "Select which port decides the output table(s) names", "label": "Input port name for joined table", "order": 0, "passthrough": false, "type": "list", "list": ["Lower", "Upper"], "value": [0], "value_names": [], "editor": {"type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="port1" scheme="hdf5" type="table" type_base="table" uuid="{0d17e2b6-bbc0-46a3-999c-30511bc8ad6d}">
        <label>Input Table 1</label>
        <description>Input Table 1</description>
      </input>
      <input key="port2" scheme="hdf5" type="table" type_base="table" uuid="{780a9784-dd58-431a-a9bb-b4834dacd80f}">
        <label>Input Table 2</label>
        <description>Input Table 2</description>
      </input>
      <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{4221722a-433d-42ce-b027-e7b7d6d83b73}">
        <label>Table with horizontally joined data</label>
        <description>Table with horizontally joined data</description>
      </output>
    </ports>
  </node>
  <node id="syip.imagegenerate" uuid="{8a4484ba-a79b-442f-8e7c-099a04109e68}" x="1100.0" y="1950.0">
    <label>Structuring element</label>
    <description>Generates an image or structuring element of a given size</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "disk"}, "channels": {"description": "", "editor": null, "label": "", "order": 1, "type": "integer", "value": 1}, "width": {"description": "", "editor": null, "label": "", "order": 2, "type": "integer", "value": 512}, "size": {"description": "", "editor": null, "label": "", "order": 3, "type": "integer", "value": 3}, "other size": {"description": "", "editor": null, "label": "", "order": 4, "type": "integer", "value": 12}, "height": {"description": "", "editor": null, "label": "", "order": 5, "type": "integer", "value": 512}}</parameters>
    <ports>
      <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{b86153e9-2917-4f4f-9b6e-11b60fc8ac3d}">
        <label>Resulting image</label>
        <description>Resulting image</description>
      </output>
    </ports>
  </node>
  <node id="syip.general_filters" uuid="{8d531fd8-296c-41b4-a37f-7690150d1533}" x="1175.0" y="1625.0">
    <label>Create integral image</label>
    <description>Applies simple filtering or scaling algorithms on an image. For more complex operations see the more specialized image manipulation nodes</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "integral image"}, "padding": {"description": "", "editor": null, "label": "", "order": 1, "type": "boolean", "value": false}, "cutoff": {"description": "", "editor": null, "label": "", "order": 2, "type": "float", "value": 0.5}, "horizontal/vertical": {"description": "", "editor": null, "label": "", "order": 3, "type": "string", "value": "horizontal"}, "window size": {"description": "", "editor": null, "label": "", "order": 4, "type": "integer", "value": 1}, "maximum": {"description": "", "editor": null, "label": "", "order": 5, "type": "float", "value": 1.0}, "scale y": {"description": "", "editor": null, "label": "", "order": 6, "type": "float", "value": 1.0}, "scale x": {"description": "", "editor": null, "label": "", "order": 7, "type": "float", "value": 1.0}, "histogram selection": {"description": "", "editor": null, "label": "", "order": 8, "type": "string", "value": "min"}, "diagonal neighborhood": {"description": "", "editor": null, "label": "", "order": 9, "type": "boolean", "value": false}, "height": {"description": "", "editor": null, "label": "", "order": 10, "type": "integer", "value": 512}, "border mode": {"description": "", "editor": null, "label": "", "order": 11, "type": "string", "value": "constant"}, "adaptive kernel size": {"description": "", "editor": null, "label": "", "order": 12, "type": "integer", "value": 4}, "luminance preserving": {"description": "", "editor": null, "label": "", "order": 13, "type": "boolean", "value": true}, "gain": {"description": "", "editor": null, "label": "", "order": 14, "type": "float", "value": 10.0}, "aspect": {"description": "", "editor": null, "label": "", "order": 15, "type": "boolean", "value": false}, "offset": {"description": "", "editor": null, "label": "", "order": 16, "type": "float", "value": 0.0}, "threshold": {"description": "", "editor": null, "label": "", "order": 17, "type": "float", "value": 0.15}, "kernel size": {"description": "", "editor": null, "label": "", "order": 18, "type": "integer", "value": 3}, "interpolation degree": {"description": "", "editor": null, "label": "", "order": 19, "type": "integer", "value": 3}, "resize": {"description": "", "editor": null, "label": "", "order": 20, "type": "boolean", "value": true}, "inverse": {"description": "", "editor": null, "label": "", "order": 21, "type": "boolean", "value": false}, "scale": {"description": "", "editor": null, "label": "", "order": 22, "type": "float", "value": 1.0}, "angle": {"description": "", "editor": null, "label": "", "order": 23, "type": "float", "value": 0.0}, "threshold method": {"description": "", "editor": null, "label": "", "order": 24, "type": "string", "value": "gaussian"}, "k": {"description": "", "editor": null, "label": "", "order": 25, "type": "float", "value": 0.05}, "sigma-y": {"description": "", "editor": null, "label": "", "order": 26, "type": "float", "value": 1.0}, "sigma-x": {"description": "", "editor": null, "label": "", "order": 27, "type": "float", "value": 1.0}, "n": {"description": "", "editor": null, "label": "", "order": 28, "type": "integer", "value": 12}, "add alpha": {"description": "", "editor": null, "label": "", "order": 29, "type": "boolean", "value": false}, "width": {"description": "", "editor": null, "label": "", "order": 30, "type": "integer", "value": 512}, "minimum": {"description": "", "editor": null, "label": "", "order": 31, "type": "float", "value": 0.0}, "positive/negative diagonal": {"description": "", "editor": null, "label": "", "order": 32, "type": "string", "value": "default"}, "bins": {"description": "", "editor": null, "label": "", "order": 33, "type": "integer", "value": 256}, "auto threshold method": {"description": "", "editor": null, "label": "", "order": 34, "type": "string", "value": "otsu"}, "cmap": {"description": "", "editor": null, "label": "", "order": 35, "type": "string", "value": "viridis"}, "y": {"description": "", "editor": null, "label": "", "order": 36, "type": "integer", "value": 0}, "x": {"description": "", "editor": null, "label": "", "order": 37, "type": "integer", "value": 0}, "eps": {"description": "", "editor": null, "label": "", "order": 38, "type": "float", "value": 1e-06}, "sigma": {"description": "", "editor": null, "label": "", "order": 39, "type": "float", "value": 1.0}, "preserve alpha": {"description": "", "editor": null, "label": "", "order": 40, "type": "boolean", "value": true}, "gamma": {"description": "", "editor": null, "label": "", "order": 41, "type": "float", "value": 1.0}, "harris method": {"description": "", "editor": null, "label": "", "order": 42, "type": "string", "value": "k"}}</parameters>
    <ports>
      <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{ec0fda5a-4ef7-4fc1-bbad-cf4d0c45156e}">
        <label>source image to filter</label>
        <description>source image to filter</description>
      </input>
      <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{d5d79a9f-95cc-4270-ba6b-4efcc793adf8}">
        <label>result after filtering</label>
        <description>result after filtering</description>
      </output>
    </ports>
  </node>
  <node id="syip.imagestatistics" uuid="{8f48c225-0caa-4462-af2c-8789cba8c4f7}" x="1550.0" y="1850.0">
    <label>Blob 
detection</label>
    <description>Extracts tabular data from an image using one of a selection of algorithms. The implemented filters are to a large extent based on `scikit-image`, but some filters are not from this package.</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "blob, LoG"}, "num sigma": {"description": "", "editor": null, "label": "", "order": 1, "type": "integer", "value": 20}, "threshold relative": {"description": "", "editor": null, "label": "", "order": 2, "type": "float", "value": 0.0}, "max_sigma": {"description": "", "editor": null, "label": "", "order": 2, "type": "float", "value": 50.0}, "min sigma": {"description": "", "editor": null, "label": "", "order": 3, "type": "float", "value": 10.0}, "log scale": {"description": "", "editor": null, "label": "", "order": 4, "type": "boolean", "value": true}, "sigma_ratio": {"description": "", "editor": null, "label": "", "order": 5, "type": "float", "value": 1.6}, "min_sigma": {"description": "", "editor": null, "label": "", "order": 6, "type": "float", "value": 1.0}, "min distance": {"description": "", "editor": null, "label": "", "order": 6, "type": "integer", "value": 1}, "histograms": {"description": "", "editor": null, "label": "", "order": 7, "type": "integer", "value": 8}, "rings": {"description": "", "editor": null, "label": "", "order": 8, "type": "integer", "value": 3}, "step": {"description": "", "editor": null, "label": "", "order": 9, "type": "integer", "value": 4}, "overlap": {"description": "", "editor": null, "label": "", "order": 10, "type": "float", "value": 0.5}, "max sigma": {"description": "", "editor": null, "label": "", "order": 11, "type": "float", "value": 35.0}, "radius": {"description": "", "editor": null, "label": "", "order": 12, "type": "integer", "value": 15}, "orientations": {"description": "", "editor": null, "label": "", "order": 13, "type": "integer", "value": 8}, "threshold": {"description": "", "editor": null, "label": "", "order": 14, "type": "float", "value": 0.2}, "daisy normalization": {"description": "", "editor": null, "label": "", "order": 15, "type": "string", "value": "l1"}, "bins": {"description": "", "editor": null, "label": "", "order": 16, "type": "integer", "value": 256}}</parameters>
    <ports>
      <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{c2e012b6-7ecb-40f2-9b13-a379737c3043}">
        <label>Image to extract statistics from</label>
        <description>Image to extract statistics from</description>
      </input>
      <output key="result" scheme="hdf5" type="table" type_base="table" uuid="{a46e6950-bdf9-46b5-8c0e-102c2deaee6e}">
        <label>Table with results</label>
        <description>Table with results</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.calculatortable" uuid="{92bcee1f-05cc-4aae-a2ed-3bf4026d1e00}" x="1900.0" y="1750.0">
    <label>Alpha value
from integral</label>
    <description>Performs user-defined python calculations</description>
    <author>Greger Cronquist &lt;greger.cronquist@combine.se&gt;, Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;, Sara Gustafzelius &lt;sara.gustafzelius@combine.se&gt;, Benedikt Ziegler &lt;benedikt.ziegler@combine.se&gt;</author>
    <copyright>(c) 2016 Combine Control Systems AB</copyright>
    <version>3.0</version>
    <parameters type="json">{"type": "group", "calc_list": {"description": "List of calculations.", "editor": null, "label": "List of calculations", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["red = np.where(arg.col('ch0_integral').data &gt; 170.0, 0.0, 1.0) #ENABLED:1", "green = np.where(arg.col('ch0_integral').data &gt; 170.0, 1.0, 0.0) #ENABLED:1", "blue = np.where(arg.col('ch0_integral').data &gt; 170.0, 0.5, 0.5) #ENABLED:1"], "value": [0], "value_names": []}, "same_length_res": {"description": "Gather all the results generated from an incoming data into a common output table. This requires that the results all have the same length. An error will be given if the lengths of the outgoing results differ.", "editor": null, "label": "Put results in common outputs.", "order": 1, "type": "boolean", "value": true}, "copy_input": {"description": "If enabled the incoming data will be copied to the output before running the calculations. This requires that the results will all have the same length. An exception will be raised if the lengths of the outgoing results differ.", "editor": null, "label": "Copy input", "order": 2, "type": "boolean", "value": false}, "fail_strategy": {"description": "Decide how a failed calculation should be handled", "label": "Action on calculation failure", "mode": "selected", "order": 3, "passthrough": false, "type": "list", "list": ["Exception", "Skip calculation"], "value": [0], "value_names": [], "editor": {"type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="port0" scheme="hdf5" type="table" type_base="table" uuid="{27779fe2-f34c-4c8e-9b9d-697019eef15b}">
        <label>Input Table</label>
        <description>Input Table</description>
      </input>
      <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{9ed225ae-969e-41ba-b8c9-da4ad33d6e24}">
        <label>Table with results from the calculations.</label>
        <description>Table with results from the calculations.</description>
      </output>
    </ports>
  </node>
  <node id="syip.imagemorphology" uuid="{96851b72-4b15-4901-a9d0-0932579291f0}" x="1300.0" y="1850.0">
    <label>Binary closing</label>
    <description>Performs one of a selection of morphological or rank operations on a target image (top) that uses a given structuring element (bottom). Other morphological operations can be found under the "filter" node</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "binary, closing"}}</parameters>
    <ports>
      <input key="target" scheme="hdf5" type="image" type_base="image" uuid="{4c1c32a6-b617-4ca1-bac8-49ca0537b405}">
        <label>Target image</label>
        <description>Target image</description>
      </input>
      <input key="structuring_element" scheme="hdf5" type="image" type_base="image" uuid="{6c6b10f3-f3b1-446b-a96b-6e5a3c8f1e87}">
        <label>Structuring element</label>
        <description>Structuring element</description>
      </input>
      <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{af668674-bc3d-49c3-8ae1-a7ac6799457d}">
        <label>Resulting image</label>
        <description>Resulting image</description>
      </output>
    </ports>
  </node>
  <node id="syip.extractdata" uuid="{bb6e7bd4-9cf2-4c40-82f3-5671c4f0f1df}" x="1775.0" y="1750.0">
    <label>Integral
of each coin</label>
    <description>Extracts table data from an image based on tabular input data</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "integrate"}, "start y": {"description": "", "editor": null, "label": "", "order": 1, "type": "string", "value": "y0"}, "start x": {"description": "", "editor": null, "label": "", "order": 2, "type": "string", "value": "x0"}, "end y": {"description": "", "editor": null, "label": "", "order": 3, "type": "string", "value": "y1"}, "end x": {"description": "", "editor": null, "label": "", "order": 4, "type": "string", "value": "x1"}}</parameters>
    <ports>
      <input key="source_im" scheme="hdf5" type="image" type_base="image" uuid="{b8d517d8-14df-42c2-b259-64908d6fb844}">
        <label>Source image to extract data from</label>
        <description>Source image to extract data from</description>
      </input>
      <input key="source_table" scheme="hdf5" type="table" type_base="table" uuid="{d4c797ea-41f3-4271-9a44-c4f5af5811c1}">
        <label>Table with parameters for data extraction</label>
        <description>Table with parameters for data extraction</description>
      </input>
      <output key="result" scheme="hdf5" type="table" type_base="table" uuid="{9c6881e0-c25e-4b1a-8f23-8c35596bc9dc}">
        <label>Table with results</label>
        <description>Table with results</description>
      </output>
    </ports>
  </node>
  <node id="syip.imagedraw" uuid="{cc39c2d1-0a2c-4b43-91ba-a38a845e7a31}" x="2075.0" y="1725.0">
    <label>Draw on Image</label>
    <description>Annotates an image with drawings based on tabular data.</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "Algorithm", "order": 0, "type": "string", "value": "filled circle"}, "x": {"description": "", "editor": null, "label": "x", "order": 1, "type": "string", "value": "X"}, "y": {"description": "", "editor": null, "label": "y", "order": 2, "type": "string", "value": "Y"}, "x2": {"description": "", "editor": null, "label": "x2", "order": 3, "type": "string", "value": "X2"}, "y2": {"description": "", "editor": null, "label": "y2", "order": 4, "type": "string", "value": "Y2"}, "N": {"description": "", "editor": null, "label": "N", "order": 5, "type": "string", "value": "N"}, "radius": {"description": "", "editor": null, "label": "radius", "order": 6, "type": "string", "value": "radius"}, "red color": {"description": "", "editor": null, "label": "red color", "order": 7, "type": "string", "value": "red"}, "green color": {"description": "", "editor": null, "label": "green color", "order": 8, "type": "string", "value": "green"}, "blue color": {"description": "", "editor": null, "label": "blue color", "order": 9, "type": "string", "value": "0.5"}, "alpha value": {"description": "", "editor": null, "label": "alpha value", "order": 10, "type": "string", "value": "0.5"}}</parameters>
    <ports>
      <input key="image" scheme="hdf5" type="image" type_base="image" uuid="{69f3086b-b490-487e-b98d-78aaf9157fd2}">
        <label>Image to draw on</label>
        <description>Image to draw on</description>
      </input>
      <input key="table" scheme="hdf5" type="table" type_base="table" uuid="{9ff7726d-be89-4309-9c9a-b28c68a59822}">
        <label>Table used for drawing</label>
        <description>Table used for drawing</description>
      </input>
      <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{b7956b12-a47b-48a3-bc59-1646e82c06ae}">
        <label>Resulting image</label>
        <description>Resulting image</description>
      </output>
    </ports>
  </node>
  <node id="syip.morphology_single_input" uuid="{d52726d7-d42e-4db1-8f9c-e80d58294ef4}" x="1425.0" y="1875.0">
    <label>Morphology (single input)</label>
    <description>Uses morphology based algorithms with a built-in structuring element</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "remove small holes"}, "padding": {"description": "", "editor": null, "label": "", "order": 1, "type": "boolean", "value": false}, "cutoff": {"description": "", "editor": null, "label": "", "order": 2, "type": "float", "value": 0.5}, "horizontal/vertical": {"description": "", "editor": null, "label": "", "order": 3, "type": "string", "value": "horizontal"}, "window size": {"description": "", "editor": null, "label": "", "order": 4, "type": "integer", "value": 1}, "maximum": {"description": "", "editor": null, "label": "", "order": 5, "type": "float", "value": 1.0}, "scale y": {"description": "", "editor": null, "label": "", "order": 6, "type": "float", "value": 1.0}, "scale x": {"description": "", "editor": null, "label": "", "order": 7, "type": "float", "value": 1.0}, "histogram selection": {"description": "", "editor": null, "label": "", "order": 8, "type": "string", "value": "min"}, "diagonal neighborhood": {"description": "", "editor": null, "label": "", "order": 9, "type": "boolean", "value": false}, "height": {"description": "", "editor": null, "label": "", "order": 10, "type": "integer", "value": 512}, "border mode": {"description": "", "editor": null, "label": "", "order": 11, "type": "string", "value": "constant"}, "adaptive kernel size": {"description": "", "editor": null, "label": "", "order": 12, "type": "integer", "value": 4}, "luminance preserving": {"description": "", "editor": null, "label": "", "order": 13, "type": "boolean", "value": true}, "gain": {"description": "", "editor": null, "label": "", "order": 14, "type": "float", "value": 10.0}, "aspect": {"description": "", "editor": null, "label": "", "order": 15, "type": "boolean", "value": false}, "offset": {"description": "", "editor": null, "label": "", "order": 16, "type": "float", "value": 0.0}, "threshold": {"description": "", "editor": null, "label": "", "order": 17, "type": "float", "value": 0.15}, "kernel size": {"description": "", "editor": null, "label": "", "order": 18, "type": "integer", "value": 3}, "interpolation degree": {"description": "", "editor": null, "label": "", "order": 19, "type": "integer", "value": 3}, "resize": {"description": "", "editor": null, "label": "", "order": 20, "type": "boolean", "value": true}, "inverse": {"description": "", "editor": null, "label": "", "order": 21, "type": "boolean", "value": false}, "scale": {"description": "", "editor": null, "label": "", "order": 22, "type": "float", "value": 1.0}, "angle": {"description": "", "editor": null, "label": "", "order": 23, "type": "float", "value": 0.0}, "threshold method": {"description": "", "editor": null, "label": "", "order": 24, "type": "string", "value": "gaussian"}, "k": {"description": "", "editor": null, "label": "", "order": 25, "type": "float", "value": 0.05}, "sigma-y": {"description": "", "editor": null, "label": "", "order": 26, "type": "float", "value": 1.0}, "sigma-x": {"description": "", "editor": null, "label": "", "order": 27, "type": "float", "value": 1.0}, "n": {"description": "", "editor": null, "label": "", "order": 28, "type": "integer", "value": 200}, "add alpha": {"description": "", "editor": null, "label": "", "order": 29, "type": "boolean", "value": false}, "width": {"description": "", "editor": null, "label": "", "order": 30, "type": "integer", "value": 512}, "minimum": {"description": "", "editor": null, "label": "", "order": 31, "type": "float", "value": 0.0}, "positive/negative diagonal": {"description": "", "editor": null, "label": "", "order": 32, "type": "string", "value": "default"}, "bins": {"description": "", "editor": null, "label": "", "order": 33, "type": "integer", "value": 256}, "auto threshold method": {"description": "", "editor": null, "label": "", "order": 34, "type": "string", "value": "otsu"}, "cmap": {"description": "", "editor": null, "label": "", "order": 35, "type": "string", "value": "viridis"}, "y": {"description": "", "editor": null, "label": "", "order": 36, "type": "integer", "value": 0}, "x": {"description": "", "editor": null, "label": "", "order": 37, "type": "integer", "value": 0}, "eps": {"description": "", "editor": null, "label": "", "order": 38, "type": "float", "value": 1e-06}, "sigma": {"description": "", "editor": null, "label": "", "order": 39, "type": "float", "value": 1.0}, "preserve alpha": {"description": "", "editor": null, "label": "", "order": 40, "type": "boolean", "value": true}, "gamma": {"description": "", "editor": null, "label": "", "order": 41, "type": "float", "value": 1.0}, "harris method": {"description": "", "editor": null, "label": "", "order": 42, "type": "string", "value": "k"}}</parameters>
    <ports>
      <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{718a748d-ce3b-472c-972b-9fd66b31e483}">
        <label>source image to filter</label>
        <description>source image to filter</description>
      </input>
      <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{b119c9c0-57f4-4c7a-af88-e5d00689840c}">
        <label>result after filtering</label>
        <description>result after filtering</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.calculatortable" uuid="{db7e7020-b0a8-46b2-9274-df0bce203a61}" x="1625.0" y="1750.0">
    <label>Calculate
regions to
integrate</label>
    <description>Performs user-defined python calculations</description>
    <author>Greger Cronquist &lt;greger.cronquist@combine.se&gt;, Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;, Sara Gustafzelius &lt;sara.gustafzelius@combine.se&gt;, Benedikt Ziegler &lt;benedikt.ziegler@combine.se&gt;</author>
    <copyright>(c) 2016 Combine Control Systems AB</copyright>
    <version>3.0</version>
    <parameters type="json">{"type": "group", "calc_list": {"description": "List of calculations.", "editor": null, "label": "List of calculations", "order": 0, "passthrough": false, "type": "list", "list": ["${x0} = ${X}-${sigma}*0.5 #ENABLED:1", "${y0} = ${Y}-${sigma}*0.5 #ENABLED:1", "${x1} = ${X}+${sigma}*0.5 #ENABLED:1", "${y1} = ${Y}+${sigma}*0.5 #ENABLED:1"], "value": [0], "value_names": []}, "same_length_res": {"description": "Gather all the results generated from an incoming Table into a common output table. This requires that the results all have the same length. An error will be given if the lengths of the outgoing results differ.", "editor": null, "label": "Put results in common outputs.", "order": 1, "type": "boolean", "value": true}, "copy_input": {"description": "If enabled the incoming data will be copied to the output before running the calculations. This requires that the results will all have the same length. An exception will be raised if the lengths of the outgoing results differ.", "editor": null, "label": "Copy input", "order": 2, "type": "boolean", "value": false}, "fail_strategy": {"description": "Decide how a failed calculation should be handled", "label": "Action on calculation failure", "order": 3, "passthrough": false, "type": "list", "list": ["Exception", "Skip calculation"], "value": [0], "value_names": [], "editor": {"type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="port0" scheme="hdf5" type="table" type_base="table" uuid="{f2d7e12f-c7b7-4de8-9c11-403065c2f479}">
        <label>Input Table</label>
        <description>Input Table</description>
      </input>
      <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{f147ba49-e168-4bb5-96c2-f37d02a42239}">
        <label>Table with results from the calculations.</label>
        <description>Table with results from the calculations.</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.calculatortable" uuid="{eb4004b4-cf9e-4231-8985-625c6ab125a3}" x="1900.0" y="1600.0">
    <label>"Value" of coins
in image</label>
    <description>Performs user-defined python calculations</description>
    <author>Greger Cronquist &lt;greger.cronquist@combine.se&gt;, Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;, Sara Gustafzelius &lt;sara.gustafzelius@combine.se&gt;, Benedikt Ziegler &lt;benedikt.ziegler@combine.se&gt;</author>
    <copyright>(c) 2016 Combine Control Systems AB</copyright>
    <version>3.0</version>
    <parameters type="json">{"type": "group", "calc_list": {"description": "List of calculations.", "editor": null, "label": "List of calculations", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["Value = # Large coins (integral &gt; 170) worth 5, small coins worth 1\nnp.sum(arg.col('ch0_integral').data &gt; 170) * 5 + np.sum(arg.col('ch0_integral').data &lt;= 170) * 1 #ENABLED:1"], "value": [0], "value_names": []}, "same_length_res": {"description": "Gather all the results generated from an incoming data into a common output table. This requires that the results all have the same length. An error will be given if the lengths of the outgoing results differ.", "editor": null, "label": "Put results in common outputs.", "order": 1, "type": "boolean", "value": true}, "copy_input": {"description": "If enabled the incoming data will be copied to the output before running the calculations. This requires that the results will all have the same length. An exception will be raised if the lengths of the outgoing results differ.", "editor": null, "label": "Copy input", "order": 2, "type": "boolean", "value": false}, "fail_strategy": {"description": "Decide how a failed calculation should be handled", "label": "Action on calculation failure", "mode": "selected", "order": 3, "passthrough": false, "type": "list", "list": ["Exception", "Skip calculation"], "value": [0], "value_names": [], "editor": {"type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="port0" scheme="hdf5" type="table" type_base="table" uuid="{5f10f314-0ee5-4f33-a6f5-7985f0fe5596}">
        <label>Input Table</label>
        <description>Input Table</description>
      </input>
      <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{0aaaf7cc-5728-46d4-87a9-ed693454dad3}">
        <label>Table with results from the calculations.</label>
        <description>Table with results from the calculations.</description>
      </output>
    </ports>
  </node>
  <node id="syip.exampleimage" uuid="{f0d1bedf-20c1-4390-b4a9-af5d8bb7e07a}" x="950.0" y="1850.0">
    <label>Example image
"coins"</label>
    <description>Loads an image from the built-in default example images in scikit-image</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "source": {"description": "Selected predefined image", "label": "Image:", "order": 0, "type": "string", "value": "coins", "editor": {"type": "combobox", "options": ["astronaut", "camera", "checkerboard", "chelsea (cat)", "clock", "coffee", "coins", "horse", "hubble deep field", "immunohistochemistry", "moon", "rocket", "text"]}}}</parameters>
    <ports>
      <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{cf085650-717e-441f-8cb0-8c29b35d4f30}">
        <label>Output image</label>
        <description>Output image</description>
      </output>
    </ports>
  </node>
  <connection type="table" uuid="{14a2b5c5-30b1-4ee5-84cc-46e19ede78e0}">
    <source node="{8f48c225-0caa-4462-af2c-8789cba8c4f7}" port="{a46e6950-bdf9-46b5-8c0e-102c2deaee6e}"/>
    <destination node="{db7e7020-b0a8-46b2-9274-df0bce203a61}" port="{f2d7e12f-c7b7-4de8-9c11-403065c2f479}"/>
  </connection>
  <connection type="image" uuid="{1f107000-baf3-43f9-bf62-46352516251e}">
    <source node="{8d531fd8-296c-41b4-a37f-7690150d1533}" port="{d5d79a9f-95cc-4270-ba6b-4efcc793adf8}"/>
    <destination node="{bb6e7bd4-9cf2-4c40-82f3-5671c4f0f1df}" port="{b8d517d8-14df-42c2-b259-64908d6fb844}"/>
  </connection>
  <connection type="image" uuid="{229a5009-1cb2-422d-8fbe-9f7ee3e51a87}">
    <source node="{0c9bf981-2267-4d09-9aac-405addec316b}" port="{14783aa4-8fa0-46e4-a16e-87a486bb6e11}"/>
    <destination node="{96851b72-4b15-4901-a9d0-0932579291f0}" port="{4c1c32a6-b617-4ca1-bac8-49ca0537b405}"/>
  </connection>
  <connection type="table" uuid="{4c1e3919-0901-442a-a505-a84b3d1c4f9c}">
    <source node="{06583cd7-7e5d-4664-84b2-76eaef4d6ea9}" port="{9a266603-d6d4-4e60-8e9e-259bddf88b91}"/>
    <destination node="{3be3971a-8ad7-405c-a858-b9205b60d540}" port="{780a9784-dd58-431a-a9bb-b4834dacd80f}"/>
  </connection>
  <connection type="image" uuid="{5b6d8ad4-efed-4042-a3b0-e7b5a5f787df}">
    <source node="{f0d1bedf-20c1-4390-b4a9-af5d8bb7e07a}" port="{cf085650-717e-441f-8cb0-8c29b35d4f30}"/>
    <destination node="{37eaa9e8-9c88-4bc6-8550-8a7d75f6b8ce}" port="{c37c2aba-aaaa-474f-a9e6-dcfbf6b73f94}"/>
  </connection>
  <connection type="image" uuid="{84e6331e-3912-4099-85eb-dd2f48a31f28}">
    <source node="{8a4484ba-a79b-442f-8e7c-099a04109e68}" port="{b86153e9-2917-4f4f-9b6e-11b60fc8ac3d}"/>
    <destination node="{96851b72-4b15-4901-a9d0-0932579291f0}" port="{6c6b10f3-f3b1-446b-a96b-6e5a3c8f1e87}"/>
  </connection>
  <connection type="image" uuid="{87be28a7-bc83-41a3-a400-49e5e15e812f}">
    <source node="{37eaa9e8-9c88-4bc6-8550-8a7d75f6b8ce}" port="{b5e9f64d-9d13-4556-a055-49ab2a846951}"/>
    <destination node="{cc39c2d1-0a2c-4b43-91ba-a38a845e7a31}" port="{69f3086b-b490-487e-b98d-78aaf9157fd2}"/>
  </connection>
  <connection type="image" uuid="{a0649fb4-95e7-41ea-b250-d6d9d64fcd86}">
    <source node="{96851b72-4b15-4901-a9d0-0932579291f0}" port="{af668674-bc3d-49c3-8ae1-a7ac6799457d}"/>
    <destination node="{d52726d7-d42e-4db1-8f9c-e80d58294ef4}" port="{718a748d-ce3b-472c-972b-9fd66b31e483}"/>
  </connection>
  <connection type="table" uuid="{bf129ce1-d783-4c4d-a185-b58f3bf85667}">
    <source node="{92bcee1f-05cc-4aae-a2ed-3bf4026d1e00}" port="{9ed225ae-969e-41ba-b8c9-da4ad33d6e24}"/>
    <destination node="{3be3971a-8ad7-405c-a858-b9205b60d540}" port="{0d17e2b6-bbc0-46a3-999c-30511bc8ad6d}"/>
  </connection>
  <connection type="table" uuid="{cdab6570-0672-4685-9f23-779153405142}">
    <source node="{3be3971a-8ad7-405c-a858-b9205b60d540}" port="{4221722a-433d-42ce-b027-e7b7d6d83b73}"/>
    <destination node="{cc39c2d1-0a2c-4b43-91ba-a38a845e7a31}" port="{9ff7726d-be89-4309-9c9a-b28c68a59822}"/>
  </connection>
  <connection type="image" uuid="{d4d55877-b3d7-46c7-b05e-62aaf6e19847}">
    <source node="{d52726d7-d42e-4db1-8f9c-e80d58294ef4}" port="{b119c9c0-57f4-4c7a-af88-e5d00689840c}"/>
    <destination node="{8f48c225-0caa-4462-af2c-8789cba8c4f7}" port="{c2e012b6-7ecb-40f2-9b13-a379737c3043}"/>
  </connection>
  <connection type="table" uuid="{d6b83e88-e026-475a-9f22-5cd873d45d91}">
    <source node="{db7e7020-b0a8-46b2-9274-df0bce203a61}" port="{f147ba49-e168-4bb5-96c2-f37d02a42239}"/>
    <destination node="{bb6e7bd4-9cf2-4c40-82f3-5671c4f0f1df}" port="{d4c797ea-41f3-4271-9a44-c4f5af5811c1}"/>
  </connection>
  <connection type="image" uuid="{dea001be-9b5d-4fab-9e01-767d0ae098da}">
    <source node="{f0d1bedf-20c1-4390-b4a9-af5d8bb7e07a}" port="{cf085650-717e-441f-8cb0-8c29b35d4f30}"/>
    <destination node="{8d531fd8-296c-41b4-a37f-7690150d1533}" port="{ec0fda5a-4ef7-4fc1-bbad-cf4d0c45156e}"/>
  </connection>
  <connection type="table" uuid="{e3e8b628-de89-49e7-b1cb-deefb68601e3}">
    <source node="{bb6e7bd4-9cf2-4c40-82f3-5671c4f0f1df}" port="{9c6881e0-c25e-4b1a-8f23-8c35596bc9dc}"/>
    <destination node="{92bcee1f-05cc-4aae-a2ed-3bf4026d1e00}" port="{27779fe2-f34c-4c8e-9b9d-697019eef15b}"/>
  </connection>
  <connection type="image" uuid="{e7ebe928-e1c2-4269-a7cc-4b22a256f719}">
    <source node="{f0d1bedf-20c1-4390-b4a9-af5d8bb7e07a}" port="{cf085650-717e-441f-8cb0-8c29b35d4f30}"/>
    <destination node="{0c9bf981-2267-4d09-9aac-405addec316b}" port="{6ed45ac8-a84b-4a25-a910-118418dad61f}"/>
  </connection>
  <connection type="table" uuid="{f9d55ee7-efe5-4bbe-879a-ca51be9cfda5}">
    <source node="{bb6e7bd4-9cf2-4c40-82f3-5671c4f0f1df}" port="{9c6881e0-c25e-4b1a-8f23-8c35596bc9dc}"/>
    <destination node="{eb4004b4-cf9e-4231-8985-625c6ab125a3}" port="{5f10f314-0ee5-4f33-a6f5-7985f0fe5596}"/>
  </connection>
  <connection type="table" uuid="{fff8a22a-d684-45d7-8873-0448b9c0cb56}">
    <source node="{8f48c225-0caa-4462-af2c-8789cba8c4f7}" port="{a46e6950-bdf9-46b5-8c0e-102c2deaee6e}"/>
    <destination node="{06583cd7-7e5d-4664-84b2-76eaef4d6ea9}" port="{f8248cf5-2f9c-44d8-940a-c16c8136b783}"/>
  </connection>
  <text color="Beige" height="175.0" uuid="{899ef09b-b0a2-4caa-a9e8-4f531e916c92}" width="325.0" x="1000.0" y="1425.0">Example that extracts tabular information from each found coin, available as a table of data. 

Arbitrary value of 5 or 1 assigned to coins depending on size. 

Also draws a simple visualization (cirlces) based on the found coins. </text>
</flow>
