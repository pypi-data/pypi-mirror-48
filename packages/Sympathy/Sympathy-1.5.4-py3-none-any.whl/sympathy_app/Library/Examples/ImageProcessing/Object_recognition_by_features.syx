<?xml version='1.0' encoding='ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" height="50.0" id="" is_locked="False" uuid="{9334690a-1756-40f9-9815-8e1ba82e3f39}" width="50.0" x="0.0" y="0.0">
  <label></label>
  <description></description>
  <author></author>
  <copyright></copyright>
  <version></version>
  <min_version></min_version>
  <aggregation type="json">null</aggregation>
  <libraries type="json">[]</libraries>
  <pythonpaths type="json">[]</pythonpaths>
  <overrides type="json">{}</overrides>
  <environment type="json">{}</environment>
  <parameters type="json">{"environment": {}}</parameters>
  <ports/>
  <flow cls="Flow" height="50.0" id="" is_locked="False" uuid="{08da1d79-c22f-4012-97ab-c461a70474c0}" width="50.0" x="1500.0" y="2050.0">
    <label>List of all objects
as a bitmask</label>
    <description></description>
    <author></author>
    <copyright></copyright>
    <version></version>
    <min_version></min_version>
    <aggregation type="json">null</aggregation>
    <libraries type="json">[]</libraries>
    <pythonpaths type="json">[]</pythonpaths>
    <overrides type="json">{}</overrides>
    <environment type="json">{}</environment>
    <parameters type="json">{"environment": {}}</parameters>
    <ports>
      <input index="0" key="Port" optional="False" parent="True" scheme="hdf5" type="image" uuid="{05b384ba-da0d-40ab-b862-cbaf80518483}" x="1575.0" y="2100.0">
        <label>Port</label>
        <description>Port</description>
      </input>
      <output index="0" key="Port" optional="False" parent="True" scheme="hdf5" type="[image]" uuid="{697fe3d8-8e70-481c-8525-54ab0f93651f}" x="2450.0" y="2137.5">
        <label>Port</label>
        <description>Port</description>
      </output>
    </ports>
    <node id="syip.imagemorphology" uuid="{15596ac3-99e2-42a1-9840-f951c01a8af5}" x="1925.0" y="2100.0">
      <label>Morphological Image Operations</label>
      <description>Performs one of a selection of morphological or rank operations on a target image (top) that uses a given structuring element (bottom). Other morphological operations can be found under the "filter" node</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "binary, opening"}, "p1": {"description": "", "editor": null, "label": "", "order": 1, "type": "float", "value": 0.75}, "p0": {"description": "", "editor": null, "label": "", "order": 2, "type": "float", "value": 0.25}}</parameters>
      <ports>
        <input key="target" scheme="hdf5" type="image" type_base="image" uuid="{1c661898-195e-4bff-970e-c33722b3a370}">
          <label>Target image</label>
          <description>Target image</description>
        </input>
        <input key="structuring_element" scheme="hdf5" type="image" type_base="image" uuid="{b3524a83-8131-4a86-a12d-4c015a79541d}">
          <label>Structuring element</label>
          <description>Structuring element</description>
        </input>
        <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{ad5dfd85-e1fc-4357-a1b7-c256f35eef5a}">
          <label>Resulting image</label>
          <description>Resulting image</description>
        </output>
      </ports>
    </node>
    <node id="syip.morphology_single_input" uuid="{437ceb2c-9c6e-411d-a53f-af75bc901e0c}" x="2075.0" y="2100.0">
      <label>Morphology (single input)</label>
      <description>Uses morphology based algorithms with a built-in structuring element</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "remove small holes"}, "diagonal neighborhood": {"description": "", "editor": null, "label": "", "order": 1, "type": "boolean", "value": false}, "n": {"description": "", "editor": null, "label": "", "order": 2, "type": "integer", "value": 12}}</parameters>
      <ports>
        <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{9e5b71f5-3676-4f3f-85cc-a82aa85d01a1}">
          <label>source image to filter</label>
          <description>source image to filter</description>
        </input>
        <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{27b1b7fa-09ea-4699-882c-f069144f1823}">
          <label>result after filtering</label>
          <description>result after filtering</description>
        </output>
      </ports>
    </node>
    <node id="syip.threshold" uuid="{4aa3b0ad-6f33-4a3d-8f4b-144d5b718b1a}" x="1775.0" y="2100.0">
      <label>Threshold image</label>
      <description>Applies a threshold to an image giving a boolean output</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "adaptive"}, "threshold": {"description": "", "editor": null, "label": "", "order": 1, "type": "float", "value": 0.15}, "auto threshold method": {"description": "", "editor": null, "label": "", "order": 2, "type": "string", "value": "otsu"}, "kernel size": {"description": "", "editor": null, "label": "", "order": 3, "type": "integer", "value": 61}, "sigma": {"description": "", "editor": null, "label": "", "order": 4, "type": "float", "value": 41.0}, "threshold method": {"description": "", "editor": null, "label": "", "order": 5, "type": "string", "value": "gaussian"}, "offset": {"description": "", "editor": null, "label": "", "order": 6, "type": "float", "value": -0.01}}</parameters>
      <ports>
        <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{d3468e5d-a46a-48df-b36d-30a7b518e22d}">
          <label>source image to filter</label>
          <description>source image to filter</description>
        </input>
        <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{0d4f688d-05d3-44b7-9c96-dcb0a4b756b7}">
          <label>result after filtering</label>
          <description>result after filtering</description>
        </output>
      </ports>
    </node>
    <node id="syip.general_filters" uuid="{4cb1774b-1511-4a95-aff7-0f61fcfcc1e4}" x="1675.0" y="2100.0">
      <label>Filter image</label>
      <description>Applies simple filtering or scaling algorithms on an image. For more complex operations see the more specialized image manipulation nodes</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "scale/offset"}, "scale": {"description": "", "editor": null, "label": "", "order": 1, "type": "float", "value": -1.0}, "sigma-x": {"description": "", "editor": null, "label": "", "order": 2, "type": "float", "value": 1.0}, "sigma-y": {"description": "", "editor": null, "label": "", "order": 3, "type": "float", "value": 1.0}, "offset": {"description": "", "editor": null, "label": "", "order": 4, "type": "float", "value": 1.0}, "sigma": {"description": "", "editor": null, "label": "", "order": 5, "type": "float", "value": 1.0}, "border mode": {"description": "", "editor": null, "label": "", "order": 6, "type": "string", "value": "constant"}, "k": {"description": "", "editor": null, "label": "", "order": 7, "type": "float", "value": 0.05}, "minimum": {"description": "", "editor": null, "label": "", "order": 8, "type": "float", "value": 0.0}, "maximum": {"description": "", "editor": null, "label": "", "order": 9, "type": "float", "value": 1.0}}</parameters>
      <ports>
        <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{d2e44935-6009-4e29-b4a8-97469c7ce2b8}">
          <label>source image to filter</label>
          <description>source image to filter</description>
        </input>
        <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{366c2b69-6869-4f9c-965e-b01ea61a0fad}">
          <label>result after filtering</label>
          <description>result after filtering</description>
        </output>
      </ports>
    </node>
    <node id="syip.imagegenerate" uuid="{8c9d1ce0-89c4-4851-b4d8-da98fbf5241c}" x="1825.0" y="2175.0">
      <label>Generate Image</label>
      <description>Generates an image or structuring element of a given size</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "disk"}, "channels": {"description": "", "editor": null, "label": "", "order": 1, "type": "integer", "value": 1}, "size": {"description": "", "editor": null, "label": "", "order": 2, "type": "integer", "value": 5}, "other size": {"description": "", "editor": null, "label": "", "order": 3, "type": "integer", "value": 5}, "height": {"description": "", "editor": null, "label": "", "order": 4, "type": "integer", "value": 512}, "width": {"description": "", "editor": null, "label": "", "order": 5, "type": "integer", "value": 512}}</parameters>
      <ports>
        <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{b9bd7016-6415-41c9-863b-7881e61f0aee}">
          <label>Resulting image</label>
          <description>Resulting image</description>
        </output>
      </ports>
    </node>
    <node id="syip.morphology_single_input" uuid="{99a52214-cf0b-4e51-b265-5756c61bbac7}" x="2225.0" y="2100.0">
      <label>Morphology (single input)</label>
      <description>Uses morphology based algorithms with a built-in structuring element</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "labeling"}, "diagonal neighborhood": {"description": "", "editor": null, "label": "", "order": 1, "type": "boolean", "value": false}, "n": {"description": "", "editor": null, "label": "", "order": 2, "type": "integer", "value": 12}}</parameters>
      <ports>
        <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{2b703e52-abb0-420d-a9bd-2155284b67fb}">
          <label>source image to filter</label>
          <description>source image to filter</description>
        </input>
        <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{9e146963-566f-4318-8dbc-9683a48fbf3c}">
          <label>result after filtering</label>
          <description>result after filtering</description>
        </output>
      </ports>
    </node>
    <node id="syip.image2list" uuid="{c558489a-9238-498a-922a-d3d30c7f6075}" x="2350.0" y="2100.0">
      <label>Image to List</label>
      <description>Generates a list of images based on algorithms operating on one image</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "from labels"}, "do background": {"description": "", "editor": null, "label": "", "order": 1, "type": "boolean", "value": true}}</parameters>
      <ports>
        <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{56bd7f86-fa9d-45dc-8368-d3ec094bd325}">
          <label>source image</label>
          <description>source image</description>
        </input>
        <output key="results" scheme="hdf5" type="[image]" type_base="[image]" uuid="{f3f2c250-c8fe-4e1f-8795-83fc3de33eab}">
          <label>Resulting list of images</label>
          <description>Resulting list of images</description>
        </output>
      </ports>
    </node>
    <connection type="image" uuid="{19fbe2a8-a263-4e9a-9ceb-1dcf8425c083}">
      <source node="{4aa3b0ad-6f33-4a3d-8f4b-144d5b718b1a}" port="{0d4f688d-05d3-44b7-9c96-dcb0a4b756b7}"/>
      <destination node="{15596ac3-99e2-42a1-9840-f951c01a8af5}" port="{1c661898-195e-4bff-970e-c33722b3a370}"/>
    </connection>
    <connection type="image" uuid="{366d5db8-9839-4567-8339-a7cc5a10f8d5}">
      <source node="{08da1d79-c22f-4012-97ab-c461a70474c0}" port="{05b384ba-da0d-40ab-b862-cbaf80518483}"/>
      <destination node="{4cb1774b-1511-4a95-aff7-0f61fcfcc1e4}" port="{d2e44935-6009-4e29-b4a8-97469c7ce2b8}"/>
    </connection>
    <connection type="image" uuid="{7a7b9c95-e5c1-4d1c-aca8-7380db8875ab}">
      <source node="{99a52214-cf0b-4e51-b265-5756c61bbac7}" port="{9e146963-566f-4318-8dbc-9683a48fbf3c}"/>
      <destination node="{c558489a-9238-498a-922a-d3d30c7f6075}" port="{56bd7f86-fa9d-45dc-8368-d3ec094bd325}"/>
    </connection>
    <connection type="image" uuid="{ab423c14-ea10-4b93-85cb-3bba10c9d5af}">
      <source node="{437ceb2c-9c6e-411d-a53f-af75bc901e0c}" port="{27b1b7fa-09ea-4699-882c-f069144f1823}"/>
      <destination node="{99a52214-cf0b-4e51-b265-5756c61bbac7}" port="{2b703e52-abb0-420d-a9bd-2155284b67fb}"/>
    </connection>
    <connection type="image" uuid="{c74195c7-8dff-470d-a8f6-c6454940b25c}">
      <source node="{15596ac3-99e2-42a1-9840-f951c01a8af5}" port="{ad5dfd85-e1fc-4357-a1b7-c256f35eef5a}"/>
      <destination node="{437ceb2c-9c6e-411d-a53f-af75bc901e0c}" port="{9e5b71f5-3676-4f3f-85cc-a82aa85d01a1}"/>
    </connection>
    <connection type="[image]" uuid="{e01174b0-de69-4b21-8ff2-2d52858a739a}">
      <source node="{c558489a-9238-498a-922a-d3d30c7f6075}" port="{f3f2c250-c8fe-4e1f-8795-83fc3de33eab}"/>
      <destination node="{08da1d79-c22f-4012-97ab-c461a70474c0}" port="{697fe3d8-8e70-481c-8525-54ab0f93651f}"/>
    </connection>
    <connection type="image" uuid="{e025ca31-fe5f-4003-a3fe-b45056cdc939}">
      <source node="{4cb1774b-1511-4a95-aff7-0f61fcfcc1e4}" port="{366c2b69-6869-4f9c-965e-b01ea61a0fad}"/>
      <destination node="{4aa3b0ad-6f33-4a3d-8f4b-144d5b718b1a}" port="{d3468e5d-a46a-48df-b36d-30a7b518e22d}"/>
    </connection>
    <connection type="image" uuid="{f0fff538-2e64-49e7-bc84-8483c663f9e6}">
      <source node="{8c9d1ce0-89c4-4851-b4d8-da98fbf5241c}" port="{b9bd7016-6415-41c9-863b-7881e61f0aee}"/>
      <destination node="{15596ac3-99e2-42a1-9840-f951c01a8af5}" port="{b3524a83-8131-4a86-a12d-4c015a79541d}"/>
    </connection>
  </flow>
  <flow cls="Lambda" height="50.0" id="" is_locked="False" uuid="{0dc51f38-0ee0-4ae7-b8d9-c81dd526e5fb}" width="50.0" x="3000.0" y="1975.0">
    <label>Lambda iterating over all objects</label>
    <description></description>
    <author></author>
    <copyright></copyright>
    <version></version>
    <min_version></min_version>
    <aggregation type="json">null</aggregation>
    <libraries type="json">[]</libraries>
    <pythonpaths type="json">[]</pythonpaths>
    <overrides type="json">{}</overrides>
    <environment type="json">{}</environment>
    <parameters type="json">{"environment": {}}</parameters>
    <ports>
      <input index="0" key="Port" optional="False" parent="True" scheme="hdf5" type="table" uuid="{0114d220-9bca-4588-a73b-3a18e33b1780}" x="1450.0" y="2000.0">
        <label>Port</label>
        <description>Port</description>
      </input>
      <input index="1" key="Port" optional="False" parent="True" scheme="hdf5" type="image" uuid="{d0ee96e6-4f0f-4fcf-855c-b30310381c1e}" x="1450.0" y="1750.0">
        <label>Port</label>
        <description>Port</description>
      </input>
      <output index="0" key="Port" optional="False" parent="False" scheme="hdf5" type="(table, image)" uuid="{1b530f4c-383f-4c7c-8b60-0afa14b10348}" x="2525.0" y="1750.0">
        <label>Port</label>
        <description>Port</description>
      </output>
    </ports>
    <basic_ports>
      <output key="Function" scheme="hdf5" type="table -&gt; image -&gt; (table, image)" type_base="&lt;a&gt;" uuid="{295e5978-a9aa-4214-9de6-8af39cbaf282}">
        <label>Lambda function</label>
        <description>Lambda function</description>
      </output>
    </basic_ports>
    <node id="syip.imagemorphology" uuid="{26204ecb-c26e-4e42-b1be-9793181336b5}" x="1800.0" y="1800.0">
      <label>Morphology
extend border around object mask</label>
      <description>Performs one of a selection of morphological or rank operations on a target image (top) that uses a given structuring element (bottom). Other morphological operations can be found under the "filter" node</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "binary, opening"}, "p1": {"description": "", "editor": null, "label": "", "order": 1, "type": "float", "value": 0.75}, "p0": {"description": "", "editor": null, "label": "", "order": 2, "type": "float", "value": 0.25}}</parameters>
      <ports>
        <input key="target" scheme="hdf5" type="image" type_base="image" uuid="{2d204bf3-8801-484d-bc63-7f834d9ddd27}">
          <label>Target image</label>
          <description>Target image</description>
        </input>
        <input key="structuring_element" scheme="hdf5" type="image" type_base="image" uuid="{123b4d3f-51c0-4f5d-9f78-904a4b6fc20d}">
          <label>Structuring element</label>
          <description>Structuring element</description>
        </input>
        <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{bb8732c3-b77a-4efd-866f-6463d2da4f70}">
          <label>Resulting image</label>
          <description>Resulting image</description>
        </output>
      </ports>
    </node>
    <node id="syip.imagegenerate" uuid="{27fe10e0-f121-4eab-86c5-42c693cad4f5}" x="1600.0" y="1875.0">
      <label>Generate Image</label>
      <description>Generates an image or structuring element of a given size</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "disk"}, "size": {"description": "", "editor": null, "label": "", "order": 1, "type": "integer", "value": 5}, "height": {"description": "", "editor": null, "label": "", "order": 2, "type": "integer", "value": 512}, "width": {"description": "", "editor": null, "label": "", "order": 3, "type": "integer", "value": 512}, "other size": {"description": "", "editor": null, "label": "", "order": 4, "type": "integer", "value": 5}, "channels": {"description": "", "editor": null, "label": "", "order": 5, "type": "integer", "value": 1}}</parameters>
      <ports>
        <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{babcd117-6aa7-4e10-b9b2-aac74f0ffedd}">
          <label>Resulting image</label>
          <description>Resulting image</description>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.data.table.calculatorgeneric" uuid="{3d00b1b7-4296-4423-99f7-2a4c5fe7057b}" x="2250.0" y="1925.0">
      <label>Calculator

sum number of keypoints
that was inside this object</label>
      <description>Performs user-defined python calculations</description>
      <author>Greger Cronquist &lt;greger.cronquist@combine.se&gt;, Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;, Sara Gustafzelius &lt;sara.gustafzelius@combine.se&gt;, Benedikt Ziegler &lt;benedikt.ziegler@combine.se&gt;</author>
      <copyright>(c) 2016 Combine Control Systems AB</copyright>
      <version>3.0</version>
      <parameters type="json">{"type": "group", "calc_list": {"description": "List of calculations.", "editor": null, "label": "List of calculations", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["score = np.sum(arg.col('ch0_values').data) #ENABLED:1"], "value": [], "value_names": []}, "copy_input": {"description": "If enabled the incoming data will be copied to the output before running the calculations. This requires that the results will all have the same length. An exception will be raised if the lengths of the outgoing results differ.", "editor": null, "label": "Copy input", "order": 1, "type": "boolean", "value": false}, "fail_strategy": {"description": "Decide how a failed calculation should be handled", "label": "Action on calculation failure", "mode": "selected", "order": 2, "passthrough": false, "type": "list", "list": ["Exception", "Skip calculation"], "value": [0], "value_names": ["Exception"], "editor": {"display": null, "include_empty": false, "type": "combobox", "options": []}}}</parameters>
      <ports>
        <input key="port0" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{40e11e83-7468-4075-af88-af2a6ab22bab}">
          <label>Generic Input</label>
          <description>Generic Input</description>
        </input>
        <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{44171fe8-ff0c-491d-ada9-50d247ee9d52}">
          <label>Table with results from the calculations.</label>
          <description>Table with results from the calculations.</description>
        </output>
      </ports>
    </node>
    <node id="syip.morphology_single_input" uuid="{665c3fd8-cc72-481f-a0cd-9b1f1091a8ab}" x="1600.0" y="1775.0">
      <label>Morphology 
convex hull</label>
      <description>Uses morphology based algorithms with a built-in structuring element</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "convex hull, image"}, "diagonal neighborhood": {"description": "", "editor": null, "label": "", "order": 1, "type": "boolean", "value": false}, "n": {"description": "", "editor": null, "label": "", "order": 2, "type": "integer", "value": 12}}</parameters>
      <ports>
        <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{7e68e0ce-d7e0-4426-80a9-a6f65f16c15a}">
          <label>source image to filter</label>
          <description>source image to filter</description>
        </input>
        <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{5ee9b04f-3ab1-4d01-a194-d4e57b30e24f}">
          <label>result after filtering</label>
          <description>result after filtering</description>
        </output>
      </ports>
    </node>
    <node id="syip.extractdata" uuid="{dd6a4d5e-d874-4266-b0bb-b658a4a1dd6f}" x="2050.0" y="1925.0">
      <label>Extract Image Data

check mask for
each keypoint</label>
      <description>Extracts table data from an image based on tabular input data</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "pixel values"}, "start y": {"description": "", "editor": null, "label": "", "order": 1, "type": "string", "value": "y0"}, "start x": {"description": "", "editor": null, "label": "", "order": 2, "type": "string", "value": "x0"}, "y": {"description": "", "editor": null, "label": "", "order": 3, "type": "string", "value": "Y"}, "end x": {"description": "", "editor": null, "label": "", "order": 4, "type": "string", "value": "x1"}, "x": {"description": "", "editor": null, "label": "", "order": 5, "type": "string", "value": "X"}, "end y": {"description": "", "editor": null, "label": "", "order": 6, "type": "string", "value": "y1"}}</parameters>
      <ports>
        <input key="source_im" scheme="hdf5" type="image" type_base="image" uuid="{d89feeca-9f84-43fd-babe-8bfa7359553d}">
          <label>Source image to extract data from</label>
          <description>Source image to extract data from</description>
        </input>
        <input key="source_table" scheme="hdf5" type="table" type_base="table" uuid="{9c5796d6-34ff-4cf4-bf78-9c6a1f57e155}">
          <label>Table with parameters for data extraction</label>
          <description>Table with parameters for data extraction</description>
        </input>
        <output key="result" scheme="hdf5" type="table" type_base="table" uuid="{598a96f4-0371-4cc3-a289-2746c154381f}">
          <label>Table with results</label>
          <description>Table with results</description>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.tuple.tuple2" uuid="{ea02f5da-ec2f-4dfc-9b1c-9e814aa80235}" x="2350.0" y="1750.0">
      <label>Tuple</label>
      <description></description>
      <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>1.0</version>
      <parameters type="json">{"type": "group"}</parameters>
      <ports>
        <input key="input" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{2607e499-9a1f-4ba7-b6ba-51f20675b3ea}">
          <label>Input</label>
          <description>Input</description>
        </input>
        <input key="input" scheme="hdf5" type="image" type_base="&lt;b&gt;" uuid="{34ca6028-cd3e-497a-918d-d36379a017c2}">
          <label>Input</label>
          <description>Input</description>
        </input>
        <output key="output" scheme="hdf5" type="(table, image)" type_base="(&lt;a&gt;, &lt;b&gt;)" uuid="{96dc124f-c1e2-4544-b3f0-7314455f80a7}">
          <label>Output</label>
          <description>Output</description>
        </output>
      </ports>
    </node>
    <connection type="table" uuid="{08704c1d-e32c-4ac9-9fdb-1bca5de45266}">
      <source node="{3d00b1b7-4296-4423-99f7-2a4c5fe7057b}" port="{44171fe8-ff0c-491d-ada9-50d247ee9d52}"/>
      <destination node="{ea02f5da-ec2f-4dfc-9b1c-9e814aa80235}" port="{2607e499-9a1f-4ba7-b6ba-51f20675b3ea}"/>
    </connection>
    <connection type="image" uuid="{0c81c9c3-5f2c-4c03-b609-cda62741bf79}">
      <source node="{26204ecb-c26e-4e42-b1be-9793181336b5}" port="{bb8732c3-b77a-4efd-866f-6463d2da4f70}"/>
      <destination node="{dd6a4d5e-d874-4266-b0bb-b658a4a1dd6f}" port="{d89feeca-9f84-43fd-babe-8bfa7359553d}"/>
    </connection>
    <connection type="image" uuid="{1679fc54-ecef-4aa1-8b1a-5b459b9a9a82}">
      <source node="{665c3fd8-cc72-481f-a0cd-9b1f1091a8ab}" port="{5ee9b04f-3ab1-4d01-a194-d4e57b30e24f}"/>
      <destination node="{26204ecb-c26e-4e42-b1be-9793181336b5}" port="{2d204bf3-8801-484d-bc63-7f834d9ddd27}"/>
    </connection>
    <connection type="image" uuid="{18e337b8-a297-4769-a5c6-ea11396f802a}">
      <source node="{0dc51f38-0ee0-4ae7-b8d9-c81dd526e5fb}" port="{d0ee96e6-4f0f-4fcf-855c-b30310381c1e}"/>
      <destination node="{ea02f5da-ec2f-4dfc-9b1c-9e814aa80235}" port="{34ca6028-cd3e-497a-918d-d36379a017c2}"/>
    </connection>
    <connection type="image" uuid="{3a5e4dd9-72fd-46ed-b53b-deb3e723ef10}">
      <source node="{27fe10e0-f121-4eab-86c5-42c693cad4f5}" port="{babcd117-6aa7-4e10-b9b2-aac74f0ffedd}"/>
      <destination node="{26204ecb-c26e-4e42-b1be-9793181336b5}" port="{123b4d3f-51c0-4f5d-9f78-904a4b6fc20d}"/>
    </connection>
    <connection type="table" uuid="{42fa21d4-6d56-4bdd-bb72-8b9afb237c83}">
      <source node="{dd6a4d5e-d874-4266-b0bb-b658a4a1dd6f}" port="{598a96f4-0371-4cc3-a289-2746c154381f}"/>
      <destination node="{3d00b1b7-4296-4423-99f7-2a4c5fe7057b}" port="{40e11e83-7468-4075-af88-af2a6ab22bab}"/>
    </connection>
    <connection type="(table, image)" uuid="{48a854bf-3626-4f84-a262-b4834b5fb67f}">
      <source node="{ea02f5da-ec2f-4dfc-9b1c-9e814aa80235}" port="{96dc124f-c1e2-4544-b3f0-7314455f80a7}"/>
      <destination node="{0dc51f38-0ee0-4ae7-b8d9-c81dd526e5fb}" port="{1b530f4c-383f-4c7c-8b60-0afa14b10348}"/>
    </connection>
    <connection type="image" uuid="{d34a456e-3cf2-4d77-9ad0-133008d8e862}">
      <source node="{0dc51f38-0ee0-4ae7-b8d9-c81dd526e5fb}" port="{d0ee96e6-4f0f-4fcf-855c-b30310381c1e}"/>
      <destination node="{665c3fd8-cc72-481f-a0cd-9b1f1091a8ab}" port="{7e68e0ce-d7e0-4426-80a9-a6f65f16c15a}"/>
    </connection>
    <connection type="table" uuid="{d577b07a-b873-438f-b79e-63913f16b3c5}">
      <source node="{0dc51f38-0ee0-4ae7-b8d9-c81dd526e5fb}" port="{0114d220-9bca-4588-a73b-3a18e33b1780}"/>
      <destination node="{dd6a4d5e-d874-4266-b0bb-b658a4a1dd6f}" port="{9c5796d6-34ff-4cf4-bf78-9c6a1f57e155}"/>
    </connection>
  </flow>
  <node id="syip.exampleimage" uuid="{1ad2163a-66b5-4329-b134-ee3259f1380a}" x="1100.0" y="1700.0">
    <label>Example Image</label>
    <description>Loads an image from the built-in default example images in scikit-image</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "source": {"description": "Selected predefined image", "label": "Image", "order": 0, "type": "string", "value": "candy", "editor": {"display": null, "include_empty": false, "type": "combobox", "options": ["astronaut", "camera", "candy", "checkerboard", "chelsea (cat)", "clock", "coffee", "coins", "horse", "hubble deep field", "immunohistochemistry", "moon", "rocket", "text"]}}}</parameters>
    <ports>
      <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{c7fbbe38-1dd4-4496-a967-e0685272581a}">
        <label>Output image</label>
        <description>Output image</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.hjointable" uuid="{1cdf3467-a1fb-4678-a0e2-029f1f3fe656}" x="2475.0" y="1875.0">
    <label>HJoin Table</label>
    <description>Horizontal join of two Tables</description>
    <author>Alexander Busck &lt;alexander.busck@combine.se&gt;</author>
    <copyright>(C) 2013 Combine Control Systems AB</copyright>
    <version>1.1</version>
    <parameters type="json">{"type": "group", "name": {"description": "Select which port decides the output table(s) names", "label": "Input port name for joined table", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["Lower", "Upper"], "value": [0], "value_names": [], "editor": {"display": null, "include_empty": false, "type": "combobox", "options": []}}, "mask": {"description": "Select if rows that are not represented in all Tables should be complemented with masked values", "editor": null, "label": "Complement missing rows", "order": 1, "type": "boolean", "value": true}, "rename": {"description": "If true columns with same name as an earlier column will be renamed and joined, otherwise columns will overwrite existing data", "editor": null, "label": "Rename duplicate columns", "order": 2, "type": "boolean", "value": false}}</parameters>
    <ports>
      <input key="port1" scheme="hdf5" type="table" type_base="table" uuid="{d1db6edd-5c58-45ee-a2a3-0554384e0204}">
        <label>Input Table 1</label>
        <description>Input Table 1</description>
      </input>
      <input key="port2" scheme="hdf5" type="table" type_base="table" uuid="{8f370e78-a5e2-41f3-8377-5e74ee1e5b72}">
        <label>Input Table 2</label>
        <description>Input Table 2</description>
      </input>
      <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{c2c9b5db-6998-4d34-bbb4-94c5cfadd864}">
        <label>Table with horizontally joined data</label>
        <description>Table with horizontally joined data</description>
      </output>
    </ports>
  </node>
  <node id="syip.imagedraw" uuid="{349117d9-7be7-4350-8c9f-e021a80a08ab}" x="1850.0" y="1425.0">
    <label>Draw on Image

visualize features
on the example object</label>
    <description>Annotates an image with drawings based on tabular data.</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "circle"}, "blue color": {"description": "", "editor": null, "label": "", "order": 1, "type": "string", "value": "0.5"}, "alpha value": {"description": "", "editor": null, "label": "", "order": 2, "type": "string", "value": "1.0"}, "x": {"description": "", "editor": null, "label": "", "order": 3, "type": "string", "value": "X"}, "green color": {"description": "", "editor": null, "label": "", "order": 4, "type": "string", "value": "1.0"}, "y": {"description": "", "editor": null, "label": "", "order": 5, "type": "string", "value": "Y"}, "N": {"description": "", "editor": null, "label": "", "order": 6, "type": "string", "value": "N"}, "red color": {"description": "", "editor": null, "label": "", "order": 7, "type": "string", "value": "1.0"}, "radius": {"description": "", "editor": null, "label": "", "order": 8, "type": "string", "value": "5"}, "y2": {"description": "", "editor": null, "label": "", "order": 9, "type": "string", "value": "Y2"}, "x2": {"description": "", "editor": null, "label": "", "order": 10, "type": "string", "value": "X2"}}</parameters>
    <ports>
      <input key="image" scheme="hdf5" type="image" type_base="image" uuid="{8e186f01-1c1f-4c1e-aa59-51a4339cd656}">
        <label>Image to draw on</label>
        <description>Image to draw on</description>
      </input>
      <input key="table" scheme="hdf5" type="table" type_base="table" uuid="{76cb000a-9a0f-4f31-be24-7b6704e109c3}">
        <label>Table used for drawing</label>
        <description>Table used for drawing</description>
      </input>
      <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{c3100202-fe3f-4680-9791-839b3a103f9c}">
        <label>Resulting image</label>
        <description>Resulting image</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.builtin.map" uuid="{36eb0364-9844-492d-a9d0-32bc5412487f}" x="3225.0" y="2050.0">
    <label>Map</label>
    <description>Map Lambda function over each element in argument list</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015-2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "fail_strategy": {"description": "Decide how failure to process an item should be handled.", "label": "Action on exception", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["Error", "Create Empty Item", "Skip Item"], "value": [0], "value_names": [], "editor": {"display": null, "include_empty": false, "type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="Function" scheme="hdf5" type="image -&gt; (table, image)" type_base="&lt;a&gt; -&gt; &lt;b&gt;" uuid="{789226e2-95fd-439f-9ce4-6c4ef1a0812c}">
        <label>Lambda Function to Map</label>
        <description>Lambda Function to Map</description>
      </input>
      <input key="List" scheme="hdf5" type="[image]" type_base="[&lt;a&gt;]" uuid="{fad3d186-c62c-41ef-a4df-6df6154112fa}">
        <label>Argument List</label>
        <description>Argument List</description>
      </input>
      <output key="List" scheme="hdf5" type="[(table, image)]" type_base="[&lt;b&gt;]" uuid="{57d817bb-1e19-4674-95af-e10efd711b41}">
        <label>Output List</label>
        <description>Output List</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.isolation_forest" uuid="{37798479-dd60-4c64-a8b6-9cc56190fc72}" x="2150.0" y="1525.0">
    <label>Isolation Forest</label>
    <description>Predicts outliers based on minimum path length of random trees with single nodes in the leafs.</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "max_features": {"description": "The number of features to draw from X to train each base estimator.\n\n    - If int, then draw `max_features` features.\n    - If float, then draw `max_features * X.shape` features.\n", "editor": null, "label": "max_features", "order": 0, "type": "string", "value": "1.0"}, "random_state": {"description": "If int, random_state is the seed used by the random number generator;\nIf RandomState instance, random_state is the random number generator;\nIf None, the random number generator is the RandomState instance used\nby `np.random`.\n", "editor": null, "label": "random_state", "order": 1, "type": "string", "value": "None"}, "n_jobs": {"description": "The number of jobs to run in parallel for both `fit` and `predict`.\nIf -1, then the number of jobs is set to the number of cores.\n", "editor": null, "label": "n_jobs", "order": 2, "type": "string", "value": "1"}, "max_samples": {"description": "The number of samples to draw from X to train each base estimator  expressed as number of samples (int), or a fraction of all samples (float). If \"auto\" then a maximum of 256 samples will be used (less when fewer input samples given)", "editor": null, "label": "max_samples", "order": 3, "type": "string", "value": "auto"}, "bootstrap": {"description": "If True, individual trees are fit on random subsets of the training\ndata sampled with replacement. If False, sampling without replacement\nis performed.\n", "editor": null, "label": "bootstrap", "order": 4, "type": "string", "value": "False"}, "contamination": {"description": "The amount of contamination of the data set, i.e. the proportion\nof outliers in the data set. Used when fitting to define the threshold\non the decision function.\n", "editor": null, "label": "contamination", "order": 5, "type": "string", "value": ".1"}, "n_estimators": {"description": "The number of base estimators in the ensemble.\n", "editor": null, "label": "n_estimators", "order": 6, "type": "string", "value": "100"}}</parameters>
    <ports>
      <output key="model" scheme="hdf5" type="model" type_base="model" uuid="{18d0bb24-0267-4c3a-85be-3ec1b999d47c}">
        <label>Model</label>
        <description>Model</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.list.filterlistpredicate" uuid="{38dce1bd-c37c-4e6d-8a86-e6d5a80e0cf4}" x="3375.0" y="2050.0">
    <label>Filter List Predicate

all objects matching 
the example</label>
    <description>Filter a list using configured item based predicate.</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "predicate": {"description": "Filter function", "label": "Predicate filter function", "order": 0, "type": "string", "value": "lambda item: item[0].col('score').data[0] &gt; 5  # Identity filter", "editor": {"language": "python", "type": "code"}}}</parameters>
    <ports>
      <input key="list" scheme="hdf5" type="[(table, image)]" type_base="[&lt;a&gt;]" uuid="{906bc359-d793-4e4e-ad14-40d66c2eaf24}">
        <label>List</label>
        <description>List</description>
      </input>
      <output key="index" scheme="hdf5" type="table" type_base="table" uuid="{75e7dbc4-f86f-4590-9899-6cb577300884}">
        <label>Index</label>
        <description>Index</description>
      </output>
      <output key="list" scheme="hdf5" type="[(table, image)]" type_base="[&lt;a&gt;]" uuid="{2dafccb7-6b0c-4cd6-9fe8-872c0888468e}">
        <label>List</label>
        <description>List</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.selecttablecolumns" uuid="{420482e5-875c-4314-a988-7e1ab7560899}" x="2250.0" y="1800.0">
    <label>drop coords</label>
    <description>Select columns from input to propagate to output.</description>
    <author>Alexander Busck &lt;alexander.busck@combine.se&gt;, Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(c) 2013, 2017 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "columns": {"description": "Select columns.", "label": "Select columns", "mode": "unselected", "order": 0, "passthrough": false, "type": "list", "list": ["X", "Y", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", "f51", "f52", "f53", "f54", "f55", "f56", "f57", "f58", "f59", "f60", "f61", "f62", "f63", "f64", "f65", "f66", "f67", "f68", "f69", "f70", "f71", "f72", "f73", "f74", "f75", "f76", "f77", "f78", "f79", "f80", "f81", "f82", "f83", "f84", "f85", "f86", "f87", "f88", "f89", "f90", "f91", "f92", "f93", "f94", "f95", "f96", "f97", "f98", "f99", "f100", "f101", "f102", "f103", "f104", "f105", "f106", "f107", "f108", "f109", "f110", "f111", "f112", "f113", "f114", "f115", "f116", "f117", "f118", "f119", "f120", "f121", "f122", "f123", "f124", "f125", "f126", "f127", "f128", "f129", "f130", "f131", "f132", "f133", "f134", "f135", "f136", "f137", "f138", "f139", "f140", "f141", "f142", "f143", "f144", "f145", "f146", "f147", "f148", "f149", "f150", "f151", "f152", "f153", "f154", "f155", "f156", "f157", "f158", "f159", "f160", "f161", "f162", "f163", "f164", "f165", "f166", "f167", "f168", "f169", "f170", "f171", "f172", "f173", "f174", "f175", "f176", "f177", "f178", "f179", "f180", "f181", "f182", "f183", "f184", "f185", "f186", "f187", "f188", "f189", "f190", "f191", "f192", "f193", "f194", "f195", "f196", "f197", "f198", "f199", "f200", "f201", "f202", "f203", "f204", "f205", "f206", "f207", "f208", "f209", "f210", "f211", "f212", "f213", "f214", "f215", "f216", "f217", "f218", "f219", "f220", "f221", "f222", "f223", "f224", "f225", "f226", "f227", "f228", "f229", "f230", "f231", "f232", "f233", "f234", "f235", "f236", "f237", "f238", "f239", "f240", "f241", "f242", "f243", "f244", "f245", "f246", "f247", "f248", "f249", "f250", "f251", "f252", "f253", "f254", "f255"], "value": [0, 1], "value_names": ["X", "Y"], "editor": {"filter": true, "mode": true, "selection": "multi", "type": "listview"}}}</parameters>
    <ports>
      <input key="" scheme="hdf5" type="table" type_base="table" uuid="{97674f2c-702d-4483-bc61-aa9f521b1f4c}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <output key="" scheme="hdf5" type="table" type_base="table" uuid="{b95f81f6-f018-4f9d-b72b-d96f7ac651f3}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node id="syip.imagestatistics" uuid="{4f0d69cb-cb4c-45a2-8406-53a6d2bb0c20}" x="1675.0" y="1550.0">
    <label>Image Statistics:

Features from example object</label>
    <description>Extracts tabular data from an image using one of a selection of algorithms. The implemented filters are to a large extent based on `scikit-image`, but some filters are not from this package.</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "features, orb"}, "downscale": {"description": "", "editor": null, "label": "", "order": 1, "type": "float", "value": 1.2}, "line gap": {"description": "", "editor": null, "label": "", "order": 2, "type": "integer", "value": 10}, "orientations": {"description": "", "editor": null, "label": "", "order": 3, "type": "integer", "value": 8}, "fast n": {"description": "", "editor": null, "label": "", "order": 4, "type": "integer", "value": 9}, "max sigma": {"description": "", "editor": null, "label": "", "order": 5, "type": "float", "value": 50.0}, "step": {"description": "", "editor": null, "label": "", "order": 6, "type": "integer", "value": 1}, "line threshold": {"description": "", "editor": null, "label": "", "order": 7, "type": "float", "value": 10.0}, "max theta": {"description": "", "editor": null, "label": "", "order": 8, "type": "float", "value": 1.5707963267948966}, "radius": {"description": "", "editor": null, "label": "", "order": 9, "type": "integer", "value": 15}, "max value": {"description": "", "editor": null, "label": "", "order": 10, "type": "float", "value": 1.0}, "bins": {"description": "", "editor": null, "label": "", "order": 11, "type": "integer", "value": 256}, "num theta": {"description": "", "editor": null, "label": "", "order": 12, "type": "integer", "value": 100}, "threshold": {"description": "", "editor": null, "label": "", "order": 13, "type": "float", "value": 2.0}, "prefix": {"description": "", "editor": null, "label": "", "order": 14, "type": "string", "value": ""}, "min distance": {"description": "", "editor": null, "label": "", "order": 15, "type": "integer", "value": 1}, "line length": {"description": "", "editor": null, "label": "", "order": 16, "type": "integer", "value": 50}, "num sigma": {"description": "", "editor": null, "label": "", "order": 17, "type": "integer", "value": 10}, "non max threshold": {"description": "", "editor": null, "label": "", "order": 18, "type": "float", "value": 0.15}, "log scale": {"description": "", "editor": null, "label": "", "order": 19, "type": "boolean", "value": false}, "rings": {"description": "", "editor": null, "label": "", "order": 20, "type": "integer", "value": 3}, "censure mode": {"description": "", "editor": null, "label": "", "order": 21, "type": "string", "value": "DoB"}, "overlap": {"description": "", "editor": null, "label": "", "order": 22, "type": "float", "value": 0.5}, "min scale": {"description": "", "editor": null, "label": "", "order": 23, "type": "integer", "value": 1}, "harris k": {"description": "", "editor": null, "label": "", "order": 24, "type": "float", "value": 0.04}, "min theta": {"description": "", "editor": null, "label": "", "order": 25, "type": "float", "value": -1.5707963267948966}, "threshold relative": {"description": "", "editor": null, "label": "", "order": 26, "type": "float", "value": 0.0}, "max scale": {"description": "", "editor": null, "label": "", "order": 27, "type": "integer", "value": 7}, "N": {"description": "", "editor": null, "label": "", "order": 28, "type": "integer", "value": 1024}, "min sigma": {"description": "", "editor": null, "label": "", "order": 29, "type": "float", "value": 1.0}, "daisy normalization": {"description": "", "editor": null, "label": "", "order": 30, "type": "string", "value": "l1"}, "min value": {"description": "", "editor": null, "label": "", "order": 31, "type": "float", "value": 0.0}, "sigma_ratio": {"description": "", "editor": null, "label": "", "order": 32, "type": "float", "value": 1.6}, "histograms": {"description": "", "editor": null, "label": "", "order": 33, "type": "integer", "value": 8}, "fast threshold": {"description": "", "editor": null, "label": "", "order": 34, "type": "float", "value": 0.04}}</parameters>
    <ports>
      <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{2879c801-aff9-4386-b7d0-0817a1d1dc60}">
        <label>Image to extract statistics from</label>
        <description>Image to extract statistics from</description>
      </input>
      <output key="result" scheme="hdf5" type="table" type_base="table" uuid="{3b060c55-f654-45eb-b466-058e5809595c}">
        <label>Table with results</label>
        <description>Table with results</description>
      </output>
    </ports>
  </node>
  <node id="syip.imagestatistics" uuid="{6562411b-9f40-4669-9f49-5cb214b19c77}" x="1675.0" y="1800.0">
    <label>Image Statistics:

Extract features at all points in the image</label>
    <description>Extracts tabular data from an image using one of a selection of algorithms. The implemented filters are to a large extent based on `scikit-image`, but some filters are not from this package.</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "features, orb"}, "downscale": {"description": "", "editor": null, "label": "", "order": 1, "type": "float", "value": 1.2}, "line gap": {"description": "", "editor": null, "label": "", "order": 2, "type": "integer", "value": 10}, "orientations": {"description": "", "editor": null, "label": "", "order": 3, "type": "integer", "value": 8}, "fast n": {"description": "", "editor": null, "label": "", "order": 4, "type": "integer", "value": 9}, "max sigma": {"description": "", "editor": null, "label": "", "order": 5, "type": "float", "value": 50.0}, "step": {"description": "", "editor": null, "label": "", "order": 6, "type": "integer", "value": 1}, "line threshold": {"description": "", "editor": null, "label": "", "order": 7, "type": "float", "value": 10.0}, "max theta": {"description": "", "editor": null, "label": "", "order": 8, "type": "float", "value": 1.5707963267948966}, "radius": {"description": "", "editor": null, "label": "", "order": 9, "type": "integer", "value": 15}, "max value": {"description": "", "editor": null, "label": "", "order": 10, "type": "float", "value": 1.0}, "bins": {"description": "", "editor": null, "label": "", "order": 11, "type": "integer", "value": 256}, "num theta": {"description": "", "editor": null, "label": "", "order": 12, "type": "integer", "value": 100}, "threshold": {"description": "", "editor": null, "label": "", "order": 13, "type": "float", "value": 2.0}, "prefix": {"description": "", "editor": null, "label": "", "order": 14, "type": "string", "value": ""}, "min distance": {"description": "", "editor": null, "label": "", "order": 15, "type": "integer", "value": 1}, "line length": {"description": "", "editor": null, "label": "", "order": 16, "type": "integer", "value": 50}, "num sigma": {"description": "", "editor": null, "label": "", "order": 17, "type": "integer", "value": 10}, "non max threshold": {"description": "", "editor": null, "label": "", "order": 18, "type": "float", "value": 0.15}, "log scale": {"description": "", "editor": null, "label": "", "order": 19, "type": "boolean", "value": false}, "rings": {"description": "", "editor": null, "label": "", "order": 20, "type": "integer", "value": 3}, "censure mode": {"description": "", "editor": null, "label": "", "order": 21, "type": "string", "value": "DoB"}, "overlap": {"description": "", "editor": null, "label": "", "order": 22, "type": "float", "value": 0.5}, "min scale": {"description": "", "editor": null, "label": "", "order": 23, "type": "integer", "value": 1}, "harris k": {"description": "", "editor": null, "label": "", "order": 24, "type": "float", "value": 0.04}, "min theta": {"description": "", "editor": null, "label": "", "order": 25, "type": "float", "value": -1.5707963267948966}, "threshold relative": {"description": "", "editor": null, "label": "", "order": 26, "type": "float", "value": 0.0}, "max scale": {"description": "", "editor": null, "label": "", "order": 27, "type": "integer", "value": 7}, "N": {"description": "", "editor": null, "label": "", "order": 28, "type": "integer", "value": 1024}, "min sigma": {"description": "", "editor": null, "label": "", "order": 29, "type": "float", "value": 1.0}, "daisy normalization": {"description": "", "editor": null, "label": "", "order": 30, "type": "string", "value": "l1"}, "min value": {"description": "", "editor": null, "label": "", "order": 31, "type": "float", "value": 0.0}, "sigma_ratio": {"description": "", "editor": null, "label": "", "order": 32, "type": "float", "value": 1.6}, "histograms": {"description": "", "editor": null, "label": "", "order": 33, "type": "integer", "value": 8}, "fast threshold": {"description": "", "editor": null, "label": "", "order": 34, "type": "float", "value": 0.04}}</parameters>
    <ports>
      <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{b262c4d8-0e2e-4851-837c-59e1f1fcc302}">
        <label>Image to extract statistics from</label>
        <description>Image to extract statistics from</description>
      </input>
      <output key="result" scheme="hdf5" type="table" type_base="table" uuid="{fa1182b2-fc79-4846-b5d3-8cdba93d80ba}">
        <label>Table with results</label>
        <description>Table with results</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.calculatorgeneric" uuid="{790f177a-194d-423b-85c5-df89b65c8a71}" x="2575.0" y="1875.0">
    <label>Colour</label>
    <description>Performs user-defined python calculations</description>
    <author>Greger Cronquist &lt;greger.cronquist@combine.se&gt;, Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;, Sara Gustafzelius &lt;sara.gustafzelius@combine.se&gt;, Benedikt Ziegler &lt;benedikt.ziegler@combine.se&gt;</author>
    <copyright>(c) 2016 Combine Control Systems AB</copyright>
    <version>3.0</version>
    <parameters type="json">{"type": "group", "calc_list": {"description": "List of calculations.", "editor": null, "label": "List of calculations", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["col = np.where(arg.col('y0').data == 1, 1.0, 0.1) #ENABLED:1"], "value": [], "value_names": []}, "copy_input": {"description": "If enabled the incoming data will be copied to the output before running the calculations. This requires that the results will all have the same length. An exception will be raised if the lengths of the outgoing results differ.", "editor": null, "label": "Copy input", "order": 1, "type": "boolean", "value": true}, "fail_strategy": {"description": "Decide how a failed calculation should be handled", "label": "Action on calculation failure", "mode": "selected", "order": 2, "passthrough": false, "type": "list", "list": ["Exception", "Skip calculation"], "value": [0], "value_names": ["Exception"], "editor": {"display": null, "include_empty": false, "type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="port0" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{4d9377ff-083d-4db7-906e-04b40081b669}">
        <label>Generic Input</label>
        <description>Generic Input</description>
      </input>
      <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{623b016c-ab26-4262-9e3d-4324b90d9f65}">
        <label>Table with results from the calculations.</label>
        <description>Table with results from the calculations.</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.list.getitemlist" uuid="{7af8af5d-6391-4eaf-9f74-d38bdbb6455f}" x="2500.0" y="2000.0">
    <label>Get Item List</label>
    <description></description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "index": {"description": "Choose item index in list.", "label": "Index", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22"], "value": [5], "value_names": ["5"], "editor": {"display": null, "include_empty": false, "type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="list" scheme="hdf5" type="[image]" type_base="[&lt;a&gt;]" uuid="{c9bb97e5-647b-4bb5-82d3-982283ffdf4d}">
        <label>Input List</label>
        <description>Input List</description>
      </input>
      <output key="item" scheme="hdf5" type="image" type_base="&lt;a&gt;" uuid="{29b87c41-7b9f-4003-8245-2e2d8a31fec3}">
        <label>Output selected Item from List</label>
        <description>Output selected Item from List</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.selecttablerows" uuid="{83ccac7c-2eed-4097-871b-eeba03de7501}" x="2800.0" y="1850.0">
    <label>Select rows in Table

Keep only keypoints that
was matched by algorithm</label>
    <description>Reduction of rows in Table according to specified filter.</description>
    <author>Alexander Busck &lt;alexander.busck@combine.se&gt;</author>
    <copyright>(C) 2014 Combine Control Systems AB</copyright>
    <version>1.1</version>
    <parameters type="json">{"type": "group", "columns": {"description": "Select columns for comparison relation", "label": "Columns to filter", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["y0", "X", "Y", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", "f51", "f52", "f53", "f54", "f55", "f56", "f57", "f58", "f59", "f60", "f61", "f62", "f63", "f64", "f65", "f66", "f67", "f68", "f69", "f70", "f71", "f72", "f73", "f74", "f75", "f76", "f77", "f78", "f79", "f80", "f81", "f82", "f83", "f84", "f85", "f86", "f87", "f88", "f89", "f90", "f91", "f92", "f93", "f94", "f95", "f96", "f97", "f98", "f99", "f100", "f101", "f102", "f103", "f104", "f105", "f106", "f107", "f108", "f109", "f110", "f111", "f112", "f113", "f114", "f115", "f116", "f117", "f118", "f119", "f120", "f121", "f122", "f123", "f124", "f125", "f126", "f127", "f128", "f129", "f130", "f131", "f132", "f133", "f134", "f135", "f136", "f137", "f138", "f139", "f140", "f141", "f142", "f143", "f144", "f145", "f146", "f147", "f148", "f149", "f150", "f151", "f152", "f153", "f154", "f155", "f156", "f157", "f158", "f159", "f160", "f161", "f162", "f163", "f164", "f165", "f166", "f167", "f168", "f169", "f170", "f171", "f172", "f173", "f174", "f175", "f176", "f177", "f178", "f179", "f180", "f181", "f182", "f183", "f184", "f185", "f186", "f187", "f188", "f189", "f190", "f191", "f192", "f193", "f194", "f195", "f196", "f197", "f198", "f199", "f200", "f201", "f202", "f203", "f204", "f205", "f206", "f207", "f208", "f209", "f210", "f211", "f212", "f213", "f214", "f215", "f216", "f217", "f218", "f219", "f220", "f221", "f222", "f223", "f224", "f225", "f226", "f227", "f228", "f229", "f230", "f231", "f232", "f233", "f234", "f235", "f236", "f237", "f238", "f239", "f240", "f241", "f242", "f243", "f244", "f245", "f246", "f247", "f248", "f249", "f250", "f251", "f252", "f253", "f254", "f255", "col"], "value": [0], "value_names": ["y0"], "editor": {"filter": true, "mode": true, "selection": "multi", "type": "listview"}}, "exist": {"description": "Constraint must be satisfied in: Any selected column or All selected columns.", "label": "Constraint must be satisfied in", "order": 1, "type": "string", "value": "all", "editor": {"display": null, "include_empty": false, "type": "combobox", "options": ["all", "any"]}}, "relation": {"description": "Select comparison operator for relation", "label": "Relation", "mode": "selected", "order": 2, "passthrough": false, "type": "list", "list": ["equal", "less than", "less than or equal", "greater than", "greater than or equal", "not equal"], "value": [0], "value_names": ["equal"], "editor": {"display": null, "include_empty": false, "type": "combobox", "options": []}}, "constraint": {"description": "Specify constraint value for comparison relation", "editor": null, "label": "Filter constraint", "order": 3, "type": "string", "value": "1.0"}, "use_custom_predicate": {"description": "Select to use custom filter", "editor": null, "label": "Use custom filter", "order": 4, "type": "boolean", "value": false}, "predicate": {"description": "Write a custom filter as a Python lambda function", "editor": null, "label": "Custom filter", "order": 5, "type": "string", "value": "lambda x: x == 1.0"}, "limit": {"description": "Rows to display", "editor": null, "label": "Preview rows", "order": 6, "type": "integer", "value": 100}}</parameters>
    <ports>
      <input key="Input" scheme="hdf5" type="table" type_base="table" uuid="{dffe340d-d9db-496c-beee-dddaaa7714f1}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <output key="Output" scheme="hdf5" type="table" type_base="table" uuid="{bfb743c3-bd50-4682-b841-10ed46d75338}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node id="syip.color_space_conversion" uuid="{84d8e1ed-1390-462e-9d92-9bd7a2fa0be4}" x="1250.0" y="1700.0">
    <label>Color space conversion

Greyscale</label>
    <description>Converts each pixel in a multi-channel image into another colour space</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "greyscale"}, "luminance preserving": {"description": "", "editor": null, "label": "", "order": 1, "type": "boolean", "value": true}, "cmap": {"description": "", "editor": null, "label": "", "order": 2, "type": "string", "value": "viridis"}}</parameters>
    <ports>
      <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{da64c6b5-fa4d-459f-8ccb-60ec0cd1b7a8}">
        <label>source image to filter</label>
        <description>source image to filter</description>
      </input>
      <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{83868bba-d88e-467a-bb58-f3a18584b13a}">
        <label>result after filtering</label>
        <description>result after filtering</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.selecttablecolumns" uuid="{91e79b37-c921-4429-8967-38480a02b6a4}" x="2100.0" y="1625.0">
    <label>drop coords</label>
    <description>Select columns from input to propagate to output.</description>
    <author>Alexander Busck &lt;alexander.busck@combine.se&gt;, Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(c) 2013, 2017 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "columns": {"description": "Select columns.", "label": "Select columns", "mode": "unselected", "order": 0, "passthrough": false, "type": "list", "list": ["X", "Y", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", "f51", "f52", "f53", "f54", "f55", "f56", "f57", "f58", "f59", "f60", "f61", "f62", "f63", "f64", "f65", "f66", "f67", "f68", "f69", "f70", "f71", "f72", "f73", "f74", "f75", "f76", "f77", "f78", "f79", "f80", "f81", "f82", "f83", "f84", "f85", "f86", "f87", "f88", "f89", "f90", "f91", "f92", "f93", "f94", "f95", "f96", "f97", "f98", "f99", "f100", "f101", "f102", "f103", "f104", "f105", "f106", "f107", "f108", "f109", "f110", "f111", "f112", "f113", "f114", "f115", "f116", "f117", "f118", "f119", "f120", "f121", "f122", "f123", "f124", "f125", "f126", "f127", "f128", "f129", "f130", "f131", "f132", "f133", "f134", "f135", "f136", "f137", "f138", "f139", "f140", "f141", "f142", "f143", "f144", "f145", "f146", "f147", "f148", "f149", "f150", "f151", "f152", "f153", "f154", "f155", "f156", "f157", "f158", "f159", "f160", "f161", "f162", "f163", "f164", "f165", "f166", "f167", "f168", "f169", "f170", "f171", "f172", "f173", "f174", "f175", "f176", "f177", "f178", "f179", "f180", "f181", "f182", "f183", "f184", "f185", "f186", "f187", "f188", "f189", "f190", "f191", "f192", "f193", "f194", "f195", "f196", "f197", "f198", "f199", "f200", "f201", "f202", "f203", "f204", "f205", "f206", "f207", "f208", "f209", "f210", "f211", "f212", "f213", "f214", "f215", "f216", "f217", "f218", "f219", "f220", "f221", "f222", "f223", "f224", "f225", "f226", "f227", "f228", "f229", "f230", "f231", "f232", "f233", "f234", "f235", "f236", "f237", "f238", "f239", "f240", "f241", "f242", "f243", "f244", "f245", "f246", "f247", "f248", "f249", "f250", "f251", "f252", "f253", "f254", "f255"], "value": [0, 1], "value_names": ["X", "Y"], "editor": {"filter": true, "mode": true, "selection": "multi", "type": "listview"}}}</parameters>
    <ports>
      <input key="" scheme="hdf5" type="table" type_base="table" uuid="{b0dd0563-2851-4c24-b33f-293adb12a350}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <output key="" scheme="hdf5" type="table" type_base="table" uuid="{b7b74988-addc-49cd-ac30-48f02fd2c85d}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node id="syip.transform" uuid="{a6ad3ebe-aee7-4d9e-8ee4-60d9144bdb23}" x="1525.0" y="1425.0">
    <label>Transform image</label>
    <description>Transforms and image into another shape</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "crop"}, "interpolation degree": {"description": "", "editor": null, "label": "", "order": 1, "type": "integer", "value": 3}, "angle": {"description": "", "editor": null, "label": "", "order": 2, "type": "float", "value": 0.0}, "y": {"description": "", "editor": null, "label": "", "order": 3, "type": "integer", "value": 330}, "width": {"description": "", "editor": null, "label": "", "order": 4, "type": "integer", "value": 110}, "resize": {"description": "", "editor": null, "label": "", "order": 5, "type": "boolean", "value": true}, "k": {"description": "", "editor": null, "label": "", "order": 6, "type": "float", "value": 0.05}, "x": {"description": "", "editor": null, "label": "", "order": 7, "type": "integer", "value": 265}, "scale x": {"description": "", "editor": null, "label": "", "order": 8, "type": "float", "value": 1.0}, "height": {"description": "", "editor": null, "label": "", "order": 9, "type": "integer", "value": 75}, "add alpha": {"description": "", "editor": null, "label": "", "order": 10, "type": "boolean", "value": false}, "padding": {"description": "", "editor": null, "label": "", "order": 11, "type": "boolean", "value": false}, "scale y": {"description": "", "editor": null, "label": "", "order": 12, "type": "float", "value": 1.0}, "aspect": {"description": "", "editor": null, "label": "", "order": 13, "type": "boolean", "value": false}}</parameters>
    <ports>
      <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{f37b1bc2-0740-4eaa-997c-2c8bb8afb732}">
        <label>source image to filter</label>
        <description>source image to filter</description>
      </input>
      <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{e1622840-743d-4fa0-9685-0f81d6dee628}">
        <label>result after filtering</label>
        <description>result after filtering</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.predict" uuid="{cdbba069-f0be-4cba-8a7e-6c3566825053}" x="2350.0" y="1800.0">
    <label>Predict</label>
    <description>Uses a model to predict Y given X</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{bcc446e5-e12d-46d3-82f1-20b8b5896cca}">
        <label>Input model</label>
        <description>Input model</description>
      </input>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{e265becb-f6b1-44d9-9253-6b102b707268}">
        <label>X</label>
        <description>X</description>
      </input>
      <output key="Y" scheme="hdf5" type="table" type_base="table" uuid="{bd30412a-ae92-426b-a80f-4ef29cbfde11}">
        <label>Y</label>
        <description>Y</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.slice.slicelist" uuid="{d53832ec-711c-4e92-86cd-1abd16c1b754}" x="2500.0" y="2075.0">
    <label>Slice List

first object is background, ignore it</label>
    <description></description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "slice": {"description": "Use standard Python syntax to define pattern for slice operation, [start:stop:step]", "editor": null, "label": "Slice", "order": 0, "type": "string", "value": "[1:]"}, "limit": {"description": "Specify the maximum number of rows in the preview table", "editor": null, "label": "Limit preview to", "order": 1, "type": "integer", "value": 100}}</parameters>
    <ports>
      <input key="list" scheme="hdf5" type="[image]" type_base="[&lt;a&gt;]" uuid="{3690a949-b7f6-4949-9a93-e539695fffb5}">
        <label>Input List</label>
        <description>Input List</description>
      </input>
      <output key="list" scheme="hdf5" type="[image]" type_base="[&lt;a&gt;]" uuid="{532ff3f5-ba8e-41e6-a97e-a7d0fcbcb3c1}">
        <label>Sliced output List</label>
        <description>Sliced output List</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.builtin.apply" uuid="{dccc7f04-6873-4ce7-b0b2-987d4488cb98}" x="3125.0" y="1825.0">
    <label>Apply</label>
    <description>Apply Lambda function to Argument</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015-2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="Function" scheme="hdf5" type="table -&gt; image -&gt; (table, image)" type_base="&lt;a&gt; -&gt; &lt;b&gt;" uuid="{6c8e6507-d546-4048-b02b-bc205fa0e2bd}">
        <label>Lambda Function to Apply</label>
        <description>Lambda Function to Apply</description>
      </input>
      <input key="Argument" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{6842c640-97ef-4745-9ae2-ece09d654f9c}">
        <label>Argument</label>
        <description>Argument</description>
      </input>
      <output key="Output" scheme="hdf5" type="image -&gt; (table, image)" type_base="&lt;b&gt;" uuid="{c5482123-cce0-418d-91ad-7dd225013fc0}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.fit" port_format="1.1" uuid="{ea5ee6b3-5bf4-4a20-b7a7-1464ede6dbe0}" x="2225.0" y="1625.0">
    <label>Fit</label>
    <description>Trains a model. Use "Create Input Port &gt; Y" for supervised training</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{a126687c-01bf-4881-8bfe-7f31fef615e7}">
        <label>Input model</label>
        <description>Input model</description>
      </input>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{21496753-334e-48bd-aa40-3749ca8b19b6}">
        <label>X</label>
        <description>X</description>
      </input>
      <output key="out-model" scheme="hdf5" type="model" type_base="model" uuid="{71a27629-a422-4097-984f-f3970305c47e}">
        <label>Output model</label>
        <description>Output model</description>
      </output>
    </ports>
  </node>
  <node id="syip.imagedraw" uuid="{fb398364-11c6-4ae1-9a4d-9ec9736b2e66}" x="2675.0" y="1725.0">
    <label>Draw on Image</label>
    <description>Annotates an image with drawings based on tabular data.</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "circle"}, "x2": {"description": "", "editor": null, "label": "", "order": 1, "type": "string", "value": "X2"}, "red color": {"description": "", "editor": null, "label": "", "order": 2, "type": "string", "value": "col"}, "N": {"description": "", "editor": null, "label": "", "order": 3, "type": "string", "value": "N"}, "y2": {"description": "", "editor": null, "label": "", "order": 4, "type": "string", "value": "Y2"}, "x": {"description": "", "editor": null, "label": "", "order": 5, "type": "string", "value": "X"}, "blue color": {"description": "", "editor": null, "label": "", "order": 6, "type": "string", "value": "0.5"}, "green color": {"description": "", "editor": null, "label": "", "order": 7, "type": "string", "value": "1.0"}, "y": {"description": "", "editor": null, "label": "", "order": 8, "type": "string", "value": "Y"}, "alpha value": {"description": "", "editor": null, "label": "", "order": 9, "type": "string", "value": "col"}, "radius": {"description": "", "editor": null, "label": "", "order": 10, "type": "string", "value": "5"}}</parameters>
    <ports>
      <input key="image" scheme="hdf5" type="image" type_base="image" uuid="{0a061337-ca6d-4560-825c-bfd0290199f4}">
        <label>Image to draw on</label>
        <description>Image to draw on</description>
      </input>
      <input key="table" scheme="hdf5" type="table" type_base="table" uuid="{2a3083e8-25f2-4142-ada3-18c86aad0986}">
        <label>Table used for drawing</label>
        <description>Table used for drawing</description>
      </input>
      <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{e978e194-278b-4118-bb8c-b9f0dbd04bfa}">
        <label>Resulting image</label>
        <description>Resulting image</description>
      </output>
    </ports>
  </node>
  <connection type="table" uuid="{043ee3ce-8c8b-48fd-80e0-02be23336caf}">
    <source node="{4f0d69cb-cb4c-45a2-8406-53a6d2bb0c20}" port="{3b060c55-f654-45eb-b466-058e5809595c}"/>
    <destination node="{349117d9-7be7-4350-8c9f-e021a80a08ab}" port="{76cb000a-9a0f-4f31-be24-7b6704e109c3}"/>
  </connection>
  <connection type="table" uuid="{07ca1c85-0dac-4776-ae16-61f3a9a26866}">
    <source node="{cdbba069-f0be-4cba-8a7e-6c3566825053}" port="{bd30412a-ae92-426b-a80f-4ef29cbfde11}"/>
    <destination node="{1cdf3467-a1fb-4678-a0e2-029f1f3fe656}" port="{d1db6edd-5c58-45ee-a2a3-0554384e0204}"/>
  </connection>
  <connection type="[(table, image)]" uuid="{08942c3b-3010-49e2-b790-91025d4c33e0}">
    <source node="{36eb0364-9844-492d-a9d0-32bc5412487f}" port="{57d817bb-1e19-4674-95af-e10efd711b41}"/>
    <destination node="{38dce1bd-c37c-4e6d-8a86-e6d5a80e0cf4}" port="{906bc359-d793-4e4e-ad14-40d66c2eaf24}"/>
  </connection>
  <connection type="image" uuid="{145e8791-5be4-45d6-b326-af5c21a02225}">
    <source node="{a6ad3ebe-aee7-4d9e-8ee4-60d9144bdb23}" port="{e1622840-743d-4fa0-9685-0f81d6dee628}"/>
    <destination node="{349117d9-7be7-4350-8c9f-e021a80a08ab}" port="{8e186f01-1c1f-4c1e-aa59-51a4339cd656}"/>
  </connection>
  <connection type="table" uuid="{16b8da68-f289-4c9d-9177-6930fded77fc}">
    <source node="{790f177a-194d-423b-85c5-df89b65c8a71}" port="{623b016c-ab26-4262-9e3d-4324b90d9f65}"/>
    <destination node="{83ccac7c-2eed-4097-871b-eeba03de7501}" port="{dffe340d-d9db-496c-beee-dddaaa7714f1}"/>
  </connection>
  <connection type="image" uuid="{17c386a5-4e7c-4904-a597-df5d91ad961c}">
    <source node="{1ad2163a-66b5-4329-b134-ee3259f1380a}" port="{c7fbbe38-1dd4-4496-a967-e0685272581a}"/>
    <destination node="{84d8e1ed-1390-462e-9d92-9bd7a2fa0be4}" port="{da64c6b5-fa4d-459f-8ccb-60ec0cd1b7a8}"/>
  </connection>
  <connection type="image" uuid="{18a1f4b4-2ae5-49a3-8ab1-235b8863e260}">
    <source node="{84d8e1ed-1390-462e-9d92-9bd7a2fa0be4}" port="{83868bba-d88e-467a-bb58-f3a18584b13a}"/>
    <destination node="{fb398364-11c6-4ae1-9a4d-9ec9736b2e66}" port="{0a061337-ca6d-4560-825c-bfd0290199f4}"/>
  </connection>
  <connection type="[image]" uuid="{1ab728fa-5a2d-4d78-b53b-508dd7469c52}">
    <source node="{08da1d79-c22f-4012-97ab-c461a70474c0}" port="{697fe3d8-8e70-481c-8525-54ab0f93651f}"/>
    <destination node="{d53832ec-711c-4e92-86cd-1abd16c1b754}" port="{3690a949-b7f6-4949-9a93-e539695fffb5}"/>
  </connection>
  <connection type="model" uuid="{345e39d5-52a1-4088-8eeb-f67776c2d7d7}">
    <source node="{37798479-dd60-4c64-a8b6-9cc56190fc72}" port="{18d0bb24-0267-4c3a-85be-3ec1b999d47c}"/>
    <destination node="{ea5ee6b3-5bf4-4a20-b7a7-1464ede6dbe0}" port="{a126687c-01bf-4881-8bfe-7f31fef615e7}"/>
  </connection>
  <connection type="image -&gt; (table, image)" uuid="{4b6803fe-ed60-4f28-b223-a997b8d5cb2a}">
    <source node="{dccc7f04-6873-4ce7-b0b2-987d4488cb98}" port="{c5482123-cce0-418d-91ad-7dd225013fc0}"/>
    <destination node="{36eb0364-9844-492d-a9d0-32bc5412487f}" port="{789226e2-95fd-439f-9ce4-6c4ef1a0812c}"/>
  </connection>
  <connection type="table" uuid="{71da6ad8-8401-48b5-a8e7-363052f510fe}">
    <source node="{6562411b-9f40-4669-9f49-5cb214b19c77}" port="{fa1182b2-fc79-4846-b5d3-8cdba93d80ba}"/>
    <destination node="{420482e5-875c-4314-a988-7e1ab7560899}" port="{97674f2c-702d-4483-bc61-aa9f521b1f4c}"/>
  </connection>
  <connection type="model" uuid="{726b50cf-9f7e-4e8e-9430-1b6b4f8188b3}">
    <source node="{ea5ee6b3-5bf4-4a20-b7a7-1464ede6dbe0}" port="{71a27629-a422-4097-984f-f3970305c47e}"/>
    <destination node="{cdbba069-f0be-4cba-8a7e-6c3566825053}" port="{bcc446e5-e12d-46d3-82f1-20b8b5896cca}"/>
  </connection>
  <connection type="image" uuid="{72a2f782-a974-4848-8dfd-219a976ac4e8}">
    <source node="{7af8af5d-6391-4eaf-9f74-d38bdbb6455f}" port="{29b87c41-7b9f-4003-8245-2e2d8a31fec3}"/>
    <destination node="{0dc51f38-0ee0-4ae7-b8d9-c81dd526e5fb}" port="{d0ee96e6-4f0f-4fcf-855c-b30310381c1e}"/>
  </connection>
  <connection type="table" uuid="{8c56eff8-2f9b-4cc8-b0df-e08a9119d43e}">
    <source node="{83ccac7c-2eed-4097-871b-eeba03de7501}" port="{bfb743c3-bd50-4682-b841-10ed46d75338}"/>
    <destination node="{dccc7f04-6873-4ce7-b0b2-987d4488cb98}" port="{6842c640-97ef-4745-9ae2-ece09d654f9c}"/>
  </connection>
  <connection type="table" uuid="{9ed32529-9ac3-46d3-8c33-9fb0a34e96ca}">
    <source node="{4f0d69cb-cb4c-45a2-8406-53a6d2bb0c20}" port="{3b060c55-f654-45eb-b466-058e5809595c}"/>
    <destination node="{91e79b37-c921-4429-8967-38480a02b6a4}" port="{b0dd0563-2851-4c24-b33f-293adb12a350}"/>
  </connection>
  <connection type="table" uuid="{b5a7e769-64d3-4281-bde3-4a6c26420220}">
    <source node="{790f177a-194d-423b-85c5-df89b65c8a71}" port="{623b016c-ab26-4262-9e3d-4324b90d9f65}"/>
    <destination node="{fb398364-11c6-4ae1-9a4d-9ec9736b2e66}" port="{2a3083e8-25f2-4142-ada3-18c86aad0986}"/>
  </connection>
  <connection type="[image]" uuid="{bf73ac0f-731a-4889-ad7c-bab9964ccd72}">
    <source node="{08da1d79-c22f-4012-97ab-c461a70474c0}" port="{697fe3d8-8e70-481c-8525-54ab0f93651f}"/>
    <destination node="{7af8af5d-6391-4eaf-9f74-d38bdbb6455f}" port="{c9bb97e5-647b-4bb5-82d3-982283ffdf4d}"/>
  </connection>
  <connection type="[image]" uuid="{c04554a9-0786-4cb5-ad83-74f1810e4e55}">
    <source node="{d53832ec-711c-4e92-86cd-1abd16c1b754}" port="{532ff3f5-ba8e-41e6-a97e-a7d0fcbcb3c1}"/>
    <destination node="{36eb0364-9844-492d-a9d0-32bc5412487f}" port="{fad3d186-c62c-41ef-a4df-6df6154112fa}"/>
  </connection>
  <connection type="image" uuid="{cc755b3a-a820-4f61-a209-2ebd84538d9e}">
    <source node="{84d8e1ed-1390-462e-9d92-9bd7a2fa0be4}" port="{83868bba-d88e-467a-bb58-f3a18584b13a}"/>
    <destination node="{a6ad3ebe-aee7-4d9e-8ee4-60d9144bdb23}" port="{f37b1bc2-0740-4eaa-997c-2c8bb8afb732}"/>
  </connection>
  <connection type="image" uuid="{d10d8ad8-5659-424e-a296-74875e238fc8}">
    <source node="{84d8e1ed-1390-462e-9d92-9bd7a2fa0be4}" port="{83868bba-d88e-467a-bb58-f3a18584b13a}"/>
    <destination node="{08da1d79-c22f-4012-97ab-c461a70474c0}" port="{05b384ba-da0d-40ab-b862-cbaf80518483}"/>
  </connection>
  <connection type="table -&gt; image -&gt; (table, image)" uuid="{d26b66a8-bc6d-4022-a9f7-ad04f09add31}">
    <source node="{0dc51f38-0ee0-4ae7-b8d9-c81dd526e5fb}" port="{295e5978-a9aa-4214-9de6-8af39cbaf282}"/>
    <destination node="{dccc7f04-6873-4ce7-b0b2-987d4488cb98}" port="{6c8e6507-d546-4048-b02b-bc205fa0e2bd}"/>
  </connection>
  <connection type="image" uuid="{dc650673-3847-4298-aedd-64c36ba92f6a}">
    <source node="{a6ad3ebe-aee7-4d9e-8ee4-60d9144bdb23}" port="{e1622840-743d-4fa0-9685-0f81d6dee628}"/>
    <destination node="{4f0d69cb-cb4c-45a2-8406-53a6d2bb0c20}" port="{2879c801-aff9-4386-b7d0-0817a1d1dc60}"/>
  </connection>
  <connection type="table" uuid="{e3df5493-1402-417e-9366-c7ac28155169}">
    <source node="{420482e5-875c-4314-a988-7e1ab7560899}" port="{b95f81f6-f018-4f9d-b72b-d96f7ac651f3}"/>
    <destination node="{cdbba069-f0be-4cba-8a7e-6c3566825053}" port="{e265becb-f6b1-44d9-9253-6b102b707268}"/>
  </connection>
  <connection type="table" uuid="{f5dc9518-b4d8-4440-9bd9-2f73bae8eaba}">
    <source node="{83ccac7c-2eed-4097-871b-eeba03de7501}" port="{bfb743c3-bd50-4682-b841-10ed46d75338}"/>
    <destination node="{0dc51f38-0ee0-4ae7-b8d9-c81dd526e5fb}" port="{0114d220-9bca-4588-a73b-3a18e33b1780}"/>
  </connection>
  <connection type="image" uuid="{f68b2d6c-a5b4-429d-bad2-5b085a3eb356}">
    <source node="{84d8e1ed-1390-462e-9d92-9bd7a2fa0be4}" port="{83868bba-d88e-467a-bb58-f3a18584b13a}"/>
    <destination node="{6562411b-9f40-4669-9f49-5cb214b19c77}" port="{b262c4d8-0e2e-4851-837c-59e1f1fcc302}"/>
  </connection>
  <connection type="table" uuid="{fb77c4a6-7810-495f-b655-c0cd19ef275c}">
    <source node="{1cdf3467-a1fb-4678-a0e2-029f1f3fe656}" port="{c2c9b5db-6998-4d34-bbb4-94c5cfadd864}"/>
    <destination node="{790f177a-194d-423b-85c5-df89b65c8a71}" port="{4d9377ff-083d-4db7-906e-04b40081b669}"/>
  </connection>
  <connection type="table" uuid="{fd9c636d-c6f8-4b77-a808-dc11d0cde1af}">
    <source node="{6562411b-9f40-4669-9f49-5cb214b19c77}" port="{fa1182b2-fc79-4846-b5d3-8cdba93d80ba}"/>
    <destination node="{1cdf3467-a1fb-4678-a0e2-029f1f3fe656}" port="{8f370e78-a5e2-41f3-8377-5e74ee1e5b72}"/>
  </connection>
  <connection type="table" uuid="{fe768fe4-a0ba-4550-bae7-9543a92f6311}">
    <source node="{91e79b37-c921-4429-8967-38480a02b6a4}" port="{b7b74988-addc-49cd-ac30-48f02fd2c85d}"/>
    <destination node="{ea5ee6b3-5bf4-4a20-b7a7-1464ede6dbe0}" port="{21496753-334e-48bd-aa40-3749ca8b19b6}"/>
  </connection>
  <text color="Beige" height="75.0" uuid="{e08c03b7-fbb8-4061-b841-ae84dbec41b4}" width="400.0" x="1450.0" y="2150.0">Subflow that generates a list of images, where each image is a bitmask corresponding to one "object", as given by thresholding and labelling</text>
  <text color="Beige" height="250.0" uuid="{b48c0536-a9f0-4649-9d86-13fd24c9ca96}" width="800.0" x="1025.0" y="1050.0">Example using feature extraction to recognize one specific type of objects (candy-cars) in an image with 3 types of objects (cars, white, and black go-stones). 

Features are large opaque 200 dimensional vectors extracted around "interesting" points such that:
   - For a given point on an object, if the object is rotated we still get a vector that is geometrically close to the original
   - If the object changes size (camera moves closer) then we still get a geometrically close vector 
   - If the lighting changes, we still get a close vector

The "interesting" points are in this case part of the feature extraction algorithm, but can be loosely said to correspond to corners in the object. 

A single object can have many feature vectors, some which are only visible in some camera angles. </text>
  <text color="Beige" height="350.0" uuid="{95c85e99-dfcf-44e5-8c75-a47748448ffe}" width="375.0" x="2025.0" y="1375.0">Train a one-class clustering algorithm to recognize features similar to the example features.

Note: this is a very weak form of machine learning. Normally more examples and other methods would be used to get reliability higher. </text>
  <text color="Beige" height="175.0" uuid="{8d63e5a9-52f7-4673-ae8d-a3ed98bbbaae}" width="225.0" x="2500.0" y="1525.0">Visualization of all features (dark circles) and the features that matches the example features (white circles)

Note a few false positives. This is normal and dealt with in the next step</text>
  <text color="Beige" height="325.0" uuid="{1448edc3-e362-475e-a48f-69d9de4f24c2}" width="250.0" x="3325.0" y="1875.0">Last step keeps only those object that had atleast 5 matched keypoints inside them. This eliminates false positives. </text>
</flow>
