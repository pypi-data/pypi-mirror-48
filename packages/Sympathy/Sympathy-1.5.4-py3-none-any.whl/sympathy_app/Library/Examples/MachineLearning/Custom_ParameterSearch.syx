<?xml version='1.0' encoding='US-ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" height="50.0" uuid="{e99a1919-ad2e-42cb-b921-32c148cab285}" width="50.0" x="0.0" y="0.0" id="">
  <label></label>
  <description></description>
  <author></author>
  <copyright></copyright>
  <version></version>
  <min_version></min_version>
  <icon/>
  <aggregation type="json">null</aggregation>
  <libraries type="json">[]</libraries>
  <pythonpaths type="json">[]</pythonpaths>
  <parameters type="json">{}</parameters>
  <ports/>
  <flow cls="Lambda" height="50.0" uuid="{35098533-6bf5-4d47-9b9b-76c490889286}" width="50.0" x="1875.0" y="1775.0" id="">
    <label>evaluate one
hyper-parameter</label>
    <description></description>
    <author></author>
    <copyright></copyright>
    <version></version>
    <min_version></min_version>
    <icon/>
    <aggregation type="json">null</aggregation>
    <libraries type="json">[]</libraries>
    <pythonpaths type="json">[]</pythonpaths>
    <parameters type="json">{}</parameters>
    <ports>
      <input index="0" key="Port" optional="False" parent="True" scheme="hdf5" type="model" uuid="{80078601-6bf6-4812-bb8c-f7c8674e5208}" x="1725.0" y="1875.0">
        <label>Port</label>
        <description>Port</description>
      </input>
      <input index="1" key="Port" optional="False" parent="False" scheme="hdf5" type="(table, table)" uuid="{28ddc6e7-0a6f-4328-96d0-dc34ce711825}" x="1725.0" y="2025.0">
        <label>Port</label>
        <description>Port</description>
      </input>
      <input index="2" key="Port" optional="False" parent="False" scheme="hdf5" type="table" uuid="{dc55d69a-a471-413b-b3b9-5afd22f23f17}" x="1725.0" y="2150.0">
        <label>Port</label>
        <description>Port</description>
      </input>
      <output index="0" key="Port" optional="False" parent="False" scheme="hdf5" type="table" uuid="{836a28b5-fa9a-4401-affd-e3560d96e67b}" x="2450.0" y="2125.0">
        <label>Port</label>
        <description>Port</description>
      </output>
    </ports>
    <basic_ports>
      <output key="Function" scheme="hdf5" type="model -&gt; (table, table) -&gt; table -&gt; table" type_base="&lt;a&gt;" uuid="{65f0d21d-73b6-4501-b486-448d210fccdb}">
        <label>Lambda function</label>
        <description>Lambda function</description>
      </output>
    </basic_ports>
    <node id="org.sysess.sympathy.data.table.hjointable" uuid="{52f08e6b-1996-466a-83f8-ba36d05b5324}" x="2325.0" y="2125.0">
      <label>HJoin Table</label>
      <description>Horizontal join of two Tables</description>
      <author>Alexander Busck &lt;alexander.busck@combine.se&gt;</author>
      <copyright>(C) 2013 Combine Control Systems AB</copyright>
      <version>1.1</version>
      <parameters type="json">{"type": "group", "mask": {"description": "Select if columns that are not represented in all Tables should be complemented with masked values", "editor": null, "label": "Complement missing rows", "order": 0, "type": "boolean", "value": true}, "name": {"description": "Select which port decides the output table(s) names", "label": "Input port name for joined table", "mode": "selected", "order": 1, "passthrough": false, "type": "list", "list": ["Lower", "Upper"], "value": [0], "value_names": [], "editor": {"type": "combobox", "options": []}}}</parameters>
      <ports>
        <input key="port1" scheme="hdf5" type="table" type_base="table" uuid="{e8767a75-7112-4fd1-a7bd-f355c1359c82}">
          <label>Input Table 1</label>
          <description>Input Table 1</description>
        </input>
        <input key="port2" scheme="hdf5" type="table" type_base="table" uuid="{3367265f-8235-4758-acab-8f124a3a843e}">
          <label>Input Table 2</label>
          <description>Input Table 2</description>
        </input>
        <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{bc280be3-1aa5-42d6-98a9-b829dd04435b}">
          <label>Table with horizontally joined data</label>
          <description>Table with horizontally joined data</description>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.tuple.untuple2" uuid="{55629b75-1812-4208-9f14-1c855f4a4f4a}" x="1850.0" y="2025.0">
      <label>Untuple</label>
      <description></description>
      <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>1.0</version>
      <parameters type="json">{"type": "group"}</parameters>
      <ports>
        <input key="input" scheme="hdf5" type="(table, table)" type_base="(&lt;a&gt;, &lt;b&gt;)" uuid="{8fd663cd-4017-4b2f-98e2-130bc1ff7ef2}">
          <label>Input</label>
          <description>Input</description>
        </input>
        <output key="output" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{eab3c97e-8da7-4077-a713-d0bb2c5f6625}">
          <label>Output</label>
          <description>Output</description>
        </output>
        <output key="output" scheme="hdf5" type="table" type_base="&lt;b&gt;" uuid="{a953da60-444f-4ee3-b2a6-bff66fcb95e1}">
          <label>Output</label>
          <description>Output</description>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.machinelearning.fit" uuid="{9157ce88-80b3-4ae2-b9c6-bfd1dfc4105b}" x="2100.0" y="1925.0">
      <label>Fit</label>
      <description>Trains a model. Use "Create Input Port &gt; Y" for supervised training</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group"}</parameters>
      <ports>
        <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{5134004e-d4c7-4790-b6ea-7ecc9899992c}">
          <label>Input model</label>
          <description>Input model</description>
        </input>
        <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{dfa9b762-0215-4b11-8714-49a085f1d98e}">
          <label>X</label>
          <description>X</description>
        </input>
        <input key="Y0" scheme="hdf5" type="table" type_base="table" uuid="{36cdb5a7-9459-43aa-ae78-820841f368d3}">
          <label>Y</label>
          <description>Y</description>
        </input>
        <output key="out-model" scheme="hdf5" type="model" type_base="model" uuid="{57d8e28b-6fef-4cf6-be8e-a394386d60c5}">
          <label>Output model</label>
          <description>Output model</description>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.machinelearning.score" uuid="{997f5a72-a149-4e01-8ce9-034200ab468a}" x="2200.0" y="2025.0">
      <label>Score</label>
      <description>Scores the model using given X and Y data. Exact semantics
depends on the type of model (classifier, regressor, etc).</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group"}</parameters>
      <ports>
        <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{46c8df0c-4cec-4e81-b92c-6c7fe86ca5a4}">
          <label>Input model</label>
          <description>Input model</description>
        </input>
        <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{2c397d59-dbb7-41c9-b7c4-75cc1e9fa24d}">
          <label>X</label>
          <description>X</description>
        </input>
        <input key="Y" scheme="hdf5" type="table" type_base="table" uuid="{a577e944-3891-48f9-9e52-2f9cb8d3c233}">
          <label>Y</label>
          <description>Y</description>
        </input>
        <output key="Score" scheme="hdf5" type="table" type_base="table" uuid="{18f999f0-f6c8-4eec-aef0-141a79378c8c}">
          <label>Score</label>
          <description>Score</description>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.machinelearning.set_parameters" uuid="{a719fca5-ea5f-47db-9b91-071319dadb02}" x="1850.0" y="1925.0">
      <label>Set Parameters</label>
      <description>Sets the model hyper parameters based on table data</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "copy_through": {"description": "Keeps the model parameters that are not overwritten by the inputtable. Otherwise default values are used.", "editor": null, "label": "Copy model parameters", "order": 0, "type": "boolean", "value": true}}</parameters>
      <ports>
        <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{be39ef00-05d9-4e0a-86b9-f67da4dc317e}">
          <label>Input model</label>
          <description>Input model</description>
        </input>
        <input key="parameters" scheme="hdf5" type="table" type_base="table" uuid="{6f203034-50d9-4926-9a34-31e3a47a0979}">
          <label>Parameters</label>
          <description>Parameters</description>
        </input>
        <output key="out-model" scheme="hdf5" type="model" type_base="model" uuid="{82ee9a8c-a906-4d69-9b6a-eda2763f240a}">
          <label>Output model</label>
          <description>Output model</description>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.machinelearning.simple_split" uuid="{b9053f59-badd-4d90-a817-3f430c4fa794}" x="1975.0" y="2025.0">
      <label>Simple train-test partitioning</label>
      <description>Splits input data into a training and a test dataset</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "test_size": {"description": "Size of test data as fraction (&lt; 1) of all data", "editor": null, "label": "Test size", "order": 0, "type": "float", "value": 0.25}, "stratify": {"description": "Stratify data using Y as class labels", "editor": null, "label": "Stratify", "order": 1, "type": "boolean", "value": false}}</parameters>
      <ports>
        <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{ced8038a-7350-4e2e-ade8-ad9c5f442a55}">
          <label>X</label>
          <description>X</description>
        </input>
        <input key="Y" scheme="hdf5" type="table" type_base="table" uuid="{3bc0515e-1eac-4995-ae8d-247ccf34e890}">
          <label>Y</label>
          <description>Y</description>
        </input>
        <output key="X_train" scheme="hdf5" type="table" type_base="table" uuid="{ddff8021-4885-4791-a073-4b945266540e}">
          <label>X_train</label>
          <description>X_train</description>
        </output>
        <output key="Y_train" scheme="hdf5" type="table" type_base="table" uuid="{6aa3ff3a-6dba-4f08-8e9f-3f95a5c58d74}">
          <label>Y_train</label>
          <description>Y_train</description>
        </output>
        <output key="X_test" scheme="hdf5" type="table" type_base="table" uuid="{d2a9a272-6694-46df-a5d8-6b6a155a5a45}">
          <label>X_test</label>
          <description>X_test</description>
        </output>
        <output key="Y_test" scheme="hdf5" type="table" type_base="table" uuid="{234358e9-a04e-4692-ab4b-cba8301b45c7}">
          <label>Y_test</label>
          <description>Y_test</description>
        </output>
      </ports>
    </node>
    <connection type="table" uuid="{189ebd6f-9ce8-40e3-b4d6-bb1443937772}">
      <source node="{b9053f59-badd-4d90-a817-3f430c4fa794}" port="{ddff8021-4885-4791-a073-4b945266540e}"/>
      <destination node="{9157ce88-80b3-4ae2-b9c6-bfd1dfc4105b}" port="{dfa9b762-0215-4b11-8714-49a085f1d98e}"/>
    </connection>
    <connection type="table" uuid="{2c092157-398f-43ff-ab6a-e3204b99afce}">
      <source node="{35098533-6bf5-4d47-9b9b-76c490889286}" port="{dc55d69a-a471-413b-b3b9-5afd22f23f17}"/>
      <destination node="{a719fca5-ea5f-47db-9b91-071319dadb02}" port="{6f203034-50d9-4926-9a34-31e3a47a0979}"/>
    </connection>
    <connection type="model" uuid="{37b54a84-82e8-4e00-97d6-6b395e17cc3e}">
      <source node="{35098533-6bf5-4d47-9b9b-76c490889286}" port="{80078601-6bf6-4812-bb8c-f7c8674e5208}"/>
      <destination node="{a719fca5-ea5f-47db-9b91-071319dadb02}" port="{be39ef00-05d9-4e0a-86b9-f67da4dc317e}"/>
    </connection>
    <connection type="(table, table)" uuid="{5910be72-01e9-4e6d-8f58-24b576f0d9f8}">
      <source node="{35098533-6bf5-4d47-9b9b-76c490889286}" port="{28ddc6e7-0a6f-4328-96d0-dc34ce711825}"/>
      <destination node="{55629b75-1812-4208-9f14-1c855f4a4f4a}" port="{8fd663cd-4017-4b2f-98e2-130bc1ff7ef2}"/>
    </connection>
    <connection type="table" uuid="{6a062677-f611-4543-a9ef-d81a0119ebec}">
      <source node="{b9053f59-badd-4d90-a817-3f430c4fa794}" port="{234358e9-a04e-4692-ab4b-cba8301b45c7}"/>
      <destination node="{997f5a72-a149-4e01-8ce9-034200ab468a}" port="{a577e944-3891-48f9-9e52-2f9cb8d3c233}"/>
    </connection>
    <connection type="model" uuid="{6c390b3c-583d-4ae6-bf5b-2c89b5521153}">
      <source node="{a719fca5-ea5f-47db-9b91-071319dadb02}" port="{82ee9a8c-a906-4d69-9b6a-eda2763f240a}"/>
      <destination node="{9157ce88-80b3-4ae2-b9c6-bfd1dfc4105b}" port="{5134004e-d4c7-4790-b6ea-7ecc9899992c}"/>
    </connection>
    <connection type="table" uuid="{898f3bb4-b7a4-4e5c-a895-7029609b7714}">
      <source node="{b9053f59-badd-4d90-a817-3f430c4fa794}" port="{d2a9a272-6694-46df-a5d8-6b6a155a5a45}"/>
      <destination node="{997f5a72-a149-4e01-8ce9-034200ab468a}" port="{2c397d59-dbb7-41c9-b7c4-75cc1e9fa24d}"/>
    </connection>
    <connection type="table" uuid="{96b4fea4-f031-4226-b8ec-3ebd08003e3c}">
      <source node="{b9053f59-badd-4d90-a817-3f430c4fa794}" port="{6aa3ff3a-6dba-4f08-8e9f-3f95a5c58d74}"/>
      <destination node="{9157ce88-80b3-4ae2-b9c6-bfd1dfc4105b}" port="{36cdb5a7-9459-43aa-ae78-820841f368d3}"/>
    </connection>
    <connection type="table" uuid="{b0d1e8c2-2853-40bf-a74e-8b2fb0214df3}">
      <source node="{35098533-6bf5-4d47-9b9b-76c490889286}" port="{dc55d69a-a471-413b-b3b9-5afd22f23f17}"/>
      <destination node="{52f08e6b-1996-466a-83f8-ba36d05b5324}" port="{3367265f-8235-4758-acab-8f124a3a843e}"/>
    </connection>
    <connection type="table" uuid="{b392cc65-4b33-4780-80a0-fbe7d2f6b008}">
      <source node="{55629b75-1812-4208-9f14-1c855f4a4f4a}" port="{a953da60-444f-4ee3-b2a6-bff66fcb95e1}"/>
      <destination node="{b9053f59-badd-4d90-a817-3f430c4fa794}" port="{3bc0515e-1eac-4995-ae8d-247ccf34e890}"/>
    </connection>
    <connection type="table" uuid="{bc11612f-4c0e-4d2b-8112-43c06de79acb}">
      <source node="{997f5a72-a149-4e01-8ce9-034200ab468a}" port="{18f999f0-f6c8-4eec-aef0-141a79378c8c}"/>
      <destination node="{52f08e6b-1996-466a-83f8-ba36d05b5324}" port="{e8767a75-7112-4fd1-a7bd-f355c1359c82}"/>
    </connection>
    <connection type="table" uuid="{d81665f8-e308-43e1-bfc4-ee021a7e7556}">
      <source node="{55629b75-1812-4208-9f14-1c855f4a4f4a}" port="{eab3c97e-8da7-4077-a713-d0bb2c5f6625}"/>
      <destination node="{b9053f59-badd-4d90-a817-3f430c4fa794}" port="{ced8038a-7350-4e2e-ade8-ad9c5f442a55}"/>
    </connection>
    <connection type="table" uuid="{df96c0a8-c114-4107-8338-8e9a37250d5b}">
      <source node="{52f08e6b-1996-466a-83f8-ba36d05b5324}" port="{bc280be3-1aa5-42d6-98a9-b829dd04435b}"/>
      <destination node="{35098533-6bf5-4d47-9b9b-76c490889286}" port="{836a28b5-fa9a-4401-affd-e3560d96e67b}"/>
    </connection>
    <connection type="model" uuid="{ee994462-9bd5-4013-ab41-375b172a0bea}">
      <source node="{9157ce88-80b3-4ae2-b9c6-bfd1dfc4105b}" port="{57d8e28b-6fef-4cf6-be8e-a394386d60c5}"/>
      <destination node="{997f5a72-a149-4e01-8ce9-034200ab468a}" port="{46c8df0c-4cec-4e81-b92c-6c7fe86ca5a4}"/>
    </connection>
    <text color="Beige" height="75.0" uuid="{3f4b1467-d9a9-46e2-b89b-5f3b747adb4f}" width="225.0" x="1850.0" y="1825.0">Model parameters updated for parameter case</text>
    <text color="Beige" height="50.0" uuid="{b6afd668-f49c-4e6c-bdb8-c85414c880e2}" width="100.0" x="1700.0" y="1825.0">Model</text>
    <text color="Beige" height="50.0" uuid="{fa782a96-3ce4-421d-839d-b39deea09cff}" width="125.0" x="1700.0" y="2100.0">Parameters</text>
    <text color="Beige" height="50.0" uuid="{fcdea48c-eb16-4e6b-878b-bb65a63fc804}" width="100.0" x="1700.0" y="1975.0">X, Y data</text>
  </flow>
  <node id="org.sysess.sympathy.machinelearning.mlp__classifier" uuid="{0d0d86f5-123e-496e-a35e-74dd99b1bcde}" x="1400.0" y="1850.0">
    <label>Multi-layer Perceptron Classifier</label>
    <description>Multi-layer perceptron classifier</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "beta_1": {"description": "Exponential decay rate for estimates of first moment vector in adam,\nshould be in [0, 1). Only used when solver='adam'\n", "editor": null, "label": "beta_1", "order": 0, "type": "string", "value": "0.9"}, "warm_start": {"description": "When set to True, reuse the solution of the previous\ncall to fit as initialization, otherwise, just erase the\nprevious solution.\n", "editor": null, "label": "warm_start", "order": 1, "type": "string", "value": "False"}, "beta_2": {"description": "Exponential decay rate for estimates of second moment vector in adam,\nshould be in [0, 1). Only used when solver='adam'\n", "editor": null, "label": "beta_2", "order": 2, "type": "string", "value": "0.999"}, "shuffle": {"description": "Whether to shuffle samples in each iteration. Only used when\nsolver='sgd' or 'adam'.\n", "editor": null, "label": "shuffle", "order": 3, "type": "string", "value": "True"}, "nesterovs_momentum": {"description": "Whether to use Nesterov's momentum. Only used when solver='sgd' and\nmomentum &gt; 0.\n", "editor": null, "label": "nesterovs_momentum", "order": 4, "type": "string", "value": "True"}, "solver": {"description": "The solver for weight optimization.\n\n- 'lbfgs' is an optimizer in the family of quasi-Newton methods.\n\n- 'sgd' refers to stochastic gradient descent.\n\n- 'adam' refers to a stochastic gradient-based optimizer proposed\n  by Kingma, Diederik, and Jimmy Ba\n\nNote: The default solver 'adam' works pretty well on relatively\nlarge datasets (with thousands of training samples or more) in terms of\nboth training time and validation score.\nFor small datasets, however, 'lbfgs' can converge faster and perform\nbetter.\n", "editor": null, "label": "solver", "order": 5, "type": "string", "value": "adam"}, "validation_fraction": {"description": "The proportion of training data to set aside as validation set for\nearly stopping. Must be between 0 and 1.\nOnly used if early_stopping is True\n", "editor": null, "label": "validation_fraction", "order": 6, "type": "string", "value": "0.1"}, "activation": {"description": "Activation function for the hidden layer.\n\n- 'identity', no-op activation, useful to implement linear bottleneck,\n  returns f(x) = x\n\n- 'logistic', the logistic sigmoid function,\n  returns f(x) = 1 / (1 + exp(-x)).\n\n- 'tanh', the hyperbolic tan function,\n  returns f(x) = tanh(x).\n\n- 'relu', the rectified linear unit function,\n  returns f(x) = max(0, x)\n", "editor": null, "label": "activation", "order": 7, "type": "string", "value": "relu"}, "max_iter": {"description": "Maximum number of iterations. The solver iterates until convergence\n(determined by 'tol') or this number of iterations.\n", "editor": null, "label": "max_iter", "order": 8, "type": "string", "value": "10"}, "batch_size": {"description": "Size of minibatches for stochastic optimizers.\nIf the solver is 'lbfgs', the classifier will not use minibatch.\nWhen set to \"auto\", `batch_size=min(200, n_samples)`\n", "editor": null, "label": "batch_size", "order": 9, "type": "string", "value": "auto"}, "power_t": {"description": "The exponent for inverse scaling learning rate.\nIt is used in updating effective learning rate when the learning_rate\nis set to 'invscaling'. Only used when solver='sgd'.\n", "editor": null, "label": "power_t", "order": 10, "type": "string", "value": "0.5"}, "random_state": {"description": "State or seed for random number generator.\n", "editor": null, "label": "random_state", "order": 11, "type": "string", "value": "None"}, "learning_rate_init": {"description": "The initial learning rate used. It controls the step-size\nin updating the weights. Only used when solver='sgd' or 'adam'.\n", "editor": null, "label": "learning_rate_init", "order": 12, "type": "string", "value": "0.001"}, "tol": {"description": "Tolerance for the optimization. When the loss or score is not improving\nby at least tol for two consecutive iterations, unless `learning_rate`\nis set to 'adaptive', convergence is considered to be reached and\ntraining stops.\n", "editor": null, "label": "tol", "order": 13, "type": "string", "value": "0.0001"}, "epsilon": {"description": "Value for numerical stability in adam. Only used when solver='adam'\n", "editor": null, "label": "epsilon", "order": 14, "type": "string", "value": "1e-08"}, "alpha": {"description": "L2 penalty (regularization term) parameter.\n", "editor": null, "label": "alpha", "order": 15, "type": "string", "value": "1e-05"}, "momentum": {"description": "Momentum for gradient descent update. Should be between 0 and 1. Only\nused when solver='sgd'.\n", "editor": null, "label": "momentum", "order": 16, "type": "string", "value": "0.9"}, "learning_rate": {"description": "Learning rate schedule for weight updates.\n\n- 'constant' is a constant learning rate given by\n  'learning_rate_init'.\n\n- 'invscaling' gradually decreases the learning rate ``learning_rate_``\n  at each time step 't' using an inverse scaling exponent of 'power_t'.\n  effective_learning_rate = learning_rate_init / pow(t, power_t)\n\n- 'adaptive' keeps the learning rate constant to\n  'learning_rate_init' as long as training loss keeps decreasing.\n  Each time two consecutive epochs fail to decrease training loss by at\n  least tol, or fail to increase validation score by at least tol if\n  'early_stopping' is on, the current learning rate is divided by 5.\n\nOnly used when ``solver='sgd'``.\n", "editor": null, "label": "learning_rate", "order": 17, "type": "string", "value": "constant"}, "early_stopping": {"description": "Whether to use early stopping to terminate training when validation\nscore is not improving. If set to true, it will automatically set\naside 10% of training data as validation and terminate training when\nvalidation score is not improving by at least tol for two consecutive\nepochs.\nOnly effective when solver='sgd' or 'adam'\n", "editor": null, "label": "early_stopping", "order": 18, "type": "string", "value": "False"}, "hidden_layer_sizes": {"description": "The ith element represents the number of neurons in the ith\nhidden layer.\n", "editor": null, "label": "hidden_layer_sizes", "order": 19, "type": "string", "value": "100"}}</parameters>
    <ports>
      <output key="model" scheme="hdf5" type="model" type_base="model" uuid="{6fc84cf5-c6c7-4e96-8de1-4639c798013b}">
        <label>Model</label>
        <description>Model</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.vsplittablenode" uuid="{2a91678e-8fd2-4348-8767-ea097082d2a4}" x="1875.0" y="2100.0">
    <label>VSplit Table</label>
    <description>Vertical split of Table into Tables.</description>
    <author>Alexander Busck &lt;alexander.busck@combine.se&gt;</author>
    <copyright>(C) 2013 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "no_index": {"description": "If checked, each row in the input table will be put in a different table in the output. If unchecked, you need to specify an index column which will then be used to determine what rows go in which table.", "editor": null, "label": "One table for each row.", "order": 0, "type": "boolean", "value": true}, "input_index": {"description": "Choose name for index column. All rows with the same value in this column will end up in the same output table.", "label": "Input index", "order": 1, "type": "string", "value": "", "editor": {"type": "combobox", "options": []}}, "require_index": {"description": "If checked, raise an error if the selected index column doesn't exist. If unchecked, fall back to splitting each row to a different table instead.", "editor": null, "label": "Require input index", "order": 2, "type": "boolean", "value": true}, "remove_fill": {"description": "After splitting, remove columns that contain only NaN or empty strings.", "editor": null, "label": "Remove complement columns", "order": 3, "type": "boolean", "value": false}}</parameters>
    <ports>
      <input key="port1" scheme="hdf5" type="table" type_base="table" uuid="{820036f6-7e52-46e9-9ac6-9cde837614f5}">
        <label>Input Table</label>
        <description>Input Table</description>
      </input>
      <output key="port1" scheme="hdf5" type="[table]" type_base="[table]" uuid="{a08c5be4-74b9-40cd-b1d2-912b1b1cfb09}">
        <label>Split Tables</label>
        <description>Split Tables</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.tuple.tuple2" uuid="{34a9e8d3-937c-4e55-a4bb-2d8939fa8e12}" x="1875.0" y="1975.0">
    <label>Tuple</label>
    <description></description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{1a1ed84b-5bb9-4491-afcd-e90e2c6694e1}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <input key="input" scheme="hdf5" type="table" type_base="&lt;b&gt;" uuid="{22d214a8-7d39-4cb6-9f04-1cb36f65df7d}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <output key="output" scheme="hdf5" type="(table, table)" type_base="(&lt;a&gt;, &lt;b&gt;)" uuid="{162453b2-bf15-4a76-be1b-a7c82f816834}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.vjointablenodes" uuid="{4e35f21e-87c7-429c-88db-4129977b5d7c}" x="2350.0" y="2000.0">
    <label>VJoin Tables</label>
    <description>Vertical join of Tables.</description>
    <author>Alexander Busck &lt;alexander.busck@combine.se&gt;</author>
    <copyright>(C) 2012 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "fill": {"description": "Select if columns that are not represented in all Tables should be complemented", "editor": null, "label": "Complement missing columns", "order": 0, "type": "boolean", "value": true}, "fill_strategy": {"description": "When \"Complement with nan or empty string\" is selected missing columns will be replaced by columns of nan or empty strings. When \"Mask missing values\" is selected missing columns will be result in masked values", "label": "Complement strategy", "mode": "selected", "order": 1, "passthrough": false, "type": "list", "list": ["Complement with nan or empty string", "Mask missing values"], "value": [1], "value_names": [], "editor": {"type": "combobox", "options": []}}, "output_index": {"description": "Specify name for output index column. If left empty, no index column will be created", "label": "Output index", "order": 2, "type": "string", "value": "", "editor": {"placeholder": "(none)", "type": "lineedit"}}, "minimum_increment": {"description": "Specify the increment in the outgoing index column for tables with no rows. Either 1 or 0.", "label": "Increment for empty tables", "order": 3, "type": "integer", "value": 1, "editor": {"max": 1, "min": 0, "step": 1, "type": "spinbox"}}}</parameters>
    <ports>
      <input key="port1" scheme="hdf5" type="[table]" type_base="[table]" uuid="{5affc71e-28d8-4071-8223-2cea9d046539}">
        <label>Input Tables</label>
        <description>Input Tables</description>
      </input>
      <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{e26cb0e3-9c47-4bc1-b2c5-8b1c6ace0e4d}">
        <label>Joined Tables</label>
        <description>Joined Tables</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" uuid="{5b3faed9-f883-4b5f-aa29-4e8cd8ad1fd2}" x="1750.0" y="2100.0">
    <label>Manually Create Table</label>
    <description></description>
    <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
    <copyright>(c) 2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "json_table": {"description": "Configuration window", "editor": null, "label": "GUI", "order": 0, "type": "string", "value": "[[\"NN__hidden_layer_sizes\", \"U\", [\"50\", \"50\", \"50\", \"25,25\", \"25,25\", \"25,25\"]], [\"NN__beta_1\", \"f\", [0.9, 0.99, 0.9, 0.9, 0.99, 0.9]], [\"NN__beta_2\", \"f\", [0.999, 0.9999, 0.999, 0.999, 0.9999, 0.999]], [\"pre__threshold\", \"f\", [10.0, 10.0, 20.0, 10.0, 10.0, 20.0]]]"}}</parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{6f586089-1c15-4dc2-8034-6fef27af19d7}">
        <label>Manually created table</label>
        <description>Manually created table</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.example_datasets" uuid="{6e077ced-467f-4492-9883-728cb6a4ae79}" x="1750.0" y="1975.0">
    <label>Example dataset: 
MNIST digits</label>
    <description>Exposes the example datasets from sklearn</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "dataset": {"description": "Choose from one of the default toy datasets", "label": "Dataset", "order": 0, "type": "string", "value": "Digits", "editor": {"type": "combobox", "options": ["Digits", "Boston", "Diabetes", "linnerud", "Iris"]}}, "classnames": {"description": "Attempts to use class names as Y", "editor": null, "label": "Class names", "order": 1, "type": "boolean", "value": true}}</parameters>
    <ports>
      <output key="X" scheme="hdf5" type="table" type_base="table" uuid="{009ade28-f36b-40d9-a642-c18e6f6fcc6e}">
        <label>X</label>
        <description>X</description>
      </output>
      <output key="Y" scheme="hdf5" type="table" type_base="table" uuid="{abf8c0fa-e153-4bf4-b8fa-772a1db71e52}">
        <label>Y</label>
        <description>Y</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.builtin.apply" uuid="{a9d07f71-3a0c-4cde-b974-31ae9a914b0c}" x="2025.0" y="1850.0">
    <label>Apply</label>
    <description>Apply Lambda function to Argument</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015-2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="Function" scheme="hdf5" type="model -&gt; (table, table) -&gt; table -&gt; table" type_base="&lt;a&gt; -&gt; &lt;b&gt;" uuid="{108488a5-8c48-4780-920a-c24b1216c1b2}">
        <label>Lambda Function to Apply</label>
        <description>Lambda Function to Apply</description>
      </input>
      <input key="Argument" scheme="hdf5" type="model" type_base="&lt;a&gt;" uuid="{d70a7262-4d5e-402a-a4c3-5283d73c179f}">
        <label>Argument</label>
        <description>Argument</description>
      </input>
      <output key="Output" scheme="hdf5" type="(table, table) -&gt; table -&gt; table" type_base="&lt;b&gt;" uuid="{6a3022d6-a728-4981-88db-b39484c622e0}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.pipeline" uuid="{d82ad086-7027-4de6-bc95-f56b5089eb43}" x="1575.0" y="1850.0">
    <label>Pipeline</label>
    <description>Applies one model on the output of another</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "names": {"description": "Comma separated list of model names, eg. Rescale, SVC. If fewer names are given than models then default names will be used.", "editor": null, "label": "Model names", "order": 0, "type": "string", "value": "pre, NN"}, "flatten": {"description": "Flattens multiple pipeline objects into a single pipeline containing all models", "editor": null, "label": "Flatten", "order": 1, "type": "boolean", "value": true}}</parameters>
    <ports>
      <input key="models" scheme="hdf5" type="model" type_base="model" uuid="{e05d4e2a-1177-4ae4-82a9-6d70cc6d6999}">
        <label>models</label>
        <description>models</description>
      </input>
      <input key="models" scheme="hdf5" type="model" type_base="model" uuid="{b147e2ed-56d6-4df7-8f96-8974e55169b4}">
        <label>models</label>
        <description>models</description>
      </input>
      <output key="out-model" scheme="hdf5" type="model" type_base="model" uuid="{0f4b8d91-90cf-4724-b7b4-315e096a99f4}">
        <label>Output model</label>
        <description>Output model</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.builtin.apply" uuid="{e0a8d256-30c2-44e3-9453-86ed67ff2bd9}" x="2100.0" y="1925.0">
    <label>Apply</label>
    <description>Apply Lambda function to Argument</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015-2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="Function" scheme="hdf5" type="(table, table) -&gt; table -&gt; table" type_base="&lt;a&gt; -&gt; &lt;b&gt;" uuid="{7307b5db-0b11-40da-a131-cebe010684b9}">
        <label>Lambda Function to Apply</label>
        <description>Lambda Function to Apply</description>
      </input>
      <input key="Argument" scheme="hdf5" type="(table, table)" type_base="&lt;a&gt;" uuid="{9b8b1401-7ae2-4ae3-a200-6ae8dc7ce7a5}">
        <label>Argument</label>
        <description>Argument</description>
      </input>
      <output key="Output" scheme="hdf5" type="table -&gt; table" type_base="&lt;b&gt;" uuid="{fdb79408-9276-42ea-9645-037d52dd2f0e}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.builtin.map" uuid="{fbcdc2b9-02db-4245-aa40-44548ad43340}" x="2225.0" y="2000.0">
    <label>Map</label>
    <description>Map Lambda function over each element in argument list</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015-2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "fail_strategy": {"description": "Decide how failure to process an item should be handled.", "label": "Action on exception", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["Error", "Create Empty Item", "Skip Item"], "value": [0], "value_names": [], "editor": {"type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="Function" scheme="hdf5" type="table -&gt; table" type_base="&lt;a&gt; -&gt; &lt;b&gt;" uuid="{bd6f83cf-047c-4f73-a36a-128d69ec99c1}">
        <label>Lambda Function to Map</label>
        <description>Lambda Function to Map</description>
      </input>
      <input key="List" scheme="hdf5" type="[table]" type_base="[&lt;a&gt;]" uuid="{ea8d0e8e-eada-4182-b6b7-a727048dee21}">
        <label>Argument List</label>
        <description>Argument List</description>
      </input>
      <output key="List" scheme="hdf5" type="[table]" type_base="[&lt;b&gt;]" uuid="{3386cdeb-9a15-481d-ba8d-1556040543a3}">
        <label>Output List</label>
        <description>Output List</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.binarizer" uuid="{ff4610c0-fb96-4c71-87b2-128bd9aae289}" x="1400.0" y="1750.0">
    <label>Binarizer</label>
    <description>
Binarize data (set feature values to 0 or 1) according to a threshold.

Values greater than the threshold map to 1, while values less than or
equal to the threshold map to 0. With the default threshold of 0, only
positive values map to 1. Binarization is a common operation on text
count data where the analyst can decide to only consider the presence
or absence of a feature rather than a quantified number of occurrences
for instance. It can also be used as a pre-processing step for
estimators that consider boolean random variables (e.g. modelled using
the Bernoulli distribution in a Bayesian setting).</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "threshold": {"description": "Feature values below or equal to this are replaced by 0, above it by 1.\nThreshold may not be less than 0 for operations on sparse matrices.\n", "editor": null, "label": "threshold", "order": 0, "type": "string", "value": "10"}}</parameters>
    <ports>
      <output key="model" scheme="hdf5" type="model" type_base="model" uuid="{17fa72d4-3a03-43cd-8ca2-67d9649158db}">
        <label>Model</label>
        <description>Model</description>
      </output>
    </ports>
  </node>
  <connection type="(table, table)" uuid="{09fe987d-1d44-4ae2-bee0-e06ebb70fc94}">
    <source node="{34a9e8d3-937c-4e55-a4bb-2d8939fa8e12}" port="{162453b2-bf15-4a76-be1b-a7c82f816834}"/>
    <destination node="{e0a8d256-30c2-44e3-9453-86ed67ff2bd9}" port="{9b8b1401-7ae2-4ae3-a200-6ae8dc7ce7a5}"/>
  </connection>
  <connection type="model" uuid="{211bc70a-f8f6-464f-b861-c153d4acdce7}">
    <source node="{d82ad086-7027-4de6-bc95-f56b5089eb43}" port="{0f4b8d91-90cf-4724-b7b4-315e096a99f4}"/>
    <destination node="{35098533-6bf5-4d47-9b9b-76c490889286}" port="{80078601-6bf6-4812-bb8c-f7c8674e5208}"/>
  </connection>
  <connection type="table" uuid="{2e5d0468-f768-4aa7-9725-0e1eea9ee638}">
    <source node="{6e077ced-467f-4492-9883-728cb6a4ae79}" port="{abf8c0fa-e153-4bf4-b8fa-772a1db71e52}"/>
    <destination node="{34a9e8d3-937c-4e55-a4bb-2d8939fa8e12}" port="{22d214a8-7d39-4cb6-9f04-1cb36f65df7d}"/>
  </connection>
  <connection type="table -&gt; table" uuid="{4c9c8635-9728-489a-9c2d-04334780dfa8}">
    <source node="{e0a8d256-30c2-44e3-9453-86ed67ff2bd9}" port="{fdb79408-9276-42ea-9645-037d52dd2f0e}"/>
    <destination node="{fbcdc2b9-02db-4245-aa40-44548ad43340}" port="{bd6f83cf-047c-4f73-a36a-128d69ec99c1}"/>
  </connection>
  <connection type="table" uuid="{954e8da0-a58a-4201-90e8-db58f83ed666}">
    <source node="{6e077ced-467f-4492-9883-728cb6a4ae79}" port="{009ade28-f36b-40d9-a642-c18e6f6fcc6e}"/>
    <destination node="{34a9e8d3-937c-4e55-a4bb-2d8939fa8e12}" port="{1a1ed84b-5bb9-4491-afcd-e90e2c6694e1}"/>
  </connection>
  <connection type="[table]" uuid="{a109b3ed-47ac-4cbf-979b-bbf0c8733b8e}">
    <source node="{2a91678e-8fd2-4348-8767-ea097082d2a4}" port="{a08c5be4-74b9-40cd-b1d2-912b1b1cfb09}"/>
    <destination node="{fbcdc2b9-02db-4245-aa40-44548ad43340}" port="{ea8d0e8e-eada-4182-b6b7-a727048dee21}"/>
  </connection>
  <connection type="(table, table) -&gt; table -&gt; table" uuid="{b129ae8e-7320-4994-a388-3dac07dfb5b3}">
    <source node="{a9d07f71-3a0c-4cde-b974-31ae9a914b0c}" port="{6a3022d6-a728-4981-88db-b39484c622e0}"/>
    <destination node="{e0a8d256-30c2-44e3-9453-86ed67ff2bd9}" port="{7307b5db-0b11-40da-a131-cebe010684b9}"/>
  </connection>
  <connection type="model -&gt; (table, table) -&gt; table -&gt; table" uuid="{b55950a3-6c75-443f-b0ab-a0cf4b33192e}">
    <source node="{35098533-6bf5-4d47-9b9b-76c490889286}" port="{65f0d21d-73b6-4501-b486-448d210fccdb}"/>
    <destination node="{a9d07f71-3a0c-4cde-b974-31ae9a914b0c}" port="{108488a5-8c48-4780-920a-c24b1216c1b2}"/>
  </connection>
  <connection type="[table]" uuid="{b641cae7-cdc8-4472-9c64-75c03855d21c}">
    <source node="{fbcdc2b9-02db-4245-aa40-44548ad43340}" port="{3386cdeb-9a15-481d-ba8d-1556040543a3}"/>
    <destination node="{4e35f21e-87c7-429c-88db-4129977b5d7c}" port="{5affc71e-28d8-4071-8223-2cea9d046539}"/>
  </connection>
  <connection type="table" uuid="{be8c3948-d4fa-4e1a-bfcb-fdbb85512f46}">
    <source node="{5b3faed9-f883-4b5f-aa29-4e8cd8ad1fd2}" port="{6f586089-1c15-4dc2-8034-6fef27af19d7}"/>
    <destination node="{2a91678e-8fd2-4348-8767-ea097082d2a4}" port="{820036f6-7e52-46e9-9ac6-9cde837614f5}"/>
  </connection>
  <connection type="model" uuid="{dfa4a9d2-2d1a-4bc4-9e64-65c484e39ac0}">
    <source node="{ff4610c0-fb96-4c71-87b2-128bd9aae289}" port="{17fa72d4-3a03-43cd-8ca2-67d9649158db}"/>
    <destination node="{d82ad086-7027-4de6-bc95-f56b5089eb43}" port="{e05d4e2a-1177-4ae4-82a9-6d70cc6d6999}"/>
  </connection>
  <connection type="model" uuid="{f288d050-7e4f-4945-8c3c-50d4f60b665f}">
    <source node="{0d0d86f5-123e-496e-a35e-74dd99b1bcde}" port="{6fc84cf5-c6c7-4e96-8de1-4639c798013b}"/>
    <destination node="{d82ad086-7027-4de6-bc95-f56b5089eb43}" port="{b147e2ed-56d6-4df7-8f96-8974e55169b4}"/>
  </connection>
  <connection type="model" uuid="{fa663a1b-f7e9-46bb-9ab4-9fefa4e29ecb}">
    <source node="{d82ad086-7027-4de6-bc95-f56b5089eb43}" port="{0f4b8d91-90cf-4724-b7b4-315e096a99f4}"/>
    <destination node="{a9d07f71-3a0c-4cde-b974-31ae9a914b0c}" port="{d70a7262-4d5e-402a-a4c3-5283d73c179f}"/>
  </connection>
  <text color="Beige" height="175.0" uuid="{0076808b-d254-4557-b902-382ecf7ec04b}" width="550.0" x="1550.0" y="1550.0">Custom parameter searching implemented using lambdas.

We give a list of parameter values to investigate, all non-listed ones are kept as default. For each such value the lambda is executed and outputs a score (and copy of paremeters) visible in the last node here. 

Note that there exist simpler built-in methods for parameter search, this method is only for maximum flexibility in how to perform the search.</text>
  <text color="Beige" height="50.0" uuid="{05d2a747-78c5-4a94-adff-d4a1bdcef4cb}" width="275.0" x="1700.0" y="2175.0">List of all parameter combinations to test</text>
  <text color="Beige" height="75.0" uuid="{87d116be-1e34-4bb4-8a56-94215129652c}" width="325.0" x="2100.0" y="1825.0">Use apply to 'bind' first input to the model, and second input to the XY dataset. </text>
  <text color="Beige" height="75.0" uuid="{bcaa816a-21e9-402d-b390-b0fdb2b89302}" width="325.0" x="1375.0" y="1950.0">Pipeline prepends 'pre__' or 'nn__' for the parameters to the binarizer or the neural network, respectively. </text>
  <text color="Beige" height="50.0" uuid="{bd37c5f8-b279-40bf-a240-ba235051e7b7}" width="175.0" x="1950.0" y="1750.0">'Edit' to inspect content</text>
</flow>
