<?xml version='1.0' encoding='ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" height="50.0" id="" is_locked="False" uuid="{f47ed6ef-b037-4d2a-b782-1679f4c3e09e}" width="50.0" x="0.0" y="0.0">
  <label></label>
  <description></description>
  <author></author>
  <copyright></copyright>
  <version></version>
  <min_version></min_version>
  <aggregation type="json"><![CDATA[null]]></aggregation>
  <libraries type="json"><![CDATA[[]]]></libraries>
  <pythonpaths type="json"><![CDATA[[]]]></pythonpaths>
  <overrides type="json"><![CDATA[{}]]></overrides>
  <environment type="json"><![CDATA[{}]]></environment>
  <parameters type="json"><![CDATA[{"environment": {}}]]></parameters>
  <ports/>
  <node id="org.sysess.sympathy.machinelearning.example_datasets" uuid="{11a07cd3-7b51-49b7-8e19-0a5128c686b4}" x="1700.0" y="2000.0">
    <label>Example datasets</label>
    <description>Exposes the example datasets from sklearn</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "dataset": {"description": "Choose from one of the default toy datasets", "label": "Dataset", "order": 0, "type": "string", "value": "Iris", "editor": {"type": "combobox", "options": ["Digits", "Boston", "Diabetes", "linnerud", "Iris"]}}, "classnames": {"description": "Attempts to use class names as Y", "editor": null, "label": "Class names", "order": 1, "type": "boolean", "value": true}}]]></parameters>
    <ports>
      <output key="X" scheme="hdf5" type="table" type_base="table" uuid="{29dc4695-f191-4d26-b197-10e704b10709}">
        <label>X</label>
        <description>X</description>
      </output>
      <output key="Y" scheme="hdf5" type="table" type_base="table" uuid="{5a85fc99-a1ba-47e5-8fe9-9cee16eec36e}">
        <label>Y</label>
        <description>Y</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.example_datasets" uuid="{6a5581b1-d05e-4001-a118-adeacda07701}" x="2050.0" y="2000.0">
    <label>Example datasets</label>
    <description>Exposes the example datasets from sklearn</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "dataset": {"description": "Choose from one of the default toy datasets", "label": "Dataset", "order": 0, "type": "string", "value": "Iris", "editor": {"type": "combobox", "options": ["Digits", "Boston", "Diabetes", "linnerud", "Iris"]}}, "classnames": {"description": "Attempts to use class names as Y", "editor": null, "label": "Class names", "order": 1, "type": "boolean", "value": true}}]]></parameters>
    <ports>
      <output key="X" scheme="hdf5" type="table" type_base="table" uuid="{e690ac49-cbe4-475a-8590-bc2788c9a3cc}">
        <label>X</label>
        <description>X</description>
      </output>
      <output key="Y" scheme="hdf5" type="table" type_base="table" uuid="{3be5abf9-47ef-422d-8577-64bf62939d2e}">
        <label>Y</label>
        <description>Y</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.fit" port_format="1.1" uuid="{a6f93c24-6adb-43c7-b699-8fff95a1fe55}" x="2225.0" y="1975.0">
    <label>Fit</label>
    <description>Trains a model. Use "Create Input Port &gt; Y" for supervised training</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
    <ports>
      <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{8a5309b9-3926-4c6c-9b4c-5561da9cf8f4}">
        <label>Input model</label>
        <description>Input model</description>
      </input>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{eb21f51e-f164-4718-bf21-468aae85664d}">
        <label>X</label>
        <description>X</description>
      </input>
      <input key="Y0" scheme="hdf5" type="table" type_base="table" uuid="{0322521b-3dda-4ce2-812c-a0224d99f29a}">
        <label>Y</label>
        <description>Y</description>
      </input>
      <output key="out-model" scheme="hdf5" type="model" type_base="model" uuid="{c955d5bc-4f93-436d-afbe-ece4d6bc6d74}">
        <label>Output model</label>
        <description>Output model</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.decision_tree_classifier" uuid="{a88c108e-f1fc-46fb-9835-af82ed683cfc}" x="1700.0" y="1925.0">
    <label>Decision Tree Classifier</label>
    <description>Decision Trees (DTs) are a non-parametric supervised learning methodused for classification and regression. The goal is to create a modelthat predicts the value of a target variable by learning simpledecision rules inferred from the data features.</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "presort": {"description": "Whether to presort the data to speed up the finding of best splits in\nfitting. For the default settings of a decision tree on large\ndatasets, setting this to true may slow down the training process.\nWhen using either a smaller dataset or a restricted depth, this may\nspeed up the training.\n", "editor": null, "label": "presort", "order": 0, "type": "string", "value": "False"}, "splitter": {"description": "The strategy used to choose the split at each node. Supported\nstrategies are \"best\" to choose the best split and \"random\" to choose\nthe best random split.\n", "editor": null, "label": "splitter", "order": 1, "type": "string", "value": "best"}, "max_leaf_nodes": {"description": "Grow a tree with ``max_leaf_nodes`` in best-first fashion.\nBest nodes are defined as relative reduction in impurity.\nIf None then unlimited number of leaf nodes.\n", "editor": null, "label": "max_leaf_nodes", "order": 2, "type": "string", "value": "None"}, "min_samples_leaf": {"description": "The minimum number of samples required to be at a leaf node:\n\n- If int, then consider `min_samples_leaf` as the minimum number.\n- If float, then `min_samples_leaf` is a percentage and\n  `ceil(min_samples_leaf * n_samples)` are the minimum\n  number of samples for each node.\n\n.. versionchanged:: 0.18\n   Added float values for percentages.\n", "editor": null, "label": "min_samples_leaf", "order": 3, "type": "string", "value": "1"}, "min_samples_split": {"description": "The minimum number of samples required to split an internal node:\n\n- If int, then consider `min_samples_split` as the minimum number.\n- If float, then `min_samples_split` is a percentage and\n  `ceil(min_samples_split * n_samples)` are the minimum\n  number of samples for each split.\n\n.. versionchanged:: 0.18\n   Added float values for percentages.\n", "editor": null, "label": "min_samples_split", "order": 4, "type": "string", "value": "2"}, "random_state": {"description": "If int, random_state is the seed used by the random number generator;\nIf RandomState instance, random_state is the random number generator;\nIf None, the random number generator is the RandomState instance used\nby `np.random`.\n", "editor": null, "label": "random_state", "order": 5, "type": "string", "value": "None"}, "criterion": {"description": "The function to measure the quality of a split. Supported criteria are\n\"gini\" for the Gini impurity and \"entropy\" for the information gain.\n", "editor": null, "label": "criterion", "order": 6, "type": "string", "value": "gini"}, "min_impurity_split": {"description": "Threshold for early stopping in tree growth. A node will split\nif its impurity is above the threshold, otherwise it is a leaf.\n\n.. versionadded:: 0.18\n", "editor": null, "label": "min_impurity_split", "order": 7, "type": "string", "value": "1e-07"}, "max_features": {"description": "The number of features to consider when looking for the best split:\n\n    - If int, then consider `max_features` features at each split.\n    - If float, then `max_features` is a percentage and\n      `int(max_features * n_features)` features are considered at each\n      split.\n    - If \"auto\", then `max_features=sqrt(n_features)`.\n    - If \"sqrt\", then `max_features=sqrt(n_features)`.\n    - If \"log2\", then `max_features=log2(n_features)`.\n    - If None, then `max_features=n_features`.\n\nNote: the search for a split does not stop until at least one\nvalid partition of the node samples is found, even if it requires to\neffectively inspect more than ``max_features`` features.\n", "editor": null, "label": "max_features", "order": 8, "type": "string", "value": "None"}, "max_depth": {"description": "The maximum depth of the tree. If None, then nodes are expanded until\nall leaves are pure or until all leaves contain less than\nmin_samples_split samples.\n", "editor": null, "label": "max_depth", "order": 9, "type": "string", "value": "1"}}]]></parameters>
    <ports>
      <output key="model" scheme="hdf5" type="model" type_base="model" uuid="{513c4fa9-aa97-4286-8460-5fed74eadc2b}">
        <label>Model</label>
        <description>Model</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.calculatortable" uuid="{bc63bbe8-f08d-4d5e-b3ec-38a938ac5e0d}" x="1775.0" y="2075.0">
    <label>Calculator Table</label>
    <description>Performs user-defined python calculations</description>
    <author>Greger Cronquist &lt;greger.cronquist@combine.se&gt;, Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;, Sara Gustafzelius &lt;sara.gustafzelius@combine.se&gt;, Benedikt Ziegler &lt;benedikt.ziegler@combine.se&gt;</author>
    <copyright>(c) 2016 Combine Control Systems AB</copyright>
    <version>3.0</version>
    <parameters type="json"><![CDATA[{"type": "group", "calc_list": {"description": "List of calculations.", "editor": null, "label": "List of calculations", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["${weights} = (table.col('Y').data == 'virginica')*9 + 1 #ENABLED:1"], "value": [0], "value_names": []}, "same_length_res": {"description": "Gather all the results generated from an incoming data into a common output table. This requires that the results all have the same length. An error will be given if the lengths of the outgoing results differ.", "editor": null, "label": "Put results in common outputs.", "order": 1, "type": "boolean", "value": true}, "copy_input": {"description": "If enabled the incoming data will be copied to the output before running the calculations. This requires that the results will all have the same length. An exception will be raised if the lengths of the outgoing results differ.", "editor": null, "label": "Copy input", "order": 2, "type": "boolean", "value": false}, "fail_strategy": {"description": "Decide how a failed calculation should be handled", "label": "Action on calculation failure", "mode": "selected", "order": 3, "passthrough": false, "type": "list", "list": ["Exception", "Skip calculation"], "value": [0], "value_names": [], "editor": {"type": "combobox", "options": []}}}]]></parameters>
    <ports>
      <input key="port0" scheme="hdf5" type="table" type_base="table" uuid="{81db4707-22c2-4d87-ad45-cc1f47e921f9}">
        <label>Input Table</label>
        <description>Input Table</description>
      </input>
      <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{ef983a85-e2c9-47db-92c1-34f798aedc78}">
        <label>Table with results from the calculation performed by the node.</label>
        <description>Table with results from the calculation performed by the node.</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.fit" port_format="1.1" uuid="{fa497bd6-1e37-47ec-8ae4-eccff229ff5e}" x="1875.0" y="1975.0">
    <label>Fit</label>
    <description>Trains a model. Use "Create Input Port &gt; Y" for supervised training</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
    <ports>
      <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{7697ced7-81e5-4c08-a1de-9ab3adfeb168}">
        <label>Input model</label>
        <description>Input model</description>
      </input>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{ee5c3441-0b4a-40ef-aa53-82030d1417c8}">
        <label>X</label>
        <description>X</description>
      </input>
      <input key="Y0" scheme="hdf5" type="table" type_base="table" uuid="{8baa596e-927b-4582-a5b5-57becf5ac6fe}">
        <label>Y</label>
        <description>Y</description>
      </input>
      <input key="sample_weights" scheme="hdf5" type="table" type_base="table" uuid="{6a09168d-6eaa-4380-b669-f68d2408002e}">
        <label>sample_weights</label>
        <description>sample_weights</description>
      </input>
      <output key="out-model" scheme="hdf5" type="model" type_base="model" uuid="{5ce1f0b8-2136-41c9-924e-01881d9f4a18}">
        <label>Output model</label>
        <description>Output model</description>
      </output>
    </ports>
  </node>
  <connection type="table" uuid="{04f68395-5e2d-40c6-8d0a-810d77b5a29c}">
    <source node="{bc63bbe8-f08d-4d5e-b3ec-38a938ac5e0d}" port="{ef983a85-e2c9-47db-92c1-34f798aedc78}"/>
    <destination node="{fa497bd6-1e37-47ec-8ae4-eccff229ff5e}" port="{6a09168d-6eaa-4380-b669-f68d2408002e}"/>
  </connection>
  <connection type="model" uuid="{880d53d4-c418-4ee9-8e93-2bb0e3e0dcf2}">
    <source node="{a88c108e-f1fc-46fb-9835-af82ed683cfc}" port="{513c4fa9-aa97-4286-8460-5fed74eadc2b}"/>
    <destination node="{a6f93c24-6adb-43c7-b699-8fff95a1fe55}" port="{8a5309b9-3926-4c6c-9b4c-5561da9cf8f4}"/>
  </connection>
  <connection type="table" uuid="{8d89c816-e2df-475c-bdf0-ca7c437f6492}">
    <source node="{6a5581b1-d05e-4001-a118-adeacda07701}" port="{e690ac49-cbe4-475a-8590-bc2788c9a3cc}"/>
    <destination node="{a6f93c24-6adb-43c7-b699-8fff95a1fe55}" port="{eb21f51e-f164-4718-bf21-468aae85664d}"/>
  </connection>
  <connection type="table" uuid="{afed5cb0-7436-4317-b7c5-8a355b7c1b33}">
    <source node="{11a07cd3-7b51-49b7-8e19-0a5128c686b4}" port="{29dc4695-f191-4d26-b197-10e704b10709}"/>
    <destination node="{fa497bd6-1e37-47ec-8ae4-eccff229ff5e}" port="{ee5c3441-0b4a-40ef-aa53-82030d1417c8}"/>
  </connection>
  <connection type="table" uuid="{b7bed340-107d-4911-8640-544b376ec5d7}">
    <source node="{11a07cd3-7b51-49b7-8e19-0a5128c686b4}" port="{5a85fc99-a1ba-47e5-8fe9-9cee16eec36e}"/>
    <destination node="{fa497bd6-1e37-47ec-8ae4-eccff229ff5e}" port="{8baa596e-927b-4582-a5b5-57becf5ac6fe}"/>
  </connection>
  <connection type="table" uuid="{b990b056-76da-41c4-b006-3dbe81341ee5}">
    <source node="{11a07cd3-7b51-49b7-8e19-0a5128c686b4}" port="{5a85fc99-a1ba-47e5-8fe9-9cee16eec36e}"/>
    <destination node="{bc63bbe8-f08d-4d5e-b3ec-38a938ac5e0d}" port="{81db4707-22c2-4d87-ad45-cc1f47e921f9}"/>
  </connection>
  <connection type="model" uuid="{c0c2e0b7-d698-423e-a3e8-49941c64f429}">
    <source node="{a88c108e-f1fc-46fb-9835-af82ed683cfc}" port="{513c4fa9-aa97-4286-8460-5fed74eadc2b}"/>
    <destination node="{fa497bd6-1e37-47ec-8ae4-eccff229ff5e}" port="{7697ced7-81e5-4c08-a1de-9ab3adfeb168}"/>
  </connection>
  <connection type="table" uuid="{c7726233-1de4-4398-99ff-356c03a417ca}">
    <source node="{6a5581b1-d05e-4001-a118-adeacda07701}" port="{3be5abf9-47ef-422d-8577-64bf62939d2e}"/>
    <destination node="{a6f93c24-6adb-43c7-b699-8fff95a1fe55}" port="{0322521b-3dda-4ce2-812c-a0224d99f29a}"/>
  </connection>
  <text color="Beige" height="75.0" uuid="{75111a46-4b62-4f4f-bf57-ebbc54c6b6f4}" width="275.0" x="2100.0" y="1825.0">Tree without sample weights gives 'versicolor' instead of 'virginica', in addition to setosa</text>
  <text color="Beige" height="75.0" uuid="{85b6cbb0-f1e0-4e75-bb4a-bf460d061e42}" width="300.0" x="1675.0" y="1825.0">Example with limited depth in decision tree. Sample weights gives tree which outputs 'virginica' class in addition to 'setosa'</text>
</flow>
