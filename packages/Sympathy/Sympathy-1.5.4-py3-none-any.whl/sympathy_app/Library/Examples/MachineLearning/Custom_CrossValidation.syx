<?xml version='1.0' encoding='ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" height="50.0" id="" is_locked="False" uuid="{3029a4f4-9245-48bf-b104-2676d56fdb9b}" width="50.0" x="0.0" y="0.0">
  <label></label>
  <description></description>
  <author></author>
  <copyright></copyright>
  <version></version>
  <source></source>
  <min_version></min_version>
  <aggregation type="json"><![CDATA[null]]></aggregation>
  <libraries type="json"><![CDATA[[]]]></libraries>
  <pythonpaths type="json"><![CDATA[[]]]></pythonpaths>
  <overrides type="json"><![CDATA[{}]]></overrides>
  <environment type="json"><![CDATA[{}]]></environment>
  <parameters type="json"><![CDATA[{"environment": {}}]]></parameters>
  <ports/>
  <flow cls="Lambda" height="50.0" id="" is_locked="False" uuid="{1b0cd1a6-030b-4401-b18a-4aa2887f4428}" width="50.0" x="2450.0" y="2000.0">
    <label>Custom CV</label>
    <description></description>
    <author></author>
    <copyright></copyright>
    <version></version>
    <source></source>
    <min_version></min_version>
    <aggregation type="json"><![CDATA[null]]></aggregation>
    <libraries type="json"><![CDATA[[]]]></libraries>
    <pythonpaths type="json"><![CDATA[[]]]></pythonpaths>
    <overrides type="json"><![CDATA[{}]]></overrides>
    <environment type="json"><![CDATA[{}]]></environment>
    <parameters type="json"><![CDATA[{"environment": {}}]]></parameters>
    <ports>
      <input height="50.0" index="0" key="Port" optional="False" parent="False" requiresdata="False" scheme="hdf5" type="model" uuid="{d18c488b-cac6-41de-a982-52c2fce5e45a}" width="50.0" x="1500.0" y="1950.0">
        <label>Port</label>
        <description>Port</description>
      </input>
      <input height="50.0" index="1" key="Port" optional="False" parent="False" requiresdata="False" scheme="hdf5" type="(table, table, table, table)" uuid="{a21b0d1e-90c0-444c-9df1-a36b49633314}" width="50.0" x="1500.0" y="2075.0">
        <label>Port</label>
        <description>Port</description>
      </input>
      <output height="50.0" index="0" key="Port" optional="False" parent="False" requiresdata="False" scheme="hdf5" type="table" uuid="{437e136e-fa66-46bd-87b5-cb04176b6faa}" width="50.0" x="2100.0" y="2075.0">
        <label>Port</label>
        <description>Port</description>
      </output>
    </ports>
    <basic_ports>
      <output key="Function" requiresdata="False" scheme="hdf5" type="model -&gt; (table, table, table, table) -&gt; table" type_base="&lt;a&gt;" uuid="{67069edb-be39-4874-9719-b0e90c1f215e}">
        <label>Lambda function</label>
        <description>Lambda function</description>
      </output>
    </basic_ports>
    <node height="50.0" id="org.sysess.sympathy.machinelearning.score" uuid="{1c47a129-35de-47c3-8b22-41613cb8c1ce}" width="50.0" x="1950.0" y="2075.0">
      <label>Score</label>
      <description>Predicts Y' from X and compares with input Y. Returns mean accuracy (sum(Y' == Y) / rows)</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
      <ports>
        <input key="in-model" requiresdata="False" scheme="hdf5" type="model" type_base="model" uuid="{598751ca-e1ee-45fd-a6f8-a5bbb173b76f}">
          <label>Input model</label>
          <description>Input model</description>
        </input>
        <input key="X" requiresdata="False" scheme="hdf5" type="table" type_base="table" uuid="{c9b8803c-4c99-481c-80aa-d7e3a84722c6}">
          <label>X</label>
          <description>X</description>
        </input>
        <input key="Y" requiresdata="False" scheme="hdf5" type="table" type_base="table" uuid="{31a13694-4a9c-4886-8515-8fe1c4ea1332}">
          <label>Y</label>
          <description>Y</description>
        </input>
        <output key="Score" requiresdata="False" scheme="hdf5" type="table" type_base="table" uuid="{62fb72dd-9000-49b6-86b1-0760499c4657}">
          <label>Score</label>
          <description>Score</description>
        </output>
      </ports>
    </node>
    <node height="50.0" id="org.sysess.sympathy.tuple.untuple2" port_format="1.1" uuid="{55c60e6c-2660-41df-a986-267a7e8bce29}" width="50.0" x="1750.0" y="2075.0">
      <label>Untuple</label>
      <description></description>
      <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>1.0</version>
      <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
      <ports>
        <input key="input" requiresdata="False" scheme="hdf5" type="(table, table, table, table)" type_base="(&lt;a&gt;, &lt;b&gt;, &lt;c&gt;, &lt;d&gt;)" uuid="{f5c8749d-a5d8-43b4-900f-7f35115e7cec}">
          <label>Input</label>
          <description>Input</description>
        </input>
        <output key="output" requiresdata="False" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{4758ad39-6e84-44d6-b9a1-a4c36c3c2125}">
          <label>Output</label>
          <description>Output</description>
        </output>
        <output key="output" requiresdata="False" scheme="hdf5" type="table" type_base="&lt;b&gt;" uuid="{fc699620-c981-4dee-a063-0da0b8e3a356}">
          <label>Output</label>
          <description>Output</description>
        </output>
        <output key="output" requiresdata="True" scheme="hdf5" type="table" type_base="&lt;c&gt;" uuid="{516ed981-cfca-41ef-be2c-d8c4bc87f464}">
          <label>Output</label>
          <description>Output</description>
        </output>
        <output key="output" requiresdata="True" scheme="hdf5" type="table" type_base="&lt;d&gt;" uuid="{c000e6e7-3aba-4126-bf38-74bc9b4f9efa}">
          <label>Output</label>
          <description>Output</description>
        </output>
      </ports>
    </node>
    <node height="50.0" id="org.sysess.sympathy.machinelearning.fit" port_format="1.1" uuid="{bc9f0f02-2290-4724-b459-0a9daeccc9fb}" width="50.0" x="1850.0" y="1950.0">
      <label>Fit</label>
      <description>Trains a model. Use "Create Input Port &gt; Y" for supervised training</description>
      <author>Mathias Broxvall</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
      <ports>
        <input key="in-model" requiresdata="False" scheme="hdf5" type="model" type_base="model" uuid="{26db0669-63ec-4216-9d4c-3a8425e7f532}">
          <label>Input model</label>
          <description>Input model</description>
        </input>
        <input key="X" requiresdata="False" scheme="hdf5" type="table" type_base="table" uuid="{04057018-a348-4f60-bd44-977ff84123fe}">
          <label>X</label>
          <description>X</description>
        </input>
        <input key="Y0" requiresdata="True" scheme="hdf5" type="table" type_base="table" uuid="{27310db6-8093-4652-acef-f821453f1ba9}">
          <label>Y</label>
          <description>Y</description>
        </input>
        <output key="out-model" requiresdata="False" scheme="hdf5" type="model" type_base="model" uuid="{b9fb1745-d39b-4a74-a40e-1dfb893621eb}">
          <label>Output model</label>
          <description>Output model</description>
        </output>
      </ports>
    </node>
    <connection type="model" uuid="{2ed983b9-67eb-4905-a1a4-e471fcdce1c5}">
      <source node="{1b0cd1a6-030b-4401-b18a-4aa2887f4428}" port="{d18c488b-cac6-41de-a982-52c2fce5e45a}"/>
      <destination node="{bc9f0f02-2290-4724-b459-0a9daeccc9fb}" port="{26db0669-63ec-4216-9d4c-3a8425e7f532}"/>
    </connection>
    <connection type="(table, table, table, table)" uuid="{3553fac0-b380-49ba-8122-723af4a74014}">
      <source node="{1b0cd1a6-030b-4401-b18a-4aa2887f4428}" port="{a21b0d1e-90c0-444c-9df1-a36b49633314}"/>
      <destination node="{55c60e6c-2660-41df-a986-267a7e8bce29}" port="{f5c8749d-a5d8-43b4-900f-7f35115e7cec}"/>
    </connection>
    <connection type="table" uuid="{846b9183-aeb5-4443-8eba-f9dde1f16cc1}">
      <source node="{1c47a129-35de-47c3-8b22-41613cb8c1ce}" port="{62fb72dd-9000-49b6-86b1-0760499c4657}"/>
      <destination node="{1b0cd1a6-030b-4401-b18a-4aa2887f4428}" port="{437e136e-fa66-46bd-87b5-cb04176b6faa}"/>
    </connection>
    <connection type="model" uuid="{8853f98b-fff4-4331-9180-a1fec94fd60b}">
      <source node="{bc9f0f02-2290-4724-b459-0a9daeccc9fb}" port="{b9fb1745-d39b-4a74-a40e-1dfb893621eb}"/>
      <destination node="{1c47a129-35de-47c3-8b22-41613cb8c1ce}" port="{598751ca-e1ee-45fd-a6f8-a5bbb173b76f}"/>
    </connection>
    <connection type="table" uuid="{a602954b-32bc-4aa6-9bb1-7806e4d99f40}">
      <source node="{55c60e6c-2660-41df-a986-267a7e8bce29}" port="{fc699620-c981-4dee-a063-0da0b8e3a356}"/>
      <destination node="{bc9f0f02-2290-4724-b459-0a9daeccc9fb}" port="{27310db6-8093-4652-acef-f821453f1ba9}"/>
    </connection>
    <connection type="table" uuid="{edff88e1-aaa2-485b-83dc-0b0de07dc22b}">
      <source node="{55c60e6c-2660-41df-a986-267a7e8bce29}" port="{4758ad39-6e84-44d6-b9a1-a4c36c3c2125}"/>
      <destination node="{bc9f0f02-2290-4724-b459-0a9daeccc9fb}" port="{04057018-a348-4f60-bd44-977ff84123fe}"/>
    </connection>
    <connection type="table" uuid="{f61fa474-58f4-4e4a-990a-bc1c9e849337}">
      <source node="{55c60e6c-2660-41df-a986-267a7e8bce29}" port="{c000e6e7-3aba-4126-bf38-74bc9b4f9efa}"/>
      <destination node="{1c47a129-35de-47c3-8b22-41613cb8c1ce}" port="{31a13694-4a9c-4886-8515-8fe1c4ea1332}"/>
    </connection>
    <connection type="table" uuid="{fa399ce2-a76e-486b-885d-c82dc9a270b6}">
      <source node="{55c60e6c-2660-41df-a986-267a7e8bce29}" port="{516ed981-cfca-41ef-be2c-d8c4bc87f464}"/>
      <destination node="{1c47a129-35de-47c3-8b22-41613cb8c1ce}" port="{c9b8803c-4c99-481c-80aa-d7e3a84722c6}"/>
    </connection>
    <text color="Beige" height="75.0" uuid="{b80ce815-5a6d-4ee6-8cce-22838c76e1e8}" width="300.0" x="1625.0" y="2150.0">The CV splitted data consists of:
 Xtrain, Ytran, Xtest, Ytest</text>
  </flow>
  <node height="50.0" id="org.sysess.builtin.apply" uuid="{121ad597-f5d1-41c9-88e8-6a99d23d8f43}" width="50.0" x="2625.0" y="2100.0">
    <label>Apply</label>
    <description>Apply Lambda function to Argument</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015-2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
    <ports>
      <input key="Function" requiresdata="False" scheme="hdf5" type="model -&gt; (table, table, table, table) -&gt; table" type_base="&lt;a&gt; -&gt; &lt;b&gt;" uuid="{f5a9776e-242f-4161-88d1-8a5dc31fba58}">
        <label>Lambda Function to Apply</label>
        <description>Lambda Function to Apply</description>
      </input>
      <input key="Argument" requiresdata="False" scheme="hdf5" type="model" type_base="&lt;a&gt;" uuid="{47a1eb53-4dfa-4a18-8d93-2fb265c01456}">
        <label>Argument</label>
        <description>Argument</description>
      </input>
      <output key="Output" requiresdata="False" scheme="hdf5" type="(table, table, table, table) -&gt; table" type_base="&lt;b&gt;" uuid="{b95ec13e-2a8d-4cd6-9f7c-e3fcd249c7a5}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.crossval_kfold" uuid="{1dfbf380-ea60-4c03-8628-0ab67b88b465}" width="50.0" x="2375.0" y="2200.0">
    <label>K-fold cross validation</label>
    <description>Gives splits for K-fold cross validation</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "n_splits": {"description": "Number of folds, must be atleast 2", "editor": null, "label": "Number of splits", "order": 0, "type": "integer", "value": 3}, "shuffle": {"description": "Shuffle the data before splitting", "editor": null, "label": "Shuffle", "order": 1, "type": "boolean", "value": true}}]]></parameters>
    <ports>
      <input key="X" requiresdata="False" scheme="hdf5" type="table" type_base="table" uuid="{0072f375-7046-4f30-82bf-7510af4ad875}">
        <label>X</label>
        <description>X</description>
      </input>
      <input key="Y" requiresdata="False" scheme="hdf5" type="table" type_base="table" uuid="{26a752ed-a364-420f-8473-c9fe3e831554}">
        <label>Y</label>
        <description>Y</description>
      </input>
      <output key="out" requiresdata="False" scheme="hdf5" type="[(table, table)]" type_base="[(table, table)]" uuid="{c424d324-b94b-4c7d-b41a-ffc4c25b8ac6}">
        <label>out</label>
        <description>out</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.data.table.vjointablenodes" uuid="{77fd5f85-4cee-42a1-b24b-11befe901e60}" width="50.0" x="2900.0" y="2225.0">
    <label>VJoin Tables</label>
    <description>Vertical join of Tables.</description>
    <author>Alexander Busck &lt;alexander.busck@combine.se&gt;</author>
    <copyright>(C) 2012 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json"><![CDATA[{"type": "group", "fill": {"description": "Select if columns that are not represented in all Tables should be complemented", "editor": null, "label": "Complement missing columns", "order": 0, "type": "boolean", "value": true}, "fill_strategy": {"description": "When \"Complement with nan or empty string\" is selected missing columns will be replaced by columns of nan or empty strings. When \"Mask missing values\" is selected missing columns will be result in masked values", "label": "Complement strategy", "mode": "selected", "order": 1, "passthrough": false, "type": "list", "list": ["Complement with nan or empty string", "Mask missing values"], "value": [1], "value_names": [], "editor": {"type": "combobox", "options": []}}, "output_index": {"description": "Specify name for output index column. If left empty, no index column will be created", "label": "Output index", "order": 2, "type": "string", "value": "", "editor": {"placeholder": "(none)", "type": "lineedit"}}, "minimum_increment": {"description": "Specify the increment in the outgoing index column for tables with no rows. Either 1 or 0.", "label": "Increment for empty tables", "order": 3, "type": "integer", "value": 1, "editor": {"max": 1, "min": 0, "step": 1, "type": "spinbox"}}}]]></parameters>
    <ports>
      <input key="port1" requiresdata="False" scheme="hdf5" type="[table]" type_base="[table]" uuid="{d4a11e4f-f8cb-4e99-88d4-ea99a51d3751}">
        <label>Input Tables</label>
        <description>Input Tables</description>
      </input>
      <output key="port1" requiresdata="False" scheme="hdf5" type="table" type_base="table" uuid="{f710bb2e-881a-4e81-9584-30daf265a96c}">
        <label>Joined Tables</label>
        <description>Joined Tables</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.builtin.map" uuid="{84ded066-d667-4058-9d7c-5a99cf7ed826}" width="50.0" x="2775.0" y="2225.0">
    <label>Map</label>
    <description>Map Lambda function over each element in argument list</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015-2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json"><![CDATA[{"type": "group", "fail_strategy": {"description": "Decide how failure to process an item should be handled.", "label": "Action on exception", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["Error", "Create Empty Item", "Skip Item"], "value": [0], "value_names": [], "editor": {"type": "combobox", "options": []}}}]]></parameters>
    <ports>
      <input key="Function" requiresdata="False" scheme="hdf5" type="(table, table, table, table) -&gt; table" type_base="&lt;a&gt; -&gt; &lt;b&gt;" uuid="{73184eec-38a3-4772-b17a-8cd2d7a9db7a}">
        <label>Lambda Function to Map</label>
        <description>Lambda Function to Map</description>
      </input>
      <input key="List" requiresdata="False" scheme="hdf5" type="[(table, table, table, table)]" type_base="[&lt;a&gt;]" uuid="{5d808e0e-244e-4860-bce9-1c426734d266}">
        <label>Argument List</label>
        <description>Argument List</description>
      </input>
      <output key="List" requiresdata="False" scheme="hdf5" type="[table]" type_base="[&lt;b&gt;]" uuid="{26075f4e-4fc8-44c8-9bb5-61bffef4e009}">
        <label>Output List</label>
        <description>Output List</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.example_datasets" uuid="{8a94425f-dba8-48bb-ada1-e0c668c5b080}" width="50.0" x="2200.0" y="2275.0">
    <label>Example datasets</label>
    <description>Exposes the example datasets from sklearn</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "dataset": {"description": "Choose from one of the default toy datasets", "label": "Dataset", "order": 0, "type": "string", "value": "Iris", "editor": {"type": "combobox", "options": ["Digits", "Boston", "Diabetes", "linnerud", "Iris"]}}, "classnames": {"description": "Attempts to use class names as Y", "editor": null, "label": "Class names", "order": 1, "type": "boolean", "value": true}}]]></parameters>
    <ports>
      <output key="X" requiresdata="False" scheme="hdf5" type="table" type_base="table" uuid="{6fa3575a-ef51-4295-8af7-c1757f9ed2da}">
        <label>X</label>
        <description>X</description>
      </output>
      <output key="Y" requiresdata="False" scheme="hdf5" type="table" type_base="table" uuid="{639fb0e9-db14-4c8a-98bb-cec33ac510aa}">
        <label>Y</label>
        <description>Y</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.mlp__classifier" uuid="{ac43e007-8274-4614-9edc-7ef593580556}" width="50.0" x="2450.0" y="2100.0">
    <label>Multi-layer Perceptron Classifier</label>
    <description>Multi-layer perceptron classifier</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "beta_1": {"description": "Exponential decay rate for estimates of first moment vector in adam,\nshould be in [0, 1). Only used when solver='adam'\n", "editor": null, "label": "beta_1", "order": 0, "type": "string", "value": "0.9"}, "warm_start": {"description": "When set to True, reuse the solution of the previous\ncall to fit as initialization, otherwise, just erase the\nprevious solution.\n", "editor": null, "label": "warm_start", "order": 1, "type": "string", "value": "False"}, "beta_2": {"description": "Exponential decay rate for estimates of second moment vector in adam,\nshould be in [0, 1). Only used when solver='adam'\n", "editor": null, "label": "beta_2", "order": 2, "type": "string", "value": "0.999"}, "shuffle": {"description": "Whether to shuffle samples in each iteration. Only used when\nsolver='sgd' or 'adam'.\n", "editor": null, "label": "shuffle", "order": 3, "type": "string", "value": "True"}, "nesterovs_momentum": {"description": "Whether to use Nesterov's momentum. Only used when solver='sgd' and\nmomentum > 0.\n", "editor": null, "label": "nesterovs_momentum", "order": 4, "type": "string", "value": "True"}, "solver": {"description": "The solver for weight optimization.\n\n- 'lbfgs' is an optimizer in the family of quasi-Newton methods.\n\n- 'sgd' refers to stochastic gradient descent.\n\n- 'adam' refers to a stochastic gradient-based optimizer proposed\n  by Kingma, Diederik, and Jimmy Ba\n\nNote: The default solver 'adam' works pretty well on relatively\nlarge datasets (with thousands of training samples or more) in terms of\nboth training time and validation score.\nFor small datasets, however, 'lbfgs' can converge faster and perform\nbetter.\n", "editor": null, "label": "solver", "order": 5, "type": "string", "value": "adam"}, "validation_fraction": {"description": "The proportion of training data to set aside as validation set for\nearly stopping. Must be between 0 and 1.\nOnly used if early_stopping is True\n", "editor": null, "label": "validation_fraction", "order": 6, "type": "string", "value": "0.1"}, "activation": {"description": "Activation function for the hidden layer.\n\n- 'identity', no-op activation, useful to implement linear bottleneck,\n  returns f(x) = x\n\n- 'logistic', the logistic sigmoid function,\n  returns f(x) = 1 / (1 + exp(-x)).\n\n- 'tanh', the hyperbolic tan function,\n  returns f(x) = tanh(x).\n\n- 'relu', the rectified linear unit function,\n  returns f(x) = max(0, x)\n", "editor": null, "label": "activation", "order": 7, "type": "string", "value": "relu"}, "max_iter": {"description": "Maximum number of iterations. The solver iterates until convergence\n(determined by 'tol') or this number of iterations.\n", "editor": null, "label": "max_iter", "order": 8, "type": "string", "value": "200"}, "batch_size": {"description": "Size of minibatches for stochastic optimizers.\nIf the solver is 'lbfgs', the classifier will not use minibatch.\nWhen set to \"auto\", `batch_size=min(200, n_samples)`\n", "editor": null, "label": "batch_size", "order": 9, "type": "string", "value": "auto"}, "power_t": {"description": "The exponent for inverse scaling learning rate.\nIt is used in updating effective learning rate when the learning_rate\nis set to 'invscaling'. Only used when solver='sgd'.\n", "editor": null, "label": "power_t", "order": 10, "type": "string", "value": "0.5"}, "random_state": {"description": "State or seed for random number generator.\n", "editor": null, "label": "random_state", "order": 11, "type": "string", "value": "None"}, "learning_rate_init": {"description": "The initial learning rate used. It controls the step-size\nin updating the weights. Only used when solver='sgd' or 'adam'.\n", "editor": null, "label": "learning_rate_init", "order": 12, "type": "string", "value": "0.001"}, "tol": {"description": "Tolerance for the optimization. When the loss or score is not improving\nby at least tol for two consecutive iterations, unless `learning_rate`\nis set to 'adaptive', convergence is considered to be reached and\ntraining stops.\n", "editor": null, "label": "tol", "order": 13, "type": "string", "value": "0.0001"}, "epsilon": {"description": "Value for numerical stability in adam. Only used when solver='adam'\n", "editor": null, "label": "epsilon", "order": 14, "type": "string", "value": "1e-08"}, "alpha": {"description": "L2 penalty (regularization term) parameter.\n", "editor": null, "label": "alpha", "order": 15, "type": "string", "value": "1e-05"}, "momentum": {"description": "Momentum for gradient descent update. Should be between 0 and 1. Only\nused when solver='sgd'.\n", "editor": null, "label": "momentum", "order": 16, "type": "string", "value": "0.9"}, "learning_rate": {"description": "Learning rate schedule for weight updates.\n\n- 'constant' is a constant learning rate given by\n  'learning_rate_init'.\n\n- 'invscaling' gradually decreases the learning rate ``learning_rate_``\n  at each time step 't' using an inverse scaling exponent of 'power_t'.\n  effective_learning_rate = learning_rate_init / pow(t, power_t)\n\n- 'adaptive' keeps the learning rate constant to\n  'learning_rate_init' as long as training loss keeps decreasing.\n  Each time two consecutive epochs fail to decrease training loss by at\n  least tol, or fail to increase validation score by at least tol if\n  'early_stopping' is on, the current learning rate is divided by 5.\n\nOnly used when ``solver='sgd'``.\n", "editor": null, "label": "learning_rate", "order": 17, "type": "string", "value": "constant"}, "early_stopping": {"description": "Whether to use early stopping to terminate training when validation\nscore is not improving. If set to true, it will automatically set\naside 10% of training data as validation and terminate training when\nvalidation score is not improving by at least tol for two consecutive\nepochs.\nOnly effective when solver='sgd' or 'adam'\n", "editor": null, "label": "early_stopping", "order": 18, "type": "string", "value": "False"}, "hidden_layer_sizes": {"description": "The ith element represents the number of neurons in the ith\nhidden layer.\n", "editor": null, "label": "hidden_layer_sizes", "order": 19, "type": "string", "value": "100"}}]]></parameters>
    <ports>
      <output key="model" requiresdata="False" scheme="hdf5" type="model" type_base="model" uuid="{da125731-f7c0-447b-a34d-66014de59732}">
        <label>Model</label>
        <description>Model</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.crossval_split" port_format="1.1" uuid="{c996fda6-8701-4e43-8617-cd9bfd534831}" width="50.0" x="2550.0" y="2275.0">
    <label>Split data for cross validation</label>
    <description>Partitions the data as per given training and test indicies. Returns list of tuples: (X training, Y training, X test, Y test)</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
    <ports>
      <input key="splits" requiresdata="False" scheme="hdf5" type="[(table, table)]" type_base="[(table, table)]" uuid="{12d8d04e-d9b7-472d-b379-6c8a6d90352e}">
        <label>splits</label>
        <description>splits</description>
      </input>
      <input key="data" requiresdata="False" scheme="hdf5" type="table" type_base="table" uuid="{2e19a51f-8f11-4c66-bad0-859c00ebb6d3}">
        <label>data</label>
        <description>data</description>
      </input>
      <input key="data" requiresdata="False" scheme="hdf5" type="table" type_base="table" uuid="{c03c9bf4-855c-4c63-b64e-cc33890a0d8d}">
        <label>data</label>
        <description>data</description>
      </input>
      <output key="out" requiresdata="False" scheme="hdf5" type="[(table, table, table, table)]" type_base="[(table, table, table, table)]" uuid="{0f09f9b0-2a52-4e90-bfea-a6e98d90f5ad}">
        <label>out</label>
        <description>out</description>
      </output>
    </ports>
  </node>
  <connection type="[table]" uuid="{23c97085-3196-4763-a1a7-c05ec128854b}">
    <source node="{84ded066-d667-4058-9d7c-5a99cf7ed826}" port="{26075f4e-4fc8-44c8-9bb5-61bffef4e009}"/>
    <destination node="{77fd5f85-4cee-42a1-b24b-11befe901e60}" port="{d4a11e4f-f8cb-4e99-88d4-ea99a51d3751}"/>
  </connection>
  <connection type="[(table, table, table, table)]" uuid="{297308dd-c74f-4081-9843-09e2e62cb010}">
    <source node="{c996fda6-8701-4e43-8617-cd9bfd534831}" port="{0f09f9b0-2a52-4e90-bfea-a6e98d90f5ad}"/>
    <destination node="{84ded066-d667-4058-9d7c-5a99cf7ed826}" port="{5d808e0e-244e-4860-bce9-1c426734d266}"/>
  </connection>
  <connection type="[(table, table)]" uuid="{54101e8f-dc06-47c1-8282-66fa2dc8ea39}">
    <source node="{1dfbf380-ea60-4c03-8628-0ab67b88b465}" port="{c424d324-b94b-4c7d-b41a-ffc4c25b8ac6}"/>
    <destination node="{c996fda6-8701-4e43-8617-cd9bfd534831}" port="{12d8d04e-d9b7-472d-b379-6c8a6d90352e}"/>
  </connection>
  <connection type="table" uuid="{7f5797e6-edd6-4399-ab7b-26f1281b1801}">
    <source node="{8a94425f-dba8-48bb-ada1-e0c668c5b080}" port="{6fa3575a-ef51-4295-8af7-c1757f9ed2da}"/>
    <destination node="{c996fda6-8701-4e43-8617-cd9bfd534831}" port="{2e19a51f-8f11-4c66-bad0-859c00ebb6d3}"/>
  </connection>
  <connection type="table" uuid="{80c84dc4-19dc-4dd0-9022-c984765112e5}">
    <source node="{8a94425f-dba8-48bb-ada1-e0c668c5b080}" port="{639fb0e9-db14-4c8a-98bb-cec33ac510aa}"/>
    <destination node="{c996fda6-8701-4e43-8617-cd9bfd534831}" port="{c03c9bf4-855c-4c63-b64e-cc33890a0d8d}"/>
  </connection>
  <connection type="model -&gt; (table, table, table, table) -&gt; table" uuid="{94c4cd5c-90a5-4401-8fb3-d505f1412190}">
    <source node="{1b0cd1a6-030b-4401-b18a-4aa2887f4428}" port="{67069edb-be39-4874-9719-b0e90c1f215e}"/>
    <destination node="{121ad597-f5d1-41c9-88e8-6a99d23d8f43}" port="{f5a9776e-242f-4161-88d1-8a5dc31fba58}"/>
  </connection>
  <connection type="(table, table, table, table) -&gt; table" uuid="{b2315c45-0d9f-4ccf-883d-b3fd1d492216}">
    <source node="{121ad597-f5d1-41c9-88e8-6a99d23d8f43}" port="{b95ec13e-2a8d-4cd6-9f7c-e3fcd249c7a5}"/>
    <destination node="{84ded066-d667-4058-9d7c-5a99cf7ed826}" port="{73184eec-38a3-4772-b17a-8cd2d7a9db7a}"/>
  </connection>
  <connection type="table" uuid="{bab13114-7c73-4d65-bd80-6aeafa2652a7}">
    <source node="{8a94425f-dba8-48bb-ada1-e0c668c5b080}" port="{6fa3575a-ef51-4295-8af7-c1757f9ed2da}"/>
    <destination node="{1dfbf380-ea60-4c03-8628-0ab67b88b465}" port="{0072f375-7046-4f30-82bf-7510af4ad875}"/>
  </connection>
  <connection type="model" uuid="{db1b4bd3-a22d-428c-9452-beaac3e7868f}">
    <source node="{ac43e007-8274-4614-9edc-7ef593580556}" port="{da125731-f7c0-447b-a34d-66014de59732}"/>
    <destination node="{121ad597-f5d1-41c9-88e8-6a99d23d8f43}" port="{47a1eb53-4dfa-4a18-8d93-2fb265c01456}"/>
  </connection>
  <connection type="table" uuid="{db63a407-348f-4059-9dd5-760669f37b26}">
    <source node="{8a94425f-dba8-48bb-ada1-e0c668c5b080}" port="{639fb0e9-db14-4c8a-98bb-cec33ac510aa}"/>
    <destination node="{1dfbf380-ea60-4c03-8628-0ab67b88b465}" port="{26a752ed-a364-420f-8473-c9fe3e831554}"/>
  </connection>
  <text color="Beige" height="75.0" uuid="{076c7803-a7cc-4356-819f-26f1a3e26798}" width="350.0" x="2725.0" y="2075.0">Note how the first argument (the model) is bound to the lambda before passing to the map function</text>
  <text color="Beige" height="150.0" uuid="{d1116281-3d13-4c64-9923-080e77f2de0e}" width="525.0" x="2125.0" y="1850.0">This example demonstrates how to use the node 'Split data for cross validation' to generate a list of CV splits, and to apply a custom lambda for evaluating (scoring) the model for each such split. 

Note:  there exists more efficient built-in methods for most cross validation scenarios, this method are only for maximum flexibility of customizing how the scoring is done. </text>
</flow>
