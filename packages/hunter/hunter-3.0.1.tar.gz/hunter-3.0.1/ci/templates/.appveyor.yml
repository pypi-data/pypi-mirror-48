version: '{branch}-{build}'
build: off
environment:
  global:
    TWINE_PASSWORD:
      secure: fDwCnDhQiptm9a4ZcFpgyQ==
    TWINE_USERNAME: ionel
  matrix:
    - TOXENV: check
      TOXPYTHON: C:\Python36\python.exe
      PYTHON_HOME: C:\Python36
      PYTHON_VERSION: '3.6'
      PYTHON_ARCH: '32'
{%- for env in tox_environments %}{% if env.startswith(('py2', 'py3')) and not env.startswith('py38') %}{{ '' }}
    - TOXENV: '{{ env }}{% if 'cover' in env %},codecov{% endif %}'
      TOXPYTHON: C:\Python{{ env[2:4] }}\python.exe
      PYTHON_HOME: C:\Python{{ env[2:4] }}
      PYTHON_VERSION: '{{ env[2] }}.{{ env[3] }}'
      PYTHON_ARCH: '32'
{% if "cython-nocov" in env %}
      WHEEL_PATH: .tox/dist
{% endif %}
    - TOXENV: '{{ env }}{% if 'cover' in env %},codecov{%- endif %}'
      TOXPYTHON: C:\Python{{ env[2:4] }}-x64\python.exe
      {%- if env.startswith(('py2', 'py34')) %}

      WINDOWS_SDK_VERSION: v7.{{ '1' if env.startswith('py3') else '0' }}
      {%- endif %}

      PYTHON_HOME: C:\Python{{ env[2:4] }}-x64
      PYTHON_VERSION: '{{ env[2] }}.{{ env[3] }}'
      PYTHON_ARCH: '64'
{%- if "cython-nocov" in env %}{{ '' }}
      WHEEL_PATH: .tox/dist
{%- endif %}{%- endif %}{%- endfor %}{{ '' }}
init:
  - ps: Write-Output $Env:TOXENV
  - ps: Get-ChildItem C:\Python*
install:
  - python -u ci\appveyor-bootstrap.py
  - '%PYTHON_HOME%\Scripts\virtualenv --version'
  - '%PYTHON_HOME%\Scripts\easy_install --version'
  - '%PYTHON_HOME%\Scripts\pip --version'
  - '%PYTHON_HOME%\Scripts\tox --version'
test_script:
  - ps: |
      Set-PSDebug -Trace 1
      if ($Env:WHEEL_PATH) {
        cmd /E:ON /V:ON /C .\ci\appveyor-with-compiler.cmd $Env:PYTHON_HOME\Scripts\tox --wheel
        if ($LastExitCode -eq 0) {
          $ErrorActionPreference = "Stop"
          iex "$Env:PYTHON_HOME\Scripts\twine check $Env:WHEEL_PATH/*.whl"
          iex "$Env:PYTHON_HOME\Scripts\twine upload --repository-url https://test.pypi.org/legacy/ --skip-existing $Env:WHEEL_PATH/*.whl"
        }
      } else {
        cmd /E:ON /V:ON /C .\ci\appveyor-with-compiler.cmd $Env:PYTHON_HOME\Scripts\tox
      }
      if ($LastExitCode -ne 0) {
        Get-ChildItem Env:
        Get-Content .tox\*\log\*
      }

### To enable remote debugging uncomment this (also, see: http://www.appveyor.com/docs/how-to/rdp-to-build-worker):
# on_finish:
#   - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
