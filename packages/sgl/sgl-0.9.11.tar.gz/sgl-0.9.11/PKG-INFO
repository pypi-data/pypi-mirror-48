Metadata-Version: 2.1
Name: sgl
Version: 0.9.11
Summary: Structured Grant Language
Home-page: https://github.com/dhh1128/sgl
Author: Daniel Hardman
Author-email: daniel.hardman@gmail.com
License: Apache 2.0
Download-URL: https://github.com/dhh1128/sgl/archive/v0.9.11.tar.gz
Description: [![CircleCI](https://circleci.com/gh/dhh1128/sgl.svg?style=svg)](
        https://circleci.com/gh/dhh1128/sgl)
        
        # SGL (Simple Grant Language)
        
        SGL is a simple but flexible JSON-based DSL for granting and testing
        permissions (authorization). You can use this language to write powerful
        but easy-to-read rules about who can do what, and then evaluate the
        rules to enforce business logic.
        
        For example, here's an SGL rule that expresses the idea that only people
        with "trusted" status should enter a top-secret area:
        
        ```JSON
        {"grant": ["enter_top_secret"], "to": { "role": "trusted" }}
        ```
        
        And here's how you might use that rule in code:
        
        ```python
        from sgl.api import satisfies
        
        my_rule = {"grant": ["enter_top_secret"], "to": { "role": "trusted" }}
        people = [
            {"id": "Bob", "roles": ["employee"]},
            {"id": "Alice", "roles": ["employee", "trusted"]}
        ]
        
        for person in people:
            name = person['id']
            if satisfies(person, my_rule):
                print(f"Welcome, {name}."
            else:
                print(f"Access denied, {name}.")
        ```
        
        If you ran this code, you'd see:
        
        ```bash
        $ python sample_code.py
        Access denied, Bob.
        Welcome, Alice.
        ```
        
        SGL supports arbitrarily complex rules with boolean operators and
        requirements about multiple parties being jointly authorized. However,
        you should be able to learn the whole language in 5 minutes. See the
        [tutorial](https://dhh1128.github.io/sgl/docs/tutorial.html).
        
        SGL is not integrated with any particular enforcement mechanism, because
        it's designed for problems where you have to do your own enforcement.
        Hooking it up to enforcement mechanisms is trivial, though.
        
        ## See also
        * [Tutorial](https://dhh1128.github.io/sgl/docs/tutorial.html)
        * [Reference](https://dhh1128.github.io/sgl/docs/tutorial.html)
Keywords: sgl json dsl authorization authz verifiable credentials did
Platform: UNKNOWN
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Development Status :: 4 - Beta
Description-Content-Type: text/markdown
