from dpipe_configs.core import *
from .network import *

import sklearn
from pathlib import Path

from dpipe.train.logging import ConsoleLogger
from dpipe.batch_iter.sources import load_by_random_id
from dpipe.batch_iter import Infinite
from dpipe.split import train_val_test_split

from dpipe.tests.mnist.resources import MNIST

dataset = MNIST('~/tests/MNIST')
load_x = dataset.load_image
load_y = dataset.load_label

lr = 1e-3
n_epochs = 3
batch_iter = Infinite(
    load_by_random_id(load_x, load_y, ids=dataset.ids),
    batches_per_epoch=20, batch_size=100
)


def predict(image):
    return model.do_inf_step(image[None]).argmax()


val_metrics = metrics = {
    'accuracy': sklearn.metrics.accuracy_score,
    'precision': partial(sklearn.metrics.precision_score, average='weighted'),
    'recall': partial(sklearn.metrics.recall_score, average='weighted'),
}

run_experiment = (
    run_train_predict,
    commands.evaluate_aggregated_metrics(load_y, metrics, test_predictions_path, 'test_metrics')
)
validate_step = None

# take 2 first folds
split = train_val_test_split(dataset.ids, val_size=0, n_splits=20)[:2]
experiment_path = Path('~/tests/MNIST/mnist-baseline').expanduser()

logger = ConsoleLogger()
