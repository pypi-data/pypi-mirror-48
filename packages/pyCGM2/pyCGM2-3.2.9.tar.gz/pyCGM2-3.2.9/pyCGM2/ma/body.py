# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
# if _swig_python_version_info >= (2, 7, 0):
#     def swig_import_helper():
#         import importlib
#         pkg = __name__.rpartition('.')[0]
#         mname = '.'.join((pkg, '_body')).lstrip('.')
#         try:
#             return importlib.import_module(mname)
#         except ImportError:
#             return importlib.import_module('_body')
#     _body = swig_import_helper()
#     del swig_import_helper
# elif _swig_python_version_info >= (2, 6, 0):
if _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_body', [dirname(__file__)])
        except ImportError:
            import _body
            return _body
        if fp is not None:
            try:
                _mod = imp.load_module('_body', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _body = swig_import_helper()
    del swig_import_helper
else:
    import _body
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

# import ma
from pyCGM2 import ma
Side_Center = _body.Side_Center
Side_Left = _body.Side_Left
Side_Right = _body.Side_Right
Side_Both = _body.Side_Both
Region_Upper = _body.Region_Upper
Region_Lower = _body.Region_Lower
Region_Full = _body.Region_Full
Part_Head = _body.Part_Head
Part_Torso = _body.Part_Torso
Part_Clavicle = _body.Part_Clavicle
Part_Arm = _body.Part_Arm
Part_Forearm = _body.Part_Forearm
Part_Hand = _body.Part_Hand
Part_Pelvis = _body.Part_Pelvis
Part_Thigh = _body.Part_Thigh
Part_Shank = _body.Part_Shank
Part_Foot = _body.Part_Foot
Part_User = _body.Part_User
T_LandmarksTranslator = _body.T_LandmarksTranslator
class LandmarksTranslator(ma.Node):
    __swig_setmethods__ = {}
    for _s in [ma.Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LandmarksTranslator, name, value)
    __swig_getmethods__ = {}
    for _s in [ma.Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LandmarksTranslator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _body.new_LandmarksTranslator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _body.delete_LandmarksTranslator
    __del__ = lambda self: None

    def convert(self, name):
        return _body.LandmarksTranslator_convert(self, name)

    def convertIfExists(self, name):
        return _body.LandmarksTranslator_convertIfExists(self, name)

    def convertReverse(self, name):
        return _body.LandmarksTranslator_convertReverse(self, name)
LandmarksTranslator_swigregister = _body.LandmarksTranslator_swigregister
LandmarksTranslator_swigregister(LandmarksTranslator)

T_SkeletonHelper = _body.T_SkeletonHelper
class SkeletonHelper(ma.Node):
    __swig_setmethods__ = {}
    for _s in [ma.Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SkeletonHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [ma.Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SkeletonHelper, name)
    __repr__ = _swig_repr

    def __init__(self, other):
        this = _body.new_SkeletonHelper(other)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _body.delete_SkeletonHelper
    __del__ = lambda self: None

    def calibrate(self, trials, subject):
        return _body.SkeletonHelper_calibrate(self, trials, subject)

    def reconstruct(self, output, trials):
        return _body.SkeletonHelper_reconstruct(self, output, trials)
SkeletonHelper_swigregister = _body.SkeletonHelper_swigregister
SkeletonHelper_swigregister(SkeletonHelper)

T_PluginGait = _body.T_PluginGait
class PluginGait(SkeletonHelper):
    __swig_setmethods__ = {}
    for _s in [SkeletonHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PluginGait, name, value)
    __swig_getmethods__ = {}
    for _s in [SkeletonHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PluginGait, name)
    __repr__ = _swig_repr
    Variant_Basic = _body.PluginGait_Variant_Basic
    Variant_KAD = _body.PluginGait_Variant_KAD
    Variant_KADMed = _body.PluginGait_Variant_KADMed

    def __init__(self, *args):
        this = _body.new_PluginGait(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _body.delete_PluginGait
    __del__ = lambda self: None

    def markerDiameter(self):
        return _body.PluginGait_markerDiameter(self)

    def setMarkerDiameter(self, value):
        return _body.PluginGait_setMarkerDiameter(self, value)

    def rightShoulderOffset(self):
        return _body.PluginGait_rightShoulderOffset(self)

    def setRightShoulderOffset(self, value):
        return _body.PluginGait_setRightShoulderOffset(self, value)

    def leftShoulderOffset(self):
        return _body.PluginGait_leftShoulderOffset(self)

    def setLeftShoulderOffset(self, value):
        return _body.PluginGait_setLeftShoulderOffset(self, value)

    def rightElbowWidth(self):
        return _body.PluginGait_rightElbowWidth(self)

    def setRightElbowWidth(self, value):
        return _body.PluginGait_setRightElbowWidth(self, value)

    def leftElbowWidth(self):
        return _body.PluginGait_leftElbowWidth(self)

    def setLeftElbowWidth(self, value):
        return _body.PluginGait_setLeftElbowWidth(self, value)

    def rightWristWidth(self):
        return _body.PluginGait_rightWristWidth(self)

    def setRightWristWidth(self, value):
        return _body.PluginGait_setRightWristWidth(self, value)

    def leftWristWidth(self):
        return _body.PluginGait_leftWristWidth(self)

    def setLeftWristWidth(self, value):
        return _body.PluginGait_setLeftWristWidth(self, value)

    def rightHandThickness(self):
        return _body.PluginGait_rightHandThickness(self)

    def setRightHandThickness(self, value):
        return _body.PluginGait_setRightHandThickness(self, value)

    def leftHandThickness(self):
        return _body.PluginGait_leftHandThickness(self)

    def setLeftHandThickness(self, value):
        return _body.PluginGait_setLeftHandThickness(self, value)

    def interAsisDistance(self):
        return _body.PluginGait_interAsisDistance(self)

    def setInterAsisDistance(self, value):
        return _body.PluginGait_setInterAsisDistance(self, value)

    def rightLegLength(self):
        return _body.PluginGait_rightLegLength(self)

    def setRightLegLength(self, value):
        return _body.PluginGait_setRightLegLength(self, value)

    def leftLegLength(self):
        return _body.PluginGait_leftLegLength(self)

    def setLeftLegLength(self, value):
        return _body.PluginGait_setLeftLegLength(self, value)

    def rightAsisTrochanterAPDistance(self):
        return _body.PluginGait_rightAsisTrochanterAPDistance(self)

    def setRightAsisTrochanterAPDistance(self, value):
        return _body.PluginGait_setRightAsisTrochanterAPDistance(self, value)

    def leftAsisTrochanterAPDistance(self):
        return _body.PluginGait_leftAsisTrochanterAPDistance(self)

    def setLeftAsisTrochanterAPDistance(self, value):
        return _body.PluginGait_setLeftAsisTrochanterAPDistance(self, value)

    def rightTibialTorsionOffset(self):
        return _body.PluginGait_rightTibialTorsionOffset(self)

    def setRightTibialTorsionOffset(self, value):
        return _body.PluginGait_setRightTibialTorsionOffset(self, value)

    def leftTibialTorsionOffset(self):
        return _body.PluginGait_leftTibialTorsionOffset(self)

    def setLeftTibialTorsionOffset(self, value):
        return _body.PluginGait_setLeftTibialTorsionOffset(self, value)

    def rightThighRotationOffset(self):
        return _body.PluginGait_rightThighRotationOffset(self)

    def setRightThighRotationOffset(self, value):
        return _body.PluginGait_setRightThighRotationOffset(self, value)

    def leftThighRotationOffset(self):
        return _body.PluginGait_leftThighRotationOffset(self)

    def setLeftThighRotationOffset(self, value):
        return _body.PluginGait_setLeftThighRotationOffset(self, value)

    def rightShankRotationOffset(self):
        return _body.PluginGait_rightShankRotationOffset(self)

    def setRightShankRotationOffset(self, value):
        return _body.PluginGait_setRightShankRotationOffset(self, value)

    def leftShankRotationOffset(self):
        return _body.PluginGait_leftShankRotationOffset(self)

    def setLeftShankRotationOffset(self, value):
        return _body.PluginGait_setLeftShankRotationOffset(self, value)

    def rightKneeWidth(self):
        return _body.PluginGait_rightKneeWidth(self)

    def setRightKneeWidth(self, value):
        return _body.PluginGait_setRightKneeWidth(self, value)

    def leftKneeWidth(self):
        return _body.PluginGait_leftKneeWidth(self)

    def setLeftKneeWidth(self, value):
        return _body.PluginGait_setLeftKneeWidth(self, value)

    def rightAnkleWidth(self):
        return _body.PluginGait_rightAnkleWidth(self)

    def setRightAnkleWidth(self, value):
        return _body.PluginGait_setRightAnkleWidth(self, value)

    def leftAnkleWidth(self):
        return _body.PluginGait_leftAnkleWidth(self)

    def setLeftAnkleWidth(self, value):
        return _body.PluginGait_setLeftAnkleWidth(self, value)

    def rightFootFlatEnabled(self):
        return _body.PluginGait_rightFootFlatEnabled(self)

    def setRightFootFlatEnabled(self, value):
        return _body.PluginGait_setRightFootFlatEnabled(self, value)

    def leftFootFlatEnabled(self):
        return _body.PluginGait_leftFootFlatEnabled(self)

    def setLeftFootFlatEnabled(self, value):
        return _body.PluginGait_setLeftFootFlatEnabled(self, value)

    def headOffset(self):
        return _body.PluginGait_headOffset(self)

    def rightStaticPlantarFlexionOffset(self):
        return _body.PluginGait_rightStaticPlantarFlexionOffset(self)

    def rightStaticRotationOffset(self):
        return _body.PluginGait_rightStaticRotationOffset(self)

    def leftStaticPlantarFlexionOffset(self):
        return _body.PluginGait_leftStaticPlantarFlexionOffset(self)

    def leftStaticRotationOffset(self):
        return _body.PluginGait_leftStaticRotationOffset(self)

    def rightAnkleAbAddOffset(self):
        return _body.PluginGait_rightAnkleAbAddOffset(self)

    def leftAnkleAbAddOffset(self):
        return _body.PluginGait_leftAnkleAbAddOffset(self)
PluginGait_swigregister = _body.PluginGait_swigregister
PluginGait_swigregister(PluginGait)


def calibrate(helper, trials, subject=None):
    return _body.calibrate(helper, trials, subject)
calibrate = _body.calibrate

def reconstruct(helper, trials):
    return _body.reconstruct(helper, trials)
reconstruct = _body.reconstruct

def extract_joint_kinematics(input, sideAdaptation=True):
    return _body.extract_joint_kinematics(input, sideAdaptation)
extract_joint_kinematics = _body.extract_joint_kinematics

def extract_joint_kinetics(*args):
    return _body.extract_joint_kinetics(*args)
extract_joint_kinetics = _body.extract_joint_kinetics
# This file is compatible with both classic and new-style classes.
