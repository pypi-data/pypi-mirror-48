# coding: utf-8

"""
    Third party CA management API

    API for managing third party CA for creating certificates on Pelion Device Management

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CfsslAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cfssl_label': 'str',
        'cfssl_profile': 'str',
        'host_url': 'str'
    }

    attribute_map = {
        'cfssl_label': 'cfssl_label',
        'cfssl_profile': 'cfssl_profile',
        'host_url': 'host_url'
    }

    def __init__(self, cfssl_label=None, cfssl_profile=None, host_url=None):
        """
        CfsslAttributes - a model defined in Swagger
        """

        self._cfssl_label = cfssl_label
        self._cfssl_profile = cfssl_profile
        self._host_url = host_url
        self.discriminator = None

    @property
    def cfssl_label(self):
        """
        Gets the cfssl_label of this CfsslAttributes.
        The label that is used by CFSSL when creating the certificate. 

        :return: The cfssl_label of this CfsslAttributes.
        :rtype: str
        """
        return self._cfssl_label

    @cfssl_label.setter
    def cfssl_label(self, cfssl_label):
        """
        Sets the cfssl_label of this CfsslAttributes.
        The label that is used by CFSSL when creating the certificate. 

        :param cfssl_label: The cfssl_label of this CfsslAttributes.
        :type: str
        """

        self._cfssl_label = cfssl_label

    @property
    def cfssl_profile(self):
        """
        Gets the cfssl_profile of this CfsslAttributes.
        The profile that is configured on the CFSSL server and is used by CFSSL when creating the certificate. 

        :return: The cfssl_profile of this CfsslAttributes.
        :rtype: str
        """
        return self._cfssl_profile

    @cfssl_profile.setter
    def cfssl_profile(self, cfssl_profile):
        """
        Sets the cfssl_profile of this CfsslAttributes.
        The profile that is configured on the CFSSL server and is used by CFSSL when creating the certificate. 

        :param cfssl_profile: The cfssl_profile of this CfsslAttributes.
        :type: str
        """

        self._cfssl_profile = cfssl_profile

    @property
    def host_url(self):
        """
        Gets the host_url of this CfsslAttributes.
        The URL to connect to the CFSSL server. 

        :return: The host_url of this CfsslAttributes.
        :rtype: str
        """
        return self._host_url

    @host_url.setter
    def host_url(self, host_url):
        """
        Sets the host_url of this CfsslAttributes.
        The URL to connect to the CFSSL server. 

        :param host_url: The host_url of this CfsslAttributes.
        :type: str
        """
        if host_url is None:
            raise ValueError("Invalid value for `host_url`, must not be `None`")

        self._host_url = host_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CfsslAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
