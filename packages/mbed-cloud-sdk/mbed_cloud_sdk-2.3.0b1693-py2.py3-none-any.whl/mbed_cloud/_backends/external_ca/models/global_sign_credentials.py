# coding: utf-8

"""
    Third party CA management API

    API for managing third party CA for creating certificates on Pelion Device Management

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GlobalSignCredentials(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_key': 'str',
        'api_secret': 'str',
        'client_certificate': 'str',
        'passphrase': 'str',
        'private_key': 'str'
    }

    attribute_map = {
        'api_key': 'api_key',
        'api_secret': 'api_secret',
        'client_certificate': 'client_certificate',
        'passphrase': 'passphrase',
        'private_key': 'private_key'
    }

    def __init__(self, api_key=None, api_secret=None, client_certificate=None, passphrase=None, private_key=None):
        """
        GlobalSignCredentials - a model defined in Swagger
        """

        self._api_key = api_key
        self._api_secret = api_secret
        self._client_certificate = client_certificate
        self._passphrase = passphrase
        self._private_key = private_key
        self.discriminator = None

    @property
    def api_key(self):
        """
        Gets the api_key of this GlobalSignCredentials.
        Unique ID for API client (provided by GlobalSign). 

        :return: The api_key of this GlobalSignCredentials.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """
        Sets the api_key of this GlobalSignCredentials.
        Unique ID for API client (provided by GlobalSign). 

        :param api_key: The api_key of this GlobalSignCredentials.
        :type: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")
        if api_key is not None and len(api_key) > 1000:
            raise ValueError("Invalid value for `api_key`, length must be less than or equal to `1000`")

        self._api_key = api_key

    @property
    def api_secret(self):
        """
        Gets the api_secret of this GlobalSignCredentials.
        API Secret matching the API key (provided by GlobalSign). 

        :return: The api_secret of this GlobalSignCredentials.
        :rtype: str
        """
        return self._api_secret

    @api_secret.setter
    def api_secret(self, api_secret):
        """
        Sets the api_secret of this GlobalSignCredentials.
        API Secret matching the API key (provided by GlobalSign). 

        :param api_secret: The api_secret of this GlobalSignCredentials.
        :type: str
        """
        if api_secret is None:
            raise ValueError("Invalid value for `api_secret`, must not be `None`")
        if api_secret is not None and len(api_secret) > 250:
            raise ValueError("Invalid value for `api_secret`, length must be less than or equal to `250`")

        self._api_secret = api_secret

    @property
    def client_certificate(self):
        """
        Gets the client_certificate of this GlobalSignCredentials.
        The client certificate provided by GlobalSign to allow HTTPS connection over TLS/SSL. The certificate wraps a public key that matches a private key provided by the customer. The certificate must be in PEM format. 

        :return: The client_certificate of this GlobalSignCredentials.
        :rtype: str
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """
        Sets the client_certificate of this GlobalSignCredentials.
        The client certificate provided by GlobalSign to allow HTTPS connection over TLS/SSL. The certificate wraps a public key that matches a private key provided by the customer. The certificate must be in PEM format. 

        :param client_certificate: The client_certificate of this GlobalSignCredentials.
        :type: str
        """
        if client_certificate is None:
            raise ValueError("Invalid value for `client_certificate`, must not be `None`")
        if client_certificate is not None and len(client_certificate) > 3000:
            raise ValueError("Invalid value for `client_certificate`, length must be less than or equal to `3000`")

        self._client_certificate = client_certificate

    @property
    def passphrase(self):
        """
        Gets the passphrase of this GlobalSignCredentials.
        The passphrase to decrypt the private key in case it is encrypted. Empty if the private key is not encrypted. 

        :return: The passphrase of this GlobalSignCredentials.
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """
        Sets the passphrase of this GlobalSignCredentials.
        The passphrase to decrypt the private key in case it is encrypted. Empty if the private key is not encrypted. 

        :param passphrase: The passphrase of this GlobalSignCredentials.
        :type: str
        """
        if passphrase is not None and len(passphrase) > 1000:
            raise ValueError("Invalid value for `passphrase`, length must be less than or equal to `1000`")

        self._passphrase = passphrase

    @property
    def private_key(self):
        """
        Gets the private_key of this GlobalSignCredentials.
        The private key that matches the client certificate to allow HTTPS connection over TLS/SSL. The private key may be encrypted using a symmetric encryption key derived from a passphrase. The private key must be in PEM format. 

        :return: The private_key of this GlobalSignCredentials.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """
        Sets the private_key of this GlobalSignCredentials.
        The private key that matches the client certificate to allow HTTPS connection over TLS/SSL. The private key may be encrypted using a symmetric encryption key derived from a passphrase. The private key must be in PEM format. 

        :param private_key: The private_key of this GlobalSignCredentials.
        :type: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")
        if private_key is not None and len(private_key) > 3000:
            raise ValueError("Invalid value for `private_key`, length must be less than or equal to `3000`")

        self._private_key = private_key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GlobalSignCredentials):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
