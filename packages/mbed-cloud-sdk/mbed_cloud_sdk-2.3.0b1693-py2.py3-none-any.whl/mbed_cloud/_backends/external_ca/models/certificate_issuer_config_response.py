# coding: utf-8

"""
    Third party CA management API

    API for managing third party CA for creating certificates on Pelion Device Management

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CertificateIssuerConfigResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate_issuer_id': 'str',
        'created_at': 'datetime',
        'etag': 'str',
        'id': 'str',
        'is_custom': 'bool',
        'object': 'str',
        'reference': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'certificate_issuer_id': 'certificate_issuer_id',
        'created_at': 'created_at',
        'etag': 'etag',
        'id': 'id',
        'is_custom': 'is_custom',
        'object': 'object',
        'reference': 'reference',
        'updated_at': 'updated_at'
    }

    def __init__(self, certificate_issuer_id=None, created_at=None, etag=None, id=None, is_custom=None, object=None, reference=None, updated_at=None):
        """
        CertificateIssuerConfigResponse - a model defined in Swagger
        """

        self._certificate_issuer_id = certificate_issuer_id
        self._created_at = created_at
        self._etag = etag
        self._id = id
        self._is_custom = is_custom
        self._object = object
        self._reference = reference
        self._updated_at = updated_at
        self.discriminator = None

    @property
    def certificate_issuer_id(self):
        """
        Gets the certificate_issuer_id of this CertificateIssuerConfigResponse.
        The ID of the certificate issuer. Null if Device Management internal HSM is used. 

        :return: The certificate_issuer_id of this CertificateIssuerConfigResponse.
        :rtype: str
        """
        return self._certificate_issuer_id

    @certificate_issuer_id.setter
    def certificate_issuer_id(self, certificate_issuer_id):
        """
        Sets the certificate_issuer_id of this CertificateIssuerConfigResponse.
        The ID of the certificate issuer. Null if Device Management internal HSM is used. 

        :param certificate_issuer_id: The certificate_issuer_id of this CertificateIssuerConfigResponse.
        :type: str
        """

        self._certificate_issuer_id = certificate_issuer_id

    @property
    def created_at(self):
        """
        Gets the created_at of this CertificateIssuerConfigResponse.
        Created UTC time RFC3339.

        :return: The created_at of this CertificateIssuerConfigResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this CertificateIssuerConfigResponse.
        Created UTC time RFC3339.

        :param created_at: The created_at of this CertificateIssuerConfigResponse.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def etag(self):
        """
        Gets the etag of this CertificateIssuerConfigResponse.
        Entity instance signature.

        :return: The etag of this CertificateIssuerConfigResponse.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """
        Sets the etag of this CertificateIssuerConfigResponse.
        Entity instance signature.

        :param etag: The etag of this CertificateIssuerConfigResponse.
        :type: str
        """

        self._etag = etag

    @property
    def id(self):
        """
        Gets the id of this CertificateIssuerConfigResponse.
        The ID of the certificate issuer configuration. 

        :return: The id of this CertificateIssuerConfigResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CertificateIssuerConfigResponse.
        The ID of the certificate issuer configuration. 

        :param id: The id of this CertificateIssuerConfigResponse.
        :type: str
        """

        self._id = id

    @property
    def is_custom(self):
        """
        Gets the is_custom of this CertificateIssuerConfigResponse.

        :return: The is_custom of this CertificateIssuerConfigResponse.
        :rtype: bool
        """
        return self._is_custom

    @is_custom.setter
    def is_custom(self, is_custom):
        """
        Sets the is_custom of this CertificateIssuerConfigResponse.

        :param is_custom: The is_custom of this CertificateIssuerConfigResponse.
        :type: bool
        """

        self._is_custom = is_custom

    @property
    def object(self):
        """
        Gets the object of this CertificateIssuerConfigResponse.

        :return: The object of this CertificateIssuerConfigResponse.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this CertificateIssuerConfigResponse.

        :param object: The object of this CertificateIssuerConfigResponse.
        :type: str
        """
        allowed_values = ["certificate-issuer-configuration"]
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def reference(self):
        """
        Gets the reference of this CertificateIssuerConfigResponse.
        The certificate name to which the certificate issuer configuration applies.

        :return: The reference of this CertificateIssuerConfigResponse.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """
        Sets the reference of this CertificateIssuerConfigResponse.
        The certificate name to which the certificate issuer configuration applies.

        :param reference: The reference of this CertificateIssuerConfigResponse.
        :type: str
        """

        self._reference = reference

    @property
    def updated_at(self):
        """
        Gets the updated_at of this CertificateIssuerConfigResponse.
        Updated UTC time RFC3339.

        :return: The updated_at of this CertificateIssuerConfigResponse.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this CertificateIssuerConfigResponse.
        Updated UTC time RFC3339.

        :param updated_at: The updated_at of this CertificateIssuerConfigResponse.
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CertificateIssuerConfigResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
