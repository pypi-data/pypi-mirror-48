# coding: utf-8

"""
    Third party CA management API

    API for managing third party CA for creating certificates on Pelion Device Management

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CfsslAuthCredentials(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hmac_hex_key': 'str'
    }

    attribute_map = {
        'hmac_hex_key': 'hmac_hex_key'
    }

    def __init__(self, hmac_hex_key=None):
        """
        CfsslAuthCredentials - a model defined in Swagger
        """

        self._hmac_hex_key = hmac_hex_key
        self.discriminator = None

    @property
    def hmac_hex_key(self):
        """
        Gets the hmac_hex_key of this CfsslAuthCredentials.
        The key that is used to compute the HMAC of the request using the HMAC-SHA-256 algorithm. Must contain an even number of hexadecimal characters. 

        :return: The hmac_hex_key of this CfsslAuthCredentials.
        :rtype: str
        """
        return self._hmac_hex_key

    @hmac_hex_key.setter
    def hmac_hex_key(self, hmac_hex_key):
        """
        Sets the hmac_hex_key of this CfsslAuthCredentials.
        The key that is used to compute the HMAC of the request using the HMAC-SHA-256 algorithm. Must contain an even number of hexadecimal characters. 

        :param hmac_hex_key: The hmac_hex_key of this CfsslAuthCredentials.
        :type: str
        """
        if hmac_hex_key is None:
            raise ValueError("Invalid value for `hmac_hex_key`, must not be `None`")
        if hmac_hex_key is not None and len(hmac_hex_key) > 64:
            raise ValueError("Invalid value for `hmac_hex_key`, length must be less than or equal to `64`")
        if hmac_hex_key is not None and not re.search('^([a-fA-F0-9][a-fA-F0-9]){1,32}$', hmac_hex_key):
            raise ValueError("Invalid value for `hmac_hex_key`, must be a follow pattern or equal to `/^([a-fA-F0-9][a-fA-F0-9]){1,32}$/`")

        self._hmac_hex_key = hmac_hex_key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CfsslAuthCredentials):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
