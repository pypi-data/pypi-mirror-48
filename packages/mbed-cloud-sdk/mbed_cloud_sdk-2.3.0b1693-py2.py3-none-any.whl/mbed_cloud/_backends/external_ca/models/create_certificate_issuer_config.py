# coding: utf-8

"""
    Third party CA management API

    API for managing third party CA for creating certificates on Pelion Device Management

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CreateCertificateIssuerConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate_issuer_id': 'str',
        'reference': 'str'
    }

    attribute_map = {
        'certificate_issuer_id': 'certificate_issuer_id',
        'reference': 'reference'
    }

    def __init__(self, certificate_issuer_id=None, reference=None):
        """
        CreateCertificateIssuerConfig - a model defined in Swagger
        """

        self._certificate_issuer_id = certificate_issuer_id
        self._reference = reference
        self.discriminator = None

    @property
    def certificate_issuer_id(self):
        """
        Gets the certificate_issuer_id of this CreateCertificateIssuerConfig.
        The ID of the certificate issuer. 

        :return: The certificate_issuer_id of this CreateCertificateIssuerConfig.
        :rtype: str
        """
        return self._certificate_issuer_id

    @certificate_issuer_id.setter
    def certificate_issuer_id(self, certificate_issuer_id):
        """
        Sets the certificate_issuer_id of this CreateCertificateIssuerConfig.
        The ID of the certificate issuer. 

        :param certificate_issuer_id: The certificate_issuer_id of this CreateCertificateIssuerConfig.
        :type: str
        """
        if certificate_issuer_id is None:
            raise ValueError("Invalid value for `certificate_issuer_id`, must not be `None`")
        if certificate_issuer_id is not None and len(certificate_issuer_id) > 32:
            raise ValueError("Invalid value for `certificate_issuer_id`, length must be less than or equal to `32`")

        self._certificate_issuer_id = certificate_issuer_id

    @property
    def reference(self):
        """
        Gets the reference of this CreateCertificateIssuerConfig.
        The certificate name, as created in the factory, to which the certificate issuer configuration applies. The following names are reserved and cannot be configured: LwM2M, BOOTSTRAP. 

        :return: The reference of this CreateCertificateIssuerConfig.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """
        Sets the reference of this CreateCertificateIssuerConfig.
        The certificate name, as created in the factory, to which the certificate issuer configuration applies. The following names are reserved and cannot be configured: LwM2M, BOOTSTRAP. 

        :param reference: The reference of this CreateCertificateIssuerConfig.
        :type: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")
        if reference is not None and len(reference) > 50:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `50`")
        if reference is not None and not re.search('(?!mbed\\.)[\\w-_.]{1,50}', reference):
            raise ValueError("Invalid value for `reference`, must be a follow pattern or equal to `/(?!mbed\\.)[\\w-_.]{1,50}/`")

        self._reference = reference

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CreateCertificateIssuerConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
