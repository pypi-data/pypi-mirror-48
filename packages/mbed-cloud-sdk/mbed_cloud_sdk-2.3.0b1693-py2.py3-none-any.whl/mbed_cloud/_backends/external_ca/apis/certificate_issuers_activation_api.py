# coding: utf-8

"""
    Third party CA management API

    API for managing third party CA for creating certificates on Pelion Device Management

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class CertificateIssuersActivationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_certificate_issuer_config(self, create_certificate_issuer_config, **kwargs):  # noqa: E501
        """Create certificate issuer configuration.  # noqa: E501

        Configure the certificate issuer to be used when creating the device custom certificates. <br> **Example usage:**  ``` curl -X POST \\ -H 'authorization: <valid access token>' \\ -H 'content-type: application/json;charset=UTF-8' \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ -d '{   \"reference\": \"customer.dlms\",   \"certificate_issuer_id\": \"01621a36719d507b9d48a91b00000000\" }' ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.create_certificate_issuer_config(create_certificate_issuer_config, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param CreateCertificateIssuerConfig create_certificate_issuer_config: Certificate issuer configuration request (required)
        :return: CertificateIssuerConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.create_certificate_issuer_config_with_http_info(create_certificate_issuer_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_certificate_issuer_config_with_http_info(create_certificate_issuer_config, **kwargs)  # noqa: E501
            return data

    def create_certificate_issuer_config_with_http_info(self, create_certificate_issuer_config, **kwargs):  # noqa: E501
        """Create certificate issuer configuration.  # noqa: E501

        Configure the certificate issuer to be used when creating the device custom certificates. <br> **Example usage:**  ``` curl -X POST \\ -H 'authorization: <valid access token>' \\ -H 'content-type: application/json;charset=UTF-8' \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ -d '{   \"reference\": \"customer.dlms\",   \"certificate_issuer_id\": \"01621a36719d507b9d48a91b00000000\" }' ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.create_certificate_issuer_config_with_http_info(create_certificate_issuer_config, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param CreateCertificateIssuerConfig create_certificate_issuer_config: Certificate issuer configuration request (required)
        :return: CertificateIssuerConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_certificate_issuer_config']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_certificate_issuer_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_certificate_issuer_config' is set
        if ('create_certificate_issuer_config' not in params or
                params['create_certificate_issuer_config'] is None):
            raise ValueError("Missing the required parameter `create_certificate_issuer_config` when calling `create_certificate_issuer_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_certificate_issuer_config' in params:
            body_params = params['create_certificate_issuer_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/certificate-issuer-configurations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateIssuerConfigResponse',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_certificate_issuer_config_by_id(self, certificate_issuer_configuration_id, **kwargs):  # noqa: E501
        """Delete certificate issuer configuration.  # noqa: E501

        Delete the configured certificate issuer configuration. You can only delete the configurations of custom certificates.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.delete_certificate_issuer_config_by_id(certificate_issuer_configuration_id, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str certificate_issuer_configuration_id: The ID of the certificate issuer configuration.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.delete_certificate_issuer_config_by_id_with_http_info(certificate_issuer_configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_certificate_issuer_config_by_id_with_http_info(certificate_issuer_configuration_id, **kwargs)  # noqa: E501
            return data

    def delete_certificate_issuer_config_by_id_with_http_info(self, certificate_issuer_configuration_id, **kwargs):  # noqa: E501
        """Delete certificate issuer configuration.  # noqa: E501

        Delete the configured certificate issuer configuration. You can only delete the configurations of custom certificates.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.delete_certificate_issuer_config_by_id_with_http_info(certificate_issuer_configuration_id, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str certificate_issuer_configuration_id: The ID of the certificate issuer configuration.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['certificate_issuer_configuration_id']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_certificate_issuer_config_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'certificate_issuer_configuration_id' is set
        if ('certificate_issuer_configuration_id' not in params or
                params['certificate_issuer_configuration_id'] is None):
            raise ValueError("Missing the required parameter `certificate_issuer_configuration_id` when calling `delete_certificate_issuer_config_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'certificate_issuer_configuration_id' in params:
            path_params['certificate-issuer-configuration-id'] = params['certificate_issuer_configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/certificate-issuer-configurations/{certificate-issuer-configuration-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_certificate_issuer_config(self, **kwargs):  # noqa: E501
        """Get certificate issuer configuration.  # noqa: E501

        Provides the configured certificate issuer to be used when creating device certificates for LwM2M communication.<br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_certificate_issuer_config(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :return: CertificateIssuerConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.get_certificate_issuer_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_certificate_issuer_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_certificate_issuer_config_with_http_info(self, **kwargs):  # noqa: E501
        """Get certificate issuer configuration.  # noqa: E501

        Provides the configured certificate issuer to be used when creating device certificates for LwM2M communication.<br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_certificate_issuer_config_with_http_info(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :return: CertificateIssuerConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_certificate_issuer_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/certificate-issuer-configurations/lwm2m', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateIssuerConfigResponse',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_certificate_issuer_config_by_id(self, certificate_issuer_configuration_id, **kwargs):  # noqa: E501
        """Get certificate issuer configuration.  # noqa: E501

        Provides the configured certificate issuer.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_certificate_issuer_config_by_id(certificate_issuer_configuration_id, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str certificate_issuer_configuration_id: The ID of the certificate issuer configuration.  (required)
        :return: CertificateIssuerConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.get_certificate_issuer_config_by_id_with_http_info(certificate_issuer_configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_certificate_issuer_config_by_id_with_http_info(certificate_issuer_configuration_id, **kwargs)  # noqa: E501
            return data

    def get_certificate_issuer_config_by_id_with_http_info(self, certificate_issuer_configuration_id, **kwargs):  # noqa: E501
        """Get certificate issuer configuration.  # noqa: E501

        Provides the configured certificate issuer.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_certificate_issuer_config_by_id_with_http_info(certificate_issuer_configuration_id, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str certificate_issuer_configuration_id: The ID of the certificate issuer configuration.  (required)
        :return: CertificateIssuerConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['certificate_issuer_configuration_id']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_certificate_issuer_config_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'certificate_issuer_configuration_id' is set
        if ('certificate_issuer_configuration_id' not in params or
                params['certificate_issuer_configuration_id'] is None):
            raise ValueError("Missing the required parameter `certificate_issuer_configuration_id` when calling `get_certificate_issuer_config_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'certificate_issuer_configuration_id' in params:
            path_params['certificate-issuer-configuration-id'] = params['certificate_issuer_configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/certificate-issuer-configurations/{certificate-issuer-configuration-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateIssuerConfigResponse',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_certificate_issuer_configs(self, **kwargs):  # noqa: E501
        """Get certificate issuer configurations.  # noqa: E501

        Get certificate issuer configurations, optionally filtered by reference. <br> **Example usage:**  ``` curl \\ -H 'authorization: <valid access token>' \\ -H 'content-type: application/json;charset=UTF-8' \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ ``` ``` curl \\ -H 'authorization: <valid access token>' \\ -H 'content-type: application/json;charset=UTF-8' \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations?reference__eq=dlms \\ ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_certificate_issuer_configs(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str reference__eq: The certificate name to which the certificate issuer configuration applies.
        :return: CertificateIssuerConfigListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.get_certificate_issuer_configs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_certificate_issuer_configs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_certificate_issuer_configs_with_http_info(self, **kwargs):  # noqa: E501
        """Get certificate issuer configurations.  # noqa: E501

        Get certificate issuer configurations, optionally filtered by reference. <br> **Example usage:**  ``` curl \\ -H 'authorization: <valid access token>' \\ -H 'content-type: application/json;charset=UTF-8' \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ ``` ``` curl \\ -H 'authorization: <valid access token>' \\ -H 'content-type: application/json;charset=UTF-8' \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations?reference__eq=dlms \\ ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_certificate_issuer_configs_with_http_info(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str reference__eq: The certificate name to which the certificate issuer configuration applies.
        :return: CertificateIssuerConfigListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reference__eq']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_certificate_issuer_configs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'reference__eq' in params:
            query_params.append(('reference__eq', params['reference__eq']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/certificate-issuer-configurations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateIssuerConfigListResponse',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_certificate_issuer_config(self, certificate_issuer_config_request, **kwargs):  # noqa: E501
        """Update certificate issuer configuration.  # noqa: E501

        Configure the certificate issuer to be used when creating device certificates for LwM2M communication. <br> **Example usage:**  ``` curl -X PUT \\ -H 'authorization: <valid access token>' \\ -H 'content-type: application/json;charset=UTF-8' \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations/lwm2m \\ -d '{   \"certificate_issuer_id\": \"01621a36719d507b9d48a91b00000000\" }' ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.update_certificate_issuer_config(certificate_issuer_config_request, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param CertificateIssuerConfigRequest certificate_issuer_config_request: Certificate Issuer Configuration Request (required)
        :return: CertificateIssuerConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.update_certificate_issuer_config_with_http_info(certificate_issuer_config_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_certificate_issuer_config_with_http_info(certificate_issuer_config_request, **kwargs)  # noqa: E501
            return data

    def update_certificate_issuer_config_with_http_info(self, certificate_issuer_config_request, **kwargs):  # noqa: E501
        """Update certificate issuer configuration.  # noqa: E501

        Configure the certificate issuer to be used when creating device certificates for LwM2M communication. <br> **Example usage:**  ``` curl -X PUT \\ -H 'authorization: <valid access token>' \\ -H 'content-type: application/json;charset=UTF-8' \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations/lwm2m \\ -d '{   \"certificate_issuer_id\": \"01621a36719d507b9d48a91b00000000\" }' ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.update_certificate_issuer_config_with_http_info(certificate_issuer_config_request, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param CertificateIssuerConfigRequest certificate_issuer_config_request: Certificate Issuer Configuration Request (required)
        :return: CertificateIssuerConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['certificate_issuer_config_request']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_certificate_issuer_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'certificate_issuer_config_request' is set
        if ('certificate_issuer_config_request' not in params or
                params['certificate_issuer_config_request'] is None):
            raise ValueError("Missing the required parameter `certificate_issuer_config_request` when calling `update_certificate_issuer_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'certificate_issuer_config_request' in params:
            body_params = params['certificate_issuer_config_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/certificate-issuer-configurations/lwm2m', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateIssuerConfigResponse',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_certificate_issuer_config_by_id(self, certificate_issuer_configuration_id, certificate_issuer_config_request, **kwargs):  # noqa: E501
        """Update certificate issuer configuration.  # noqa: E501

        Update the configured certificate issuer configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.update_certificate_issuer_config_by_id(certificate_issuer_configuration_id, certificate_issuer_config_request, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str certificate_issuer_configuration_id: The ID of the certificate issuer configuration.  (required)
        :param CertificateIssuerConfigRequest certificate_issuer_config_request: Certificate issuer configuration request (required)
        :return: CertificateIssuerConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.update_certificate_issuer_config_by_id_with_http_info(certificate_issuer_configuration_id, certificate_issuer_config_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_certificate_issuer_config_by_id_with_http_info(certificate_issuer_configuration_id, certificate_issuer_config_request, **kwargs)  # noqa: E501
            return data

    def update_certificate_issuer_config_by_id_with_http_info(self, certificate_issuer_configuration_id, certificate_issuer_config_request, **kwargs):  # noqa: E501
        """Update certificate issuer configuration.  # noqa: E501

        Update the configured certificate issuer configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.update_certificate_issuer_config_by_id_with_http_info(certificate_issuer_configuration_id, certificate_issuer_config_request, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str certificate_issuer_configuration_id: The ID of the certificate issuer configuration.  (required)
        :param CertificateIssuerConfigRequest certificate_issuer_config_request: Certificate issuer configuration request (required)
        :return: CertificateIssuerConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['certificate_issuer_configuration_id', 'certificate_issuer_config_request']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_certificate_issuer_config_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'certificate_issuer_configuration_id' is set
        if ('certificate_issuer_configuration_id' not in params or
                params['certificate_issuer_configuration_id'] is None):
            raise ValueError("Missing the required parameter `certificate_issuer_configuration_id` when calling `update_certificate_issuer_config_by_id`")  # noqa: E501
        # verify the required parameter 'certificate_issuer_config_request' is set
        if ('certificate_issuer_config_request' not in params or
                params['certificate_issuer_config_request'] is None):
            raise ValueError("Missing the required parameter `certificate_issuer_config_request` when calling `update_certificate_issuer_config_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'certificate_issuer_configuration_id' in params:
            path_params['certificate-issuer-configuration-id'] = params['certificate_issuer_configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'certificate_issuer_config_request' in params:
            body_params = params['certificate_issuer_config_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/certificate-issuer-configurations/{certificate-issuer-configuration-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateIssuerConfigResponse',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
