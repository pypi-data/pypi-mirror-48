# coding: utf-8

"""
    Connect API

    Pelion Device Management Connect API allows web applications to communicate with devices. You can subscribe to device resources and read/write values to them. Device Management Connect allows connectivity to devices by queueing requests and caching resource values.

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WebsocketChannel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_id': 'str',
        'queue_size': 'int',
        'status': 'str'
    }

    attribute_map = {
        'channel_id': 'channelId',
        'queue_size': 'queueSize',
        'status': 'status'
    }

    def __init__(self, channel_id=None, queue_size=None, status='disconnected'):
        """
        WebsocketChannel - a model defined in Swagger
        """

        self._channel_id = channel_id
        self._queue_size = queue_size
        self._status = status
        self.discriminator = None

    @property
    def channel_id(self):
        """
        Gets the channel_id of this WebsocketChannel.
        Unique identifier of the channel

        :return: The channel_id of this WebsocketChannel.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """
        Sets the channel_id of this WebsocketChannel.
        Unique identifier of the channel

        :param channel_id: The channel_id of this WebsocketChannel.
        :type: str
        """

        self._channel_id = channel_id

    @property
    def queue_size(self):
        """
        Gets the queue_size of this WebsocketChannel.
        Number of events in the channel's event queue waiting to be delivered.

        :return: The queue_size of this WebsocketChannel.
        :rtype: int
        """
        return self._queue_size

    @queue_size.setter
    def queue_size(self, queue_size):
        """
        Sets the queue_size of this WebsocketChannel.
        Number of events in the channel's event queue waiting to be delivered.

        :param queue_size: The queue_size of this WebsocketChannel.
        :type: int
        """

        self._queue_size = queue_size

    @property
    def status(self):
        """
        Gets the status of this WebsocketChannel.
        Channel status will be 'connected' when the channel has an active WebSocket bound to it. The state will be 'disconnected' when either the channel or the WebSocket bound to it is closed. 

        :return: The status of this WebsocketChannel.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this WebsocketChannel.
        Channel status will be 'connected' when the channel has an active WebSocket bound to it. The state will be 'disconnected' when either the channel or the WebSocket bound to it is closed. 

        :param status: The status of this WebsocketChannel.
        :type: str
        """
        allowed_values = ["connected", "disconnected"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WebsocketChannel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
