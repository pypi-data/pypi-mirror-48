# coding: utf-8

"""
    Account Management API

    API for managing accounts, users, creating API keys, uploading trusted certificates

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class DeveloperApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_my_api_key_to_groups(self, body, **kwargs):  # noqa: E501
        """Add API key to a list of groups.  # noqa: E501

        An endpoint for adding API key to groups.   **Example usage:** `curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups -d '[0162056a9a1586f30242590700000000,0117056a9a1586f30242590700000000]' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.add_my_api_key_to_groups(body, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param list[str] body: A list of IDs of the groups to be updated. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.add_my_api_key_to_groups_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_my_api_key_to_groups_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_my_api_key_to_groups_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add API key to a list of groups.  # noqa: E501

        An endpoint for adding API key to groups.   **Example usage:** `curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups -d '[0162056a9a1586f30242590700000000,0117056a9a1586f30242590700000000]' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.add_my_api_key_to_groups_with_http_info(body, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param list[str] body: A list of IDs of the groups to be updated. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_my_api_key_to_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_my_api_key_to_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/api-keys/me/groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdatedResponse',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_api_key(self, body, **kwargs):  # noqa: E501
        """Create a new API key.  # noqa: E501

        An endpoint for creating a new API key.   **Example usage:** `curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d '{\"name\": \"MyKey1\"}' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.create_api_key(body, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param ApiKeyInfoReq body: The details of the API key to be created. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.create_api_key_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_api_key_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_api_key_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new API key.  # noqa: E501

        An endpoint for creating a new API key.   **Example usage:** `curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d '{\"name\": \"MyKey1\"}' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.create_api_key_with_http_info(body, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param ApiKeyInfoReq body: The details of the API key to be created. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_api_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/api-keys', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiKeyInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_api_key(self, api_key, **kwargs):  # noqa: E501
        """Delete API key.  # noqa: E501

        An endpoint for deleting the API key.   **Example usage:** `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.delete_api_key(api_key, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str api_key: The ID of the API key to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.delete_api_key_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_api_key_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def delete_api_key_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Delete API key.  # noqa: E501

        An endpoint for deleting the API key.   **Example usage:** `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.delete_api_key_with_http_info(api_key, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str api_key: The ID of the API key to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `delete_api_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/api-keys/{apiKey}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_certificate(self, cert_id, **kwargs):  # noqa: E501
        """Delete a trusted certificate by ID.  # noqa: E501

        An endpoint for deleting a trusted certificate.   **Example usage:** `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.delete_certificate(cert_id, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str cert_id: The ID of the trusted certificate to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.delete_certificate_with_http_info(cert_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_certificate_with_http_info(cert_id, **kwargs)  # noqa: E501
            return data

    def delete_certificate_with_http_info(self, cert_id, **kwargs):  # noqa: E501
        """Delete a trusted certificate by ID.  # noqa: E501

        An endpoint for deleting a trusted certificate.   **Example usage:** `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.delete_certificate_with_http_info(cert_id, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str cert_id: The ID of the trusted certificate to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cert_id']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params or
                params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `delete_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cert_id' in params:
            path_params['cert-id'] = params['cert_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trusted-certificates/{cert-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_api_keys(self, **kwargs):  # noqa: E501
        """Get all API keys  # noqa: E501

        An endpoint for retrieving API keys in an array, optionally filtered by the owner.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/api-keys -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_all_api_keys(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str key__eq: API key filter.
        :param str owner__eq: Owner name filter.
        :return: ApiKeyInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.get_all_api_keys_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_api_keys_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_api_keys_with_http_info(self, **kwargs):  # noqa: E501
        """Get all API keys  # noqa: E501

        An endpoint for retrieving API keys in an array, optionally filtered by the owner.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/api-keys -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_all_api_keys_with_http_info(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str key__eq: API key filter.
        :param str owner__eq: Owner name filter.
        :return: ApiKeyInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'after', 'order', 'include', 'key__eq', 'owner__eq']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_api_keys" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'key__eq' in params:
            query_params.append(('key__eq', params['key__eq']))  # noqa: E501
        if 'owner__eq' in params:
            query_params.append(('owner__eq', params['owner__eq']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/api-keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiKeyInfoRespList',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_certificates(self, **kwargs):  # noqa: E501
        """Get all trusted certificates.  # noqa: E501

        An endpoint for retrieving trusted certificates in an array.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_all_certificates(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str name__eq: Filter for certificate name
        :param str service__eq: Service filter, either lwm2m or bootstrap
        :param int expire__eq: Expire filter in days
        :param int device_execution_mode__eq: Device execution mode, as 1 for developer certificates or as another natural integer value
        :param int device_execution_mode__neq: Device execution mode not equals filter
        :param str owner__eq: Owner name filter
        :param bool enrollment_mode__eq: Enrollment mode filter
        :param str issuer__like: Issuer filter. Finds all matches where the filter value is a case insensitive substring of the result. Example: issuer__like=cn=iss matches CN=issuer.
        :param str subject__like: Subject filter. Finds all matches where the filter value is a case insensitive substring of the result. Example: subject__like=cn=su matches CN=subject.
        :return: TrustedCertificateRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.get_all_certificates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_certificates_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_certificates_with_http_info(self, **kwargs):  # noqa: E501
        """Get all trusted certificates.  # noqa: E501

        An endpoint for retrieving trusted certificates in an array.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_all_certificates_with_http_info(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str name__eq: Filter for certificate name
        :param str service__eq: Service filter, either lwm2m or bootstrap
        :param int expire__eq: Expire filter in days
        :param int device_execution_mode__eq: Device execution mode, as 1 for developer certificates or as another natural integer value
        :param int device_execution_mode__neq: Device execution mode not equals filter
        :param str owner__eq: Owner name filter
        :param bool enrollment_mode__eq: Enrollment mode filter
        :param str issuer__like: Issuer filter. Finds all matches where the filter value is a case insensitive substring of the result. Example: issuer__like=cn=iss matches CN=issuer.
        :param str subject__like: Subject filter. Finds all matches where the filter value is a case insensitive substring of the result. Example: subject__like=cn=su matches CN=subject.
        :return: TrustedCertificateRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'after', 'order', 'include', 'name__eq', 'service__eq', 'expire__eq', 'device_execution_mode__eq', 'device_execution_mode__neq', 'owner__eq', 'enrollment_mode__eq', 'issuer__like', 'subject__like']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_certificates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'name__eq' in params:
            query_params.append(('name__eq', params['name__eq']))  # noqa: E501
        if 'service__eq' in params:
            query_params.append(('service__eq', params['service__eq']))  # noqa: E501
        if 'expire__eq' in params:
            query_params.append(('expire__eq', params['expire__eq']))  # noqa: E501
        if 'device_execution_mode__eq' in params:
            query_params.append(('device_execution_mode__eq', params['device_execution_mode__eq']))  # noqa: E501
        if 'device_execution_mode__neq' in params:
            query_params.append(('device_execution_mode__neq', params['device_execution_mode__neq']))  # noqa: E501
        if 'owner__eq' in params:
            query_params.append(('owner__eq', params['owner__eq']))  # noqa: E501
        if 'enrollment_mode__eq' in params:
            query_params.append(('enrollment_mode__eq', params['enrollment_mode__eq']))  # noqa: E501
        if 'issuer__like' in params:
            query_params.append(('issuer__like', params['issuer__like']))  # noqa: E501
        if 'subject__like' in params:
            query_params.append(('subject__like', params['subject__like']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trusted-certificates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrustedCertificateRespList',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_groups(self, **kwargs):  # noqa: E501
        """Get all group information.  # noqa: E501

        An endpoint for retrieving all group information.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/policy-groups -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_all_groups(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str name__eq: Filter for group name
        :return: GroupSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.get_all_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_groups_with_http_info(self, **kwargs):  # noqa: E501
        """Get all group information.  # noqa: E501

        An endpoint for retrieving all group information.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/policy-groups -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_all_groups_with_http_info(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str name__eq: Filter for group name
        :return: GroupSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'after', 'order', 'include', 'name__eq']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'name__eq' in params:
            query_params.append(('name__eq', params['name__eq']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/policy-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_key(self, api_key, **kwargs):  # noqa: E501
        """Get API key details.  # noqa: E501

        An endpoint for retrieving API key details.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_api_key(api_key, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str api_key: The ID of the API key to be retrieved. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.get_api_key_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_key_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def get_api_key_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Get API key details.  # noqa: E501

        An endpoint for retrieving API key details.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_api_key_with_http_info(api_key, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str api_key: The ID of the API key to be retrieved. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `get_api_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/api-keys/{apiKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiKeyInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_keys_of_group(self, group_id, **kwargs):  # noqa: E501
        """Get the API keys of a group.  # noqa: E501

        An endpoint for listing the API keys of the group with details.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group-id}/api-keys -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_api_keys_of_group(group_id, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str group_id: The ID of the group whose API keys are retrieved. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: ApiKeyInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.get_api_keys_of_group_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_keys_of_group_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_api_keys_of_group_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """Get the API keys of a group.  # noqa: E501

        An endpoint for listing the API keys of the group with details.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group-id}/api-keys -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_api_keys_of_group_with_http_info(group_id, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str group_id: The ID of the group whose API keys are retrieved. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: ApiKeyInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'limit', 'after', 'order', 'include']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_keys_of_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_api_keys_of_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/policy-groups/{groupID}/api-keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiKeyInfoRespList',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_certificate(self, cert_id, **kwargs):  # noqa: E501
        """Get trusted certificate by ID.  # noqa: E501

        An endpoint for retrieving a trusted certificate by ID.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_certificate(cert_id, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str cert_id: The ID of the trusted certificate to be retrieved. (required)
        :return: TrustedCertificateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.get_certificate_with_http_info(cert_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_certificate_with_http_info(cert_id, **kwargs)  # noqa: E501
            return data

    def get_certificate_with_http_info(self, cert_id, **kwargs):  # noqa: E501
        """Get trusted certificate by ID.  # noqa: E501

        An endpoint for retrieving a trusted certificate by ID.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_certificate_with_http_info(cert_id, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str cert_id: The ID of the trusted certificate to be retrieved. (required)
        :return: TrustedCertificateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cert_id']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params or
                params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `get_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cert_id' in params:
            path_params['cert-id'] = params['cert_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trusted-certificates/{cert-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrustedCertificateResp',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_group_summary(self, group_id, **kwargs):  # noqa: E501
        """Get group information.  # noqa: E501

        An endpoint for getting general information about the group.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group-id} -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_group_summary(group_id, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str group_id: The ID of the group to be retrieved. (required)
        :return: GroupSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.get_group_summary_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_group_summary_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def get_group_summary_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """Get group information.  # noqa: E501

        An endpoint for getting general information about the group.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group-id} -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_group_summary_with_http_info(group_id, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str group_id: The ID of the group to be retrieved. (required)
        :return: GroupSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_group_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/policy-groups/{groupID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupSummary',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_groups_of_my_api_key(self, **kwargs):  # noqa: E501
        """Get groups of the API key.  # noqa: E501

        An endpoint for retrieving groups of the API key.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_groups_of_my_api_key(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: GroupSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.get_groups_of_my_api_key_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_groups_of_my_api_key_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_groups_of_my_api_key_with_http_info(self, **kwargs):  # noqa: E501
        """Get groups of the API key.  # noqa: E501

        An endpoint for retrieving groups of the API key.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_groups_of_my_api_key_with_http_info(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records based on creation time, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: GroupSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'after', 'order', 'include']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups_of_my_api_key" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/api-keys/me/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupSummaryList',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_my_account_info(self, **kwargs):  # noqa: E501
        """Get account info.  # noqa: E501

        Returns detailed information about the account.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/accounts/me?include=policies -H 'Authorization: Bearer API_KEY'`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_my_account_info(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str include: Comma separated additional data to return. Currently supported: limits, policies, sub_accounts.
        :param str properties: Property name to be returned from account specific properties.
        :return: AccountInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.get_my_account_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_my_account_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_my_account_info_with_http_info(self, **kwargs):  # noqa: E501
        """Get account info.  # noqa: E501

        Returns detailed information about the account.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/accounts/me?include=policies -H 'Authorization: Bearer API_KEY'`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_my_account_info_with_http_info(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str include: Comma separated additional data to return. Currently supported: limits, policies, sub_accounts.
        :param str properties: Property name to be returned from account specific properties.
        :return: AccountInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include', 'properties']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_my_account_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'properties' in params:
            query_params.append(('properties', params['properties']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/accounts/me', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountInfo',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_my_api_key(self, **kwargs):  # noqa: E501
        """Get API key details.  # noqa: E501

        An endpoint for retrieving API key details.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_my_api_key(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.get_my_api_key_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_my_api_key_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_my_api_key_with_http_info(self, **kwargs):  # noqa: E501
        """Get API key details.  # noqa: E501

        An endpoint for retrieving API key details.   **Example usage:** `curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.get_my_api_key_with_http_info(asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_my_api_key" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/api-keys/me', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiKeyInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_api_keys_from_group(self, group_id, body, **kwargs):  # noqa: E501
        """Remove API keys from a group.  # noqa: E501

        An endpoint for removing API keys from groups.   **Example usage:** `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group-id}/api-keys -d '[0162056a9a1586f30242590700000000,0117056a9a1586f30242590700000000]' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.remove_api_keys_from_group(group_id, body, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str group_id: The ID of the group whose API keys are removed. (required)
        :param SubjectList body: A list of API keys to be removed from the group. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.remove_api_keys_from_group_with_http_info(group_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_api_keys_from_group_with_http_info(group_id, body, **kwargs)  # noqa: E501
            return data

    def remove_api_keys_from_group_with_http_info(self, group_id, body, **kwargs):  # noqa: E501
        """Remove API keys from a group.  # noqa: E501

        An endpoint for removing API keys from groups.   **Example usage:** `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group-id}/api-keys -d '[0162056a9a1586f30242590700000000,0117056a9a1586f30242590700000000]' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.remove_api_keys_from_group_with_http_info(group_id, body, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str group_id: The ID of the group whose API keys are removed. (required)
        :param SubjectList body: A list of API keys to be removed from the group. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'body']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_api_keys_from_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `remove_api_keys_from_group`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `remove_api_keys_from_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/policy-groups/{groupID}/api-keys', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdatedResponse',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_my_api_key_from_groups(self, body, **kwargs):  # noqa: E501
        """Remove API key from groups.  # noqa: E501

        An endpoint for removing API key from groups.   **Example usage:** `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups -d '[0162056a9a1586f30242590700000000,0117056a9a1586f30242590700000000]' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.remove_my_api_key_from_groups(body, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param list[str] body: A list of IDs of the groups to be updated. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.remove_my_api_key_from_groups_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_my_api_key_from_groups_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def remove_my_api_key_from_groups_with_http_info(self, body, **kwargs):  # noqa: E501
        """Remove API key from groups.  # noqa: E501

        An endpoint for removing API key from groups.   **Example usage:** `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups -d '[0162056a9a1586f30242590700000000,0117056a9a1586f30242590700000000]' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.remove_my_api_key_from_groups_with_http_info(body, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param list[str] body: A list of IDs of the groups to be updated. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_my_api_key_from_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `remove_my_api_key_from_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/api-keys/me/groups', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdatedResponse',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_api_key(self, api_key, body, **kwargs):  # noqa: E501
        """Update API key details.  # noqa: E501

        An endpoint for updating API key details.   **Example usage:** `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -d '{\"name\": \"TestApiKey25\"}' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.update_api_key(api_key, body, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str api_key: The ID of the API key to be updated. (required)
        :param ApiKeyUpdateReq body: New API key attributes to be stored. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.update_api_key_with_http_info(api_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_api_key_with_http_info(api_key, body, **kwargs)  # noqa: E501
            return data

    def update_api_key_with_http_info(self, api_key, body, **kwargs):  # noqa: E501
        """Update API key details.  # noqa: E501

        An endpoint for updating API key details.   **Example usage:** `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -d '{\"name\": \"TestApiKey25\"}' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.update_api_key_with_http_info(api_key, body, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str api_key: The ID of the API key to be updated. (required)
        :param ApiKeyUpdateReq body: New API key attributes to be stored. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'body']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `update_api_key`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_api_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/api-keys/{apiKey}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiKeyInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_certificate(self, cert_id, body, **kwargs):  # noqa: E501
        """Update trusted certificate.  # noqa: E501

        An endpoint for updating existing trusted certificates.   **Example usage:** `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -d {\"description\": \"very important cert\"} -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.update_certificate(cert_id, body, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str cert_id: The ID of the trusted certificate to be updated. (required)
        :param TrustedCertificateUpdateReq body: A trusted certificate object with attributes. (required)
        :return: TrustedCertificateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.update_certificate_with_http_info(cert_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_certificate_with_http_info(cert_id, body, **kwargs)  # noqa: E501
            return data

    def update_certificate_with_http_info(self, cert_id, body, **kwargs):  # noqa: E501
        """Update trusted certificate.  # noqa: E501

        An endpoint for updating existing trusted certificates.   **Example usage:** `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -d {\"description\": \"very important cert\"} -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.update_certificate_with_http_info(cert_id, body, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param str cert_id: The ID of the trusted certificate to be updated. (required)
        :param TrustedCertificateUpdateReq body: A trusted certificate object with attributes. (required)
        :return: TrustedCertificateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cert_id', 'body']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params or
                params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `update_certificate`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cert_id' in params:
            path_params['cert-id'] = params['cert_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/trusted-certificates/{cert-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrustedCertificateResp',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_my_api_key(self, body, **kwargs):  # noqa: E501
        """Update API key details.  # noqa: E501

        An endpoint for updating API key details.   **Example usage:** `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/me -d '{\"name\": \"TestApiKey25\"}' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.update_my_api_key(body, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param ApiKeyUpdateReq body: New API key attributes to be stored. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('asynchronous'):
            return self.update_my_api_key_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_my_api_key_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_my_api_key_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update API key details.  # noqa: E501

        An endpoint for updating API key details.   **Example usage:** `curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/me -d '{\"name\": \"TestApiKey25\"}' -H 'content-type: application/json' -H 'Authorization: Bearer API_KEY'`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass asynchronous=True
        >>> thread = api.update_my_api_key_with_http_info(body, asynchronous=True)
        >>> result = thread.get()

        :param asynchronous bool
        :param ApiKeyUpdateReq body: New API key attributes to be stored. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('asynchronous')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_my_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_my_api_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/v3/api-keys/me', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiKeyInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            asynchronous=params.get('asynchronous'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
