# coding: utf-8

"""
    Endpoints

    Endpoints API for different services in SKIL  # noqa: E501

    The version of the OpenAPI document: 1.2.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Token(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'token_id': 'int',
        'issued': 'int',
        'expire': 'int',
        'token': 'str',
        'user_id': 'str',
        'is_revoked': 'int'
    }

    attribute_map = {
        'token_id': 'tokenId',
        'issued': 'issued',
        'expire': 'expire',
        'token': 'token',
        'user_id': 'userId',
        'is_revoked': 'isRevoked'
    }

    def __init__(self, token_id=None, issued=None, expire=None, token=None, user_id=None, is_revoked=None):  # noqa: E501
        """Token - a model defined in OpenAPI"""  # noqa: E501

        self._token_id = None
        self._issued = None
        self._expire = None
        self._token = None
        self._user_id = None
        self._is_revoked = None
        self.discriminator = None

        if token_id is not None:
            self.token_id = token_id
        if issued is not None:
            self.issued = issued
        if expire is not None:
            self.expire = expire
        if token is not None:
            self.token = token
        if user_id is not None:
            self.user_id = user_id
        if is_revoked is not None:
            self.is_revoked = is_revoked

    @property
    def token_id(self):
        """Gets the token_id of this Token.  # noqa: E501


        :return: The token_id of this Token.  # noqa: E501
        :rtype: int
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this Token.


        :param token_id: The token_id of this Token.  # noqa: E501
        :type: int
        """

        self._token_id = token_id

    @property
    def issued(self):
        """Gets the issued of this Token.  # noqa: E501


        :return: The issued of this Token.  # noqa: E501
        :rtype: int
        """
        return self._issued

    @issued.setter
    def issued(self, issued):
        """Sets the issued of this Token.


        :param issued: The issued of this Token.  # noqa: E501
        :type: int
        """

        self._issued = issued

    @property
    def expire(self):
        """Gets the expire of this Token.  # noqa: E501


        :return: The expire of this Token.  # noqa: E501
        :rtype: int
        """
        return self._expire

    @expire.setter
    def expire(self, expire):
        """Sets the expire of this Token.


        :param expire: The expire of this Token.  # noqa: E501
        :type: int
        """

        self._expire = expire

    @property
    def token(self):
        """Gets the token of this Token.  # noqa: E501


        :return: The token of this Token.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Token.


        :param token: The token of this Token.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def user_id(self):
        """Gets the user_id of this Token.  # noqa: E501


        :return: The user_id of this Token.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Token.


        :param user_id: The user_id of this Token.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def is_revoked(self):
        """Gets the is_revoked of this Token.  # noqa: E501


        :return: The is_revoked of this Token.  # noqa: E501
        :rtype: int
        """
        return self._is_revoked

    @is_revoked.setter
    def is_revoked(self, is_revoked):
        """Sets the is_revoked of this Token.


        :param is_revoked: The is_revoked of this Token.  # noqa: E501
        :type: int
        """

        self._is_revoked = is_revoked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Token):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
