# coding: utf-8

"""
    Endpoints

    Endpoints API for different services in SKIL  # noqa: E501

    The version of the OpenAPI document: 1.2.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class LogBatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'offset': 'int',
        'row_count': 'int',
        'logs': 'str'
    }

    attribute_map = {
        'offset': 'offset',
        'row_count': 'rowCount',
        'logs': 'logs'
    }

    def __init__(self, offset=None, row_count=None, logs=None):  # noqa: E501
        """LogBatch - a model defined in OpenAPI"""  # noqa: E501

        self._offset = None
        self._row_count = None
        self._logs = None
        self.discriminator = None

        if offset is not None:
            self.offset = offset
        if row_count is not None:
            self.row_count = row_count
        if logs is not None:
            self.logs = logs

    @property
    def offset(self):
        """Gets the offset of this LogBatch.  # noqa: E501


        :return: The offset of this LogBatch.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this LogBatch.


        :param offset: The offset of this LogBatch.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def row_count(self):
        """Gets the row_count of this LogBatch.  # noqa: E501


        :return: The row_count of this LogBatch.  # noqa: E501
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this LogBatch.


        :param row_count: The row_count of this LogBatch.  # noqa: E501
        :type: int
        """

        self._row_count = row_count

    @property
    def logs(self):
        """Gets the logs of this LogBatch.  # noqa: E501


        :return: The logs of this LogBatch.  # noqa: E501
        :rtype: str
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this LogBatch.


        :param logs: The logs of this LogBatch.  # noqa: E501
        :type: str
        """

        self._logs = logs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogBatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
