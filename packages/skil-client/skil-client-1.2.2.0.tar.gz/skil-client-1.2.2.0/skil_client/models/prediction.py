# coding: utf-8

"""
    Endpoints

    Endpoints API for different services in SKIL  # noqa: E501

    The version of the OpenAPI document: 1.2.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Prediction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'needs_pre_processing': 'bool',
        'prediction': 'INDArray',
        'input_mask': 'INDArray'
    }

    attribute_map = {
        'id': 'id',
        'needs_pre_processing': 'needsPreProcessing',
        'prediction': 'prediction',
        'input_mask': 'inputMask'
    }

    def __init__(self, id=None, needs_pre_processing=None, prediction=None, input_mask=None):  # noqa: E501
        """Prediction - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._needs_pre_processing = None
        self._prediction = None
        self._input_mask = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if needs_pre_processing is not None:
            self.needs_pre_processing = needs_pre_processing
        if prediction is not None:
            self.prediction = prediction
        if input_mask is not None:
            self.input_mask = input_mask

    @property
    def id(self):
        """Gets the id of this Prediction.  # noqa: E501


        :return: The id of this Prediction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Prediction.


        :param id: The id of this Prediction.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def needs_pre_processing(self):
        """Gets the needs_pre_processing of this Prediction.  # noqa: E501


        :return: The needs_pre_processing of this Prediction.  # noqa: E501
        :rtype: bool
        """
        return self._needs_pre_processing

    @needs_pre_processing.setter
    def needs_pre_processing(self, needs_pre_processing):
        """Sets the needs_pre_processing of this Prediction.


        :param needs_pre_processing: The needs_pre_processing of this Prediction.  # noqa: E501
        :type: bool
        """

        self._needs_pre_processing = needs_pre_processing

    @property
    def prediction(self):
        """Gets the prediction of this Prediction.  # noqa: E501


        :return: The prediction of this Prediction.  # noqa: E501
        :rtype: INDArray
        """
        return self._prediction

    @prediction.setter
    def prediction(self, prediction):
        """Sets the prediction of this Prediction.


        :param prediction: The prediction of this Prediction.  # noqa: E501
        :type: INDArray
        """

        self._prediction = prediction

    @property
    def input_mask(self):
        """Gets the input_mask of this Prediction.  # noqa: E501


        :return: The input_mask of this Prediction.  # noqa: E501
        :rtype: INDArray
        """
        return self._input_mask

    @input_mask.setter
    def input_mask(self, input_mask):
        """Sets the input_mask of this Prediction.


        :param input_mask: The input_mask of this Prediction.  # noqa: E501
        :type: INDArray
        """

        self._input_mask = input_mask

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Prediction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
