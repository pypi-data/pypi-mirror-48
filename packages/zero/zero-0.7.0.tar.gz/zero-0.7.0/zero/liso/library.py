import datetime

from .. import PROGRAM, __version__
from ..config import OpAmpLibrary


class LisoOpampLibrary(OpAmpLibrary):
    def write_to(self, path):
        """Write LISO op-amp library to specified path"""
        with open(path, "w") as fileobj:
            fileobj.write("# Automatically generated by %s %s\n" % (PROGRAM, __version__))
            fileobj.write("# %s\n" % datetime.datetime.now())
            fileobj.write("\n")

            for opamp in self.opamps:
                # single properties
                fileobj.write("name = %s\n" % opamp.model)
                fileobj.write("a0 = %f\n" % float(opamp.a0))
                fileobj.write("gbw = %f\n" % float(opamp.gbw))
                fileobj.write("delay = %f\n" % float(opamp.delay))
                fileobj.write("un = %f\n" % float(opamp.vnoise))
                fileobj.write("uc = %f\n" % float(opamp.vcorner))
                fileobj.write("in = %f\n" % float(opamp.inoise))
                fileobj.write("ic = %f\n" % float(opamp.icorner))
                fileobj.write("umax = %f\n" % float(opamp.vmax))
                fileobj.write("imax = %f\n" % float(opamp.imax))
                fileobj.write("sr = %f\n" % float(opamp.sr))

                # special formatting for poles and zeros
                for freq, qfactor in opamp.poles_mag_q:
                    fileobj.write("pole = %f %f\n" % (freq, qfactor))

                for freq, qfactor in opamp.zeros_mag_q:
                    fileobj.write("zero = %f %f\n" % (freq, qfactor))

                fileobj.write("\n")
