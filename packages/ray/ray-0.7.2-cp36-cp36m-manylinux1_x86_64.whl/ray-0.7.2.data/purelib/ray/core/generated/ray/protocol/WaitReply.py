# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class WaitReply(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsWaitReply(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WaitReply()
        x.Init(buf, n + offset)
        return x

    # WaitReply
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WaitReply
    def Found(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WaitReply
    def FoundLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WaitReply
    def Remaining(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WaitReply
    def RemainingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def WaitReplyStart(builder): builder.StartObject(2)
def WaitReplyAddFound(builder, found): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(found), 0)
def WaitReplyStartFoundVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def WaitReplyAddRemaining(builder, remaining): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(remaining), 0)
def WaitReplyStartRemainingVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def WaitReplyEnd(builder): return builder.EndObject()
