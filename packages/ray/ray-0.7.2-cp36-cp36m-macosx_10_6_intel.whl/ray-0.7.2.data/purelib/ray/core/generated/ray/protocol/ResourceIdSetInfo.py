# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class ResourceIdSetInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsResourceIdSetInfo(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ResourceIdSetInfo()
        x.Init(buf, n + offset)
        return x

    # ResourceIdSetInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ResourceIdSetInfo
    def ResourceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ResourceIdSetInfo
    def ResourceIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ResourceIdSetInfo
    def ResourceIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ResourceIdSetInfo
    def ResourceIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ResourceIdSetInfo
    def ResourceFractions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ResourceIdSetInfo
    def ResourceFractionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # ResourceIdSetInfo
    def ResourceFractionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ResourceIdSetInfoStart(builder): builder.StartObject(3)
def ResourceIdSetInfoAddResourceName(builder, resourceName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(resourceName), 0)
def ResourceIdSetInfoAddResourceIds(builder, resourceIds): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(resourceIds), 0)
def ResourceIdSetInfoStartResourceIdsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ResourceIdSetInfoAddResourceFractions(builder, resourceFractions): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(resourceFractions), 0)
def ResourceIdSetInfoStartResourceFractionsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ResourceIdSetInfoEnd(builder): return builder.EndObject()
