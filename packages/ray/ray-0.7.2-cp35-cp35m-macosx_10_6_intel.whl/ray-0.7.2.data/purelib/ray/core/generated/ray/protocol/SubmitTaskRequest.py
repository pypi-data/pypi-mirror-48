# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class SubmitTaskRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSubmitTaskRequest(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SubmitTaskRequest()
        x.Init(buf, n + offset)
        return x

    # SubmitTaskRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SubmitTaskRequest
    def ExecutionDependencies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SubmitTaskRequest
    def ExecutionDependenciesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SubmitTaskRequest
    def TaskSpec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SubmitTaskRequestStart(builder): builder.StartObject(2)
def SubmitTaskRequestAddExecutionDependencies(builder, executionDependencies): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(executionDependencies), 0)
def SubmitTaskRequestStartExecutionDependenciesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SubmitTaskRequestAddTaskSpec(builder, taskSpec): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(taskSpec), 0)
def SubmitTaskRequestEnd(builder): return builder.EndObject()
