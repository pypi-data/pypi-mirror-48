# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class RegisterClientRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRegisterClientRequest(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RegisterClientRequest()
        x.Init(buf, n + offset)
        return x

    # RegisterClientRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RegisterClientRequest
    def IsWorker(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # RegisterClientRequest
    def ClientId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RegisterClientRequest
    def WorkerPid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RegisterClientRequest
    def DriverId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RegisterClientRequest
    def Language(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def RegisterClientRequestStart(builder): builder.StartObject(5)
def RegisterClientRequestAddIsWorker(builder, isWorker): builder.PrependBoolSlot(0, isWorker, 0)
def RegisterClientRequestAddClientId(builder, clientId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(clientId), 0)
def RegisterClientRequestAddWorkerPid(builder, workerPid): builder.PrependInt64Slot(2, workerPid, 0)
def RegisterClientRequestAddDriverId(builder, driverId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(driverId), 0)
def RegisterClientRequestAddLanguage(builder, language): builder.PrependInt32Slot(4, language, 0)
def RegisterClientRequestEnd(builder): return builder.EndObject()
