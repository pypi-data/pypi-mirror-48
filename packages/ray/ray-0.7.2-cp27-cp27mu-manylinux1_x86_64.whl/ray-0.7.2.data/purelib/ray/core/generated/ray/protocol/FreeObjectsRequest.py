# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class FreeObjectsRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFreeObjectsRequest(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FreeObjectsRequest()
        x.Init(buf, n + offset)
        return x

    # FreeObjectsRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FreeObjectsRequest
    def LocalOnly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FreeObjectsRequest
    def DeleteCreatingTasks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FreeObjectsRequest
    def ObjectIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FreeObjectsRequest
    def ObjectIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def FreeObjectsRequestStart(builder): builder.StartObject(3)
def FreeObjectsRequestAddLocalOnly(builder, localOnly): builder.PrependBoolSlot(0, localOnly, 0)
def FreeObjectsRequestAddDeleteCreatingTasks(builder, deleteCreatingTasks): builder.PrependBoolSlot(1, deleteCreatingTasks, 0)
def FreeObjectsRequestAddObjectIds(builder, objectIds): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(objectIds), 0)
def FreeObjectsRequestStartObjectIdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FreeObjectsRequestEnd(builder): return builder.EndObject()
