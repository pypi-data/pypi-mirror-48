# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys

__this_dir__=os.path.abspath(os.path.dirname(os.path.abspath(__file__)))

if not __this_dir__ in sys.path:
  sys.path.append(__this_dir__)

__bin_dir__=os.path.abspath(__this_dir__+ "/bin")
if not __bin_dir__ in sys.path:
  sys.path.append(__bin_dir__)



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _VisusIdxPy
else:
    import _VisusIdxPy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusIdxPy.delete_SwigPyIterator

    def value(self):
        return _VisusIdxPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusIdxPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusIdxPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusIdxPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusIdxPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusIdxPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusIdxPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusIdxPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusIdxPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusIdxPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusIdxPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusIdxPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusIdxPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusIdxPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusIdxPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusIdxPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VisusIdxPy:
_VisusIdxPy.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusIdxPy.SHARED_PTR_DISOWN
class PairDoubleDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusIdxPy.PairDoubleDouble_swiginit(self, _VisusIdxPy.new_PairDoubleDouble(*args))
    first = property(_VisusIdxPy.PairDoubleDouble_first_get, _VisusIdxPy.PairDoubleDouble_first_set)
    second = property(_VisusIdxPy.PairDoubleDouble_second_get, _VisusIdxPy.PairDoubleDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusIdxPy.delete_PairDoubleDouble

# Register PairDoubleDouble in _VisusIdxPy:
_VisusIdxPy.PairDoubleDouble_swigregister(PairDoubleDouble)

class PairIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusIdxPy.PairIntDouble_swiginit(self, _VisusIdxPy.new_PairIntDouble(*args))
    first = property(_VisusIdxPy.PairIntDouble_first_get, _VisusIdxPy.PairIntDouble_first_set)
    second = property(_VisusIdxPy.PairIntDouble_second_get, _VisusIdxPy.PairIntDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusIdxPy.delete_PairIntDouble

# Register PairIntDouble in _VisusIdxPy:
_VisusIdxPy.PairIntDouble_swigregister(PairIntDouble)

class VectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusIdxPy.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusIdxPy.VectorString___nonzero__(self)

    def __bool__(self):
        return _VisusIdxPy.VectorString___bool__(self)

    def __len__(self):
        return _VisusIdxPy.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _VisusIdxPy.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusIdxPy.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusIdxPy.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusIdxPy.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusIdxPy.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusIdxPy.VectorString___setitem__(self, *args)

    def pop(self):
        return _VisusIdxPy.VectorString_pop(self)

    def append(self, x):
        return _VisusIdxPy.VectorString_append(self, x)

    def empty(self):
        return _VisusIdxPy.VectorString_empty(self)

    def size(self):
        return _VisusIdxPy.VectorString_size(self)

    def swap(self, v):
        return _VisusIdxPy.VectorString_swap(self, v)

    def begin(self):
        return _VisusIdxPy.VectorString_begin(self)

    def end(self):
        return _VisusIdxPy.VectorString_end(self)

    def rbegin(self):
        return _VisusIdxPy.VectorString_rbegin(self)

    def rend(self):
        return _VisusIdxPy.VectorString_rend(self)

    def clear(self):
        return _VisusIdxPy.VectorString_clear(self)

    def get_allocator(self):
        return _VisusIdxPy.VectorString_get_allocator(self)

    def pop_back(self):
        return _VisusIdxPy.VectorString_pop_back(self)

    def erase(self, *args):
        return _VisusIdxPy.VectorString_erase(self, *args)

    def __init__(self, *args):
        _VisusIdxPy.VectorString_swiginit(self, _VisusIdxPy.new_VectorString(*args))

    def push_back(self, x):
        return _VisusIdxPy.VectorString_push_back(self, x)

    def front(self):
        return _VisusIdxPy.VectorString_front(self)

    def back(self):
        return _VisusIdxPy.VectorString_back(self)

    def assign(self, n, x):
        return _VisusIdxPy.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _VisusIdxPy.VectorString_resize(self, *args)

    def insert(self, *args):
        return _VisusIdxPy.VectorString_insert(self, *args)

    def reserve(self, n):
        return _VisusIdxPy.VectorString_reserve(self, n)

    def capacity(self):
        return _VisusIdxPy.VectorString_capacity(self)
    __swig_destroy__ = _VisusIdxPy.delete_VectorString

# Register VectorString in _VisusIdxPy:
_VisusIdxPy.VectorString_swigregister(VectorString)

class VectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusIdxPy.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusIdxPy.VectorInt___nonzero__(self)

    def __bool__(self):
        return _VisusIdxPy.VectorInt___bool__(self)

    def __len__(self):
        return _VisusIdxPy.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _VisusIdxPy.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusIdxPy.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusIdxPy.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusIdxPy.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusIdxPy.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusIdxPy.VectorInt___setitem__(self, *args)

    def pop(self):
        return _VisusIdxPy.VectorInt_pop(self)

    def append(self, x):
        return _VisusIdxPy.VectorInt_append(self, x)

    def empty(self):
        return _VisusIdxPy.VectorInt_empty(self)

    def size(self):
        return _VisusIdxPy.VectorInt_size(self)

    def swap(self, v):
        return _VisusIdxPy.VectorInt_swap(self, v)

    def begin(self):
        return _VisusIdxPy.VectorInt_begin(self)

    def end(self):
        return _VisusIdxPy.VectorInt_end(self)

    def rbegin(self):
        return _VisusIdxPy.VectorInt_rbegin(self)

    def rend(self):
        return _VisusIdxPy.VectorInt_rend(self)

    def clear(self):
        return _VisusIdxPy.VectorInt_clear(self)

    def get_allocator(self):
        return _VisusIdxPy.VectorInt_get_allocator(self)

    def pop_back(self):
        return _VisusIdxPy.VectorInt_pop_back(self)

    def erase(self, *args):
        return _VisusIdxPy.VectorInt_erase(self, *args)

    def __init__(self, *args):
        _VisusIdxPy.VectorInt_swiginit(self, _VisusIdxPy.new_VectorInt(*args))

    def push_back(self, x):
        return _VisusIdxPy.VectorInt_push_back(self, x)

    def front(self):
        return _VisusIdxPy.VectorInt_front(self)

    def back(self):
        return _VisusIdxPy.VectorInt_back(self)

    def assign(self, n, x):
        return _VisusIdxPy.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _VisusIdxPy.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _VisusIdxPy.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _VisusIdxPy.VectorInt_reserve(self, n)

    def capacity(self):
        return _VisusIdxPy.VectorInt_capacity(self)
    __swig_destroy__ = _VisusIdxPy.delete_VectorInt

# Register VectorInt in _VisusIdxPy:
_VisusIdxPy.VectorInt_swigregister(VectorInt)

class VectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusIdxPy.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusIdxPy.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _VisusIdxPy.VectorDouble___bool__(self)

    def __len__(self):
        return _VisusIdxPy.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _VisusIdxPy.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusIdxPy.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusIdxPy.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusIdxPy.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusIdxPy.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusIdxPy.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _VisusIdxPy.VectorDouble_pop(self)

    def append(self, x):
        return _VisusIdxPy.VectorDouble_append(self, x)

    def empty(self):
        return _VisusIdxPy.VectorDouble_empty(self)

    def size(self):
        return _VisusIdxPy.VectorDouble_size(self)

    def swap(self, v):
        return _VisusIdxPy.VectorDouble_swap(self, v)

    def begin(self):
        return _VisusIdxPy.VectorDouble_begin(self)

    def end(self):
        return _VisusIdxPy.VectorDouble_end(self)

    def rbegin(self):
        return _VisusIdxPy.VectorDouble_rbegin(self)

    def rend(self):
        return _VisusIdxPy.VectorDouble_rend(self)

    def clear(self):
        return _VisusIdxPy.VectorDouble_clear(self)

    def get_allocator(self):
        return _VisusIdxPy.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _VisusIdxPy.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _VisusIdxPy.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        _VisusIdxPy.VectorDouble_swiginit(self, _VisusIdxPy.new_VectorDouble(*args))

    def push_back(self, x):
        return _VisusIdxPy.VectorDouble_push_back(self, x)

    def front(self):
        return _VisusIdxPy.VectorDouble_front(self)

    def back(self):
        return _VisusIdxPy.VectorDouble_back(self)

    def assign(self, n, x):
        return _VisusIdxPy.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _VisusIdxPy.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _VisusIdxPy.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _VisusIdxPy.VectorDouble_reserve(self, n)

    def capacity(self):
        return _VisusIdxPy.VectorDouble_capacity(self)
    __swig_destroy__ = _VisusIdxPy.delete_VectorDouble

# Register VectorDouble in _VisusIdxPy:
_VisusIdxPy.VectorDouble_swigregister(VectorDouble)

class VectorFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusIdxPy.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusIdxPy.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _VisusIdxPy.VectorFloat___bool__(self)

    def __len__(self):
        return _VisusIdxPy.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _VisusIdxPy.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusIdxPy.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusIdxPy.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusIdxPy.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusIdxPy.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusIdxPy.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _VisusIdxPy.VectorFloat_pop(self)

    def append(self, x):
        return _VisusIdxPy.VectorFloat_append(self, x)

    def empty(self):
        return _VisusIdxPy.VectorFloat_empty(self)

    def size(self):
        return _VisusIdxPy.VectorFloat_size(self)

    def swap(self, v):
        return _VisusIdxPy.VectorFloat_swap(self, v)

    def begin(self):
        return _VisusIdxPy.VectorFloat_begin(self)

    def end(self):
        return _VisusIdxPy.VectorFloat_end(self)

    def rbegin(self):
        return _VisusIdxPy.VectorFloat_rbegin(self)

    def rend(self):
        return _VisusIdxPy.VectorFloat_rend(self)

    def clear(self):
        return _VisusIdxPy.VectorFloat_clear(self)

    def get_allocator(self):
        return _VisusIdxPy.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _VisusIdxPy.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _VisusIdxPy.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        _VisusIdxPy.VectorFloat_swiginit(self, _VisusIdxPy.new_VectorFloat(*args))

    def push_back(self, x):
        return _VisusIdxPy.VectorFloat_push_back(self, x)

    def front(self):
        return _VisusIdxPy.VectorFloat_front(self)

    def back(self):
        return _VisusIdxPy.VectorFloat_back(self)

    def assign(self, n, x):
        return _VisusIdxPy.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _VisusIdxPy.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _VisusIdxPy.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _VisusIdxPy.VectorFloat_reserve(self, n)

    def capacity(self):
        return _VisusIdxPy.VectorFloat_capacity(self)
    __swig_destroy__ = _VisusIdxPy.delete_VectorFloat

# Register VectorFloat in _VisusIdxPy:
_VisusIdxPy.VectorFloat_swigregister(VectorFloat)

class MapStringString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusIdxPy.MapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusIdxPy.MapStringString___nonzero__(self)

    def __bool__(self):
        return _VisusIdxPy.MapStringString___bool__(self)

    def __len__(self):
        return _VisusIdxPy.MapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _VisusIdxPy.MapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _VisusIdxPy.MapStringString___delitem__(self, key)

    def has_key(self, key):
        return _VisusIdxPy.MapStringString_has_key(self, key)

    def keys(self):
        return _VisusIdxPy.MapStringString_keys(self)

    def values(self):
        return _VisusIdxPy.MapStringString_values(self)

    def items(self):
        return _VisusIdxPy.MapStringString_items(self)

    def __contains__(self, key):
        return _VisusIdxPy.MapStringString___contains__(self, key)

    def key_iterator(self):
        return _VisusIdxPy.MapStringString_key_iterator(self)

    def value_iterator(self):
        return _VisusIdxPy.MapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _VisusIdxPy.MapStringString___setitem__(self, *args)

    def asdict(self):
        return _VisusIdxPy.MapStringString_asdict(self)

    def __init__(self, *args):
        _VisusIdxPy.MapStringString_swiginit(self, _VisusIdxPy.new_MapStringString(*args))

    def empty(self):
        return _VisusIdxPy.MapStringString_empty(self)

    def size(self):
        return _VisusIdxPy.MapStringString_size(self)

    def swap(self, v):
        return _VisusIdxPy.MapStringString_swap(self, v)

    def begin(self):
        return _VisusIdxPy.MapStringString_begin(self)

    def end(self):
        return _VisusIdxPy.MapStringString_end(self)

    def rbegin(self):
        return _VisusIdxPy.MapStringString_rbegin(self)

    def rend(self):
        return _VisusIdxPy.MapStringString_rend(self)

    def clear(self):
        return _VisusIdxPy.MapStringString_clear(self)

    def get_allocator(self):
        return _VisusIdxPy.MapStringString_get_allocator(self)

    def count(self, x):
        return _VisusIdxPy.MapStringString_count(self, x)

    def erase(self, *args):
        return _VisusIdxPy.MapStringString_erase(self, *args)

    def find(self, x):
        return _VisusIdxPy.MapStringString_find(self, x)

    def lower_bound(self, x):
        return _VisusIdxPy.MapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _VisusIdxPy.MapStringString_upper_bound(self, x)
    __swig_destroy__ = _VisusIdxPy.delete_MapStringString

# Register MapStringString in _VisusIdxPy:
_VisusIdxPy.MapStringString_swigregister(MapStringString)

import VisusKernelPy
import VisusDbPy
class IdxModule(VisusKernelPy.VisusModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bAttached = property(_VisusIdxPy.IdxModule_bAttached_get, _VisusIdxPy.IdxModule_bAttached_set)

    @staticmethod
    def attach():
        return _VisusIdxPy.IdxModule_attach()

    @staticmethod
    def detach():
        return _VisusIdxPy.IdxModule_detach()

    def __init__(self):
        _VisusIdxPy.IdxModule_swiginit(self, _VisusIdxPy.new_IdxModule())
    __swig_destroy__ = _VisusIdxPy.delete_IdxModule

# Register IdxModule in _VisusIdxPy:
_VisusIdxPy.IdxModule_swigregister(IdxModule)
cvar = _VisusIdxPy.cvar

def IdxModule_attach():
    return _VisusIdxPy.IdxModule_attach()

def IdxModule_detach():
    return _VisusIdxPy.IdxModule_detach()

class IdxFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    version = property(_VisusIdxPy.IdxFile_version_get, _VisusIdxPy.IdxFile_version_set)
    bitmask = property(_VisusIdxPy.IdxFile_bitmask_get, _VisusIdxPy.IdxFile_bitmask_set)
    box = property(_VisusIdxPy.IdxFile_box_get, _VisusIdxPy.IdxFile_box_set)
    fields = property(_VisusIdxPy.IdxFile_fields_get, _VisusIdxPy.IdxFile_fields_set)
    timesteps = property(_VisusIdxPy.IdxFile_timesteps_get, _VisusIdxPy.IdxFile_timesteps_set)
    bitsperblock = property(_VisusIdxPy.IdxFile_bitsperblock_get, _VisusIdxPy.IdxFile_bitsperblock_set)
    blocksperfile = property(_VisusIdxPy.IdxFile_blocksperfile_get, _VisusIdxPy.IdxFile_blocksperfile_set)
    block_interleaving = property(_VisusIdxPy.IdxFile_block_interleaving_get, _VisusIdxPy.IdxFile_block_interleaving_set)
    filename_template = property(_VisusIdxPy.IdxFile_filename_template_get, _VisusIdxPy.IdxFile_filename_template_set)
    time_template = property(_VisusIdxPy.IdxFile_time_template_get, _VisusIdxPy.IdxFile_time_template_set)
    scene = property(_VisusIdxPy.IdxFile_scene_get, _VisusIdxPy.IdxFile_scene_set)

    def __init__(self, version_=0):
        _VisusIdxPy.IdxFile_swiginit(self, _VisusIdxPy.new_IdxFile(version_))

    @staticmethod
    def invalid():
        return _VisusIdxPy.IdxFile_invalid()

    @staticmethod
    def load(url):
        return _VisusIdxPy.IdxFile_load(url)

    def valid(self):
        return _VisusIdxPy.IdxFile_valid(self)

    def save(self, filename):
        return _VisusIdxPy.IdxFile_save(self, filename)

    @staticmethod
    def parseFields(content):
        return _VisusIdxPy.IdxFile_parseFields(content)

    def getBlockPositionInFile(self, blockid):
        return _VisusIdxPy.IdxFile_getBlockPositionInFile(self, blockid)

    def getFirstBlockInFile(self, blockid):
        return _VisusIdxPy.IdxFile_getFirstBlockInFile(self, blockid)

    def validate(self, url):
        return _VisusIdxPy.IdxFile_validate(self, url)

    def toString(self):
        return _VisusIdxPy.IdxFile_toString(self)

    def writeToObjectStream(self, ostream):
        return _VisusIdxPy.IdxFile_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _VisusIdxPy.IdxFile_readFromObjectStream(self, istream)
    __swig_destroy__ = _VisusIdxPy.delete_IdxFile

# Register IdxFile in _VisusIdxPy:
_VisusIdxPy.IdxFile_swigregister(IdxFile)

def IdxFile_invalid():
    return _VisusIdxPy.IdxFile_invalid()

def IdxFile_load(url):
    return _VisusIdxPy.IdxFile_load(url)

def IdxFile_parseFields(content):
    return _VisusIdxPy.IdxFile_parseFields(content)

class IdxDataset(VisusDbPy.Dataset):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    idxfile = property(_VisusIdxPy.IdxDataset_idxfile_get, _VisusIdxPy.IdxDataset_idxfile_set)
    hzaddress_conversion_boxquery = property(_VisusIdxPy.IdxDataset_hzaddress_conversion_boxquery_get, _VisusIdxPy.IdxDataset_hzaddress_conversion_boxquery_set)
    hzaddress_conversion_pointquery = property(_VisusIdxPy.IdxDataset_hzaddress_conversion_pointquery_get, _VisusIdxPy.IdxDataset_hzaddress_conversion_pointquery_set)

    def __init__(self):
        _VisusIdxPy.IdxDataset_swiginit(self, _VisusIdxPy.new_IdxDataset())
    __swig_destroy__ = _VisusIdxPy.delete_IdxDataset

    def getTypeName(self):
        return _VisusIdxPy.IdxDataset_getTypeName(self)

    def clone(self):
        return _VisusIdxPy.IdxDataset_clone(self)

    @staticmethod
    def tryRemoveLockAndCorruptedBinaryFiles(directory):
        return _VisusIdxPy.IdxDataset_tryRemoveLockAndCorruptedBinaryFiles(directory)

    def removeFiles(self, maxh=-1):
        return _VisusIdxPy.IdxDataset_removeFiles(self, maxh)

    def compressDataset(self, compression):
        return _VisusIdxPy.IdxDataset_compressDataset(self, compression)

    def getLevelBox(self, *args):
        return _VisusIdxPy.IdxDataset_getLevelBox(self, *args)

    def adjustFilterBox(self, query, filter, box, H):
        return _VisusIdxPy.IdxDataset_adjustFilterBox(self, query, filter, box, H)

    def createEquivalentQuery(self, mode, block_query):
        return _VisusIdxPy.IdxDataset_createEquivalentQuery(self, mode, block_query)

    def setIdxFile(self, value):
        return _VisusIdxPy.IdxDataset_setIdxFile(self, value)

    @staticmethod
    def createDatasetFromBuffer(*args):
        return _VisusIdxPy.IdxDataset_createDatasetFromBuffer(*args)

    def openFromUrl(self, url):
        return _VisusIdxPy.IdxDataset_openFromUrl(self, url)

    def createAccess(self, *args):
        return _VisusIdxPy.IdxDataset_createAccess(self, *args)

    def getAddressRangeBox(self, *args):
        return _VisusIdxPy.IdxDataset_getAddressRangeBox(self, *args)

    def convertBlockQueryToRowMajor(self, block_query):
        return _VisusIdxPy.IdxDataset_convertBlockQueryToRowMajor(self, block_query)

    def createQueryFilter(self, field):
        return _VisusIdxPy.IdxDataset_createQueryFilter(self, field)

    def beginQuery(self, query):
        return _VisusIdxPy.IdxDataset_beginQuery(self, query)

    def executeQuery(self, access, query):
        return _VisusIdxPy.IdxDataset_executeQuery(self, access, query)

    def nextQuery(self, query):
        return _VisusIdxPy.IdxDataset_nextQuery(self, query)

    def mergeQueryWithBlock(self, query, block_query):
        return _VisusIdxPy.IdxDataset_mergeQueryWithBlock(self, query, block_query)

    def createPureRemoteQueryNetRequest(self, query):
        return _VisusIdxPy.IdxDataset_createPureRemoteQueryNetRequest(self, query)

# Register IdxDataset in _VisusIdxPy:
_VisusIdxPy.IdxDataset_swigregister(IdxDataset)

def IdxDataset_tryRemoveLockAndCorruptedBinaryFiles(directory):
    return _VisusIdxPy.IdxDataset_tryRemoveLockAndCorruptedBinaryFiles(directory)

def IdxDataset_createDatasetFromBuffer(*args):
    return _VisusIdxPy.IdxDataset_createDatasetFromBuffer(*args)

class IdxMultipleDataset(IdxDataset):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bMosaic = property(_VisusIdxPy.IdxMultipleDataset_bMosaic_get, _VisusIdxPy.IdxMultipleDataset_bMosaic_set)
    childs = property(_VisusIdxPy.IdxMultipleDataset_childs_get, _VisusIdxPy.IdxMultipleDataset_childs_set)

    def __init__(self):
        _VisusIdxPy.IdxMultipleDataset_swiginit(self, _VisusIdxPy.new_IdxMultipleDataset())
    __swig_destroy__ = _VisusIdxPy.delete_IdxMultipleDataset

    def getTypeName(self):
        return _VisusIdxPy.IdxMultipleDataset_getTypeName(self)

    def clone(self):
        return _VisusIdxPy.IdxMultipleDataset_clone(self)

    def getChild(self, name):
        return _VisusIdxPy.IdxMultipleDataset_getChild(self, name)

    def getFirstDataset(self):
        return _VisusIdxPy.IdxMultipleDataset_getFirstDataset(self)

    def addChild(self, value):
        return _VisusIdxPy.IdxMultipleDataset_addChild(self, value)

    def computeDefaultFields(self):
        return _VisusIdxPy.IdxMultipleDataset_computeDefaultFields(self)

    def openFromUrl(self, URL):
        return _VisusIdxPy.IdxMultipleDataset_openFromUrl(self, URL)

    def getInnerDatasets(self):
        return _VisusIdxPy.IdxMultipleDataset_getInnerDatasets(self)

    def getFieldByNameThrowEx(self, name):
        return _VisusIdxPy.IdxMultipleDataset_getFieldByNameThrowEx(self, name)

    def createAccess(self, *args):
        return _VisusIdxPy.IdxMultipleDataset_createAccess(self, *args)

    def createQueryFilter(self, FIELD):
        return _VisusIdxPy.IdxMultipleDataset_createQueryFilter(self, FIELD)

    def beginQuery(self, QUERY):
        return _VisusIdxPy.IdxMultipleDataset_beginQuery(self, QUERY)

    def executeQuery(self, ACCESS, QUERY):
        return _VisusIdxPy.IdxMultipleDataset_executeQuery(self, ACCESS, QUERY)

    def nextQuery(self, QUERY):
        return _VisusIdxPy.IdxMultipleDataset_nextQuery(self, QUERY)

    def createIdxFile(self, idx_filename, idx_field):
        return _VisusIdxPy.IdxMultipleDataset_createIdxFile(self, idx_filename, idx_field)

# Register IdxMultipleDataset in _VisusIdxPy:
_VisusIdxPy.IdxMultipleDataset_swigregister(IdxMultipleDataset)



