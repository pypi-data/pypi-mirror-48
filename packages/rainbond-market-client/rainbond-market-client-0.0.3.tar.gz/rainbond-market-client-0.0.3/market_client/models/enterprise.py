# coding: utf-8

"""
    rainbond cloud app market OpenAPI.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: 576501057@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Enterprise(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'backup_images': 'list[str]',
        'desc': 'str',
        'english_name': 'str',
        'enterprise_code': 'str',
        'enterprise_id': 'str',
        'enterprise_market_url': 'str',
        'logo': 'str',
        'name': 'str',
        'open_market': 'bool'
    }

    attribute_map = {
        'address': 'address',
        'backup_images': 'backup_images',
        'desc': 'desc',
        'english_name': 'english_name',
        'enterprise_code': 'enterprise_code',
        'enterprise_id': 'enterprise_id',
        'enterprise_market_url': 'enterprise_market_url',
        'logo': 'logo',
        'name': 'name',
        'open_market': 'open_market'
    }

    def __init__(self, address=None, backup_images=None, desc=None, english_name=None, enterprise_code=None, enterprise_id=None, enterprise_market_url=None, logo=None, name=None, open_market=None):  # noqa: E501
        """Enterprise - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._backup_images = None
        self._desc = None
        self._english_name = None
        self._enterprise_code = None
        self._enterprise_id = None
        self._enterprise_market_url = None
        self._logo = None
        self._name = None
        self._open_market = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if backup_images is not None:
            self.backup_images = backup_images
        if desc is not None:
            self.desc = desc
        if english_name is not None:
            self.english_name = english_name
        if enterprise_code is not None:
            self.enterprise_code = enterprise_code
        if enterprise_id is not None:
            self.enterprise_id = enterprise_id
        if enterprise_market_url is not None:
            self.enterprise_market_url = enterprise_market_url
        if logo is not None:
            self.logo = logo
        if name is not None:
            self.name = name
        if open_market is not None:
            self.open_market = open_market

    @property
    def address(self):
        """Gets the address of this Enterprise.  # noqa: E501


        :return: The address of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Enterprise.


        :param address: The address of this Enterprise.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def backup_images(self):
        """Gets the backup_images of this Enterprise.  # noqa: E501


        :return: The backup_images of this Enterprise.  # noqa: E501
        :rtype: list[str]
        """
        return self._backup_images

    @backup_images.setter
    def backup_images(self, backup_images):
        """Sets the backup_images of this Enterprise.


        :param backup_images: The backup_images of this Enterprise.  # noqa: E501
        :type: list[str]
        """

        self._backup_images = backup_images

    @property
    def desc(self):
        """Gets the desc of this Enterprise.  # noqa: E501


        :return: The desc of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Enterprise.


        :param desc: The desc of this Enterprise.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def english_name(self):
        """Gets the english_name of this Enterprise.  # noqa: E501


        :return: The english_name of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._english_name

    @english_name.setter
    def english_name(self, english_name):
        """Sets the english_name of this Enterprise.


        :param english_name: The english_name of this Enterprise.  # noqa: E501
        :type: str
        """

        self._english_name = english_name

    @property
    def enterprise_code(self):
        """Gets the enterprise_code of this Enterprise.  # noqa: E501


        :return: The enterprise_code of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_code

    @enterprise_code.setter
    def enterprise_code(self, enterprise_code):
        """Sets the enterprise_code of this Enterprise.


        :param enterprise_code: The enterprise_code of this Enterprise.  # noqa: E501
        :type: str
        """

        self._enterprise_code = enterprise_code

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this Enterprise.  # noqa: E501


        :return: The enterprise_id of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this Enterprise.


        :param enterprise_id: The enterprise_id of this Enterprise.  # noqa: E501
        :type: str
        """

        self._enterprise_id = enterprise_id

    @property
    def enterprise_market_url(self):
        """Gets the enterprise_market_url of this Enterprise.  # noqa: E501


        :return: The enterprise_market_url of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_market_url

    @enterprise_market_url.setter
    def enterprise_market_url(self, enterprise_market_url):
        """Sets the enterprise_market_url of this Enterprise.


        :param enterprise_market_url: The enterprise_market_url of this Enterprise.  # noqa: E501
        :type: str
        """

        self._enterprise_market_url = enterprise_market_url

    @property
    def logo(self):
        """Gets the logo of this Enterprise.  # noqa: E501


        :return: The logo of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Enterprise.


        :param logo: The logo of this Enterprise.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this Enterprise.  # noqa: E501


        :return: The name of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Enterprise.


        :param name: The name of this Enterprise.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def open_market(self):
        """Gets the open_market of this Enterprise.  # noqa: E501


        :return: The open_market of this Enterprise.  # noqa: E501
        :rtype: bool
        """
        return self._open_market

    @open_market.setter
    def open_market(self, open_market):
        """Sets the open_market of this Enterprise.


        :param open_market: The open_market of this Enterprise.  # noqa: E501
        :type: bool
        """

        self._open_market = open_market

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Enterprise, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Enterprise):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
