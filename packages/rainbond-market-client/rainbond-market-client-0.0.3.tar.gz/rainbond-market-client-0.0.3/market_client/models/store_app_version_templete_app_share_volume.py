# coding: utf-8

"""
    rainbond cloud app market OpenAPI.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: 576501057@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StoreAppVersionTempleteAppShareVolume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mnt_dir': 'str',
        'mnt_name': 'str',
        'service_share_uuid': 'str'
    }

    attribute_map = {
        'mnt_dir': 'mnt_dir',
        'mnt_name': 'mnt_name',
        'service_share_uuid': 'service_share_uuid'
    }

    def __init__(self, mnt_dir=None, mnt_name=None, service_share_uuid=None):  # noqa: E501
        """StoreAppVersionTempleteAppShareVolume - a model defined in Swagger"""  # noqa: E501

        self._mnt_dir = None
        self._mnt_name = None
        self._service_share_uuid = None
        self.discriminator = None

        if mnt_dir is not None:
            self.mnt_dir = mnt_dir
        if mnt_name is not None:
            self.mnt_name = mnt_name
        if service_share_uuid is not None:
            self.service_share_uuid = service_share_uuid

    @property
    def mnt_dir(self):
        """Gets the mnt_dir of this StoreAppVersionTempleteAppShareVolume.  # noqa: E501


        :return: The mnt_dir of this StoreAppVersionTempleteAppShareVolume.  # noqa: E501
        :rtype: str
        """
        return self._mnt_dir

    @mnt_dir.setter
    def mnt_dir(self, mnt_dir):
        """Sets the mnt_dir of this StoreAppVersionTempleteAppShareVolume.


        :param mnt_dir: The mnt_dir of this StoreAppVersionTempleteAppShareVolume.  # noqa: E501
        :type: str
        """

        self._mnt_dir = mnt_dir

    @property
    def mnt_name(self):
        """Gets the mnt_name of this StoreAppVersionTempleteAppShareVolume.  # noqa: E501


        :return: The mnt_name of this StoreAppVersionTempleteAppShareVolume.  # noqa: E501
        :rtype: str
        """
        return self._mnt_name

    @mnt_name.setter
    def mnt_name(self, mnt_name):
        """Sets the mnt_name of this StoreAppVersionTempleteAppShareVolume.


        :param mnt_name: The mnt_name of this StoreAppVersionTempleteAppShareVolume.  # noqa: E501
        :type: str
        """

        self._mnt_name = mnt_name

    @property
    def service_share_uuid(self):
        """Gets the service_share_uuid of this StoreAppVersionTempleteAppShareVolume.  # noqa: E501


        :return: The service_share_uuid of this StoreAppVersionTempleteAppShareVolume.  # noqa: E501
        :rtype: str
        """
        return self._service_share_uuid

    @service_share_uuid.setter
    def service_share_uuid(self, service_share_uuid):
        """Sets the service_share_uuid of this StoreAppVersionTempleteAppShareVolume.


        :param service_share_uuid: The service_share_uuid of this StoreAppVersionTempleteAppShareVolume.  # noqa: E501
        :type: str
        """

        self._service_share_uuid = service_share_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreAppVersionTempleteAppShareVolume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreAppVersionTempleteAppShareVolume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
