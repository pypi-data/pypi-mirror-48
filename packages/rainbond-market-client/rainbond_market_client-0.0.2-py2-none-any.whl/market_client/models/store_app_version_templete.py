# coding: utf-8

"""
    rainbond cloud app market OpenAPI.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: 576501057@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from market_client.models.store_app_version_templete_app import StoreAppVersionTempleteApp  # noqa: F401,E501
from market_client.models.store_app_version_templete_plugin import StoreAppVersionTempletePlugin  # noqa: F401,E501


class StoreAppVersionTemplete(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apps': 'list[StoreAppVersionTempleteApp]',
        'group_key': 'str',
        'group_name': 'str',
        'group_version': 'str',
        'plugins': 'list[StoreAppVersionTempletePlugin]',
        'template_version': 'str'
    }

    attribute_map = {
        'apps': 'apps',
        'group_key': 'group_key',
        'group_name': 'group_name',
        'group_version': 'group_version',
        'plugins': 'plugins',
        'template_version': 'template_version'
    }

    def __init__(self, apps=None, group_key=None, group_name=None, group_version=None, plugins=None, template_version=None):  # noqa: E501
        """StoreAppVersionTemplete - a model defined in Swagger"""  # noqa: E501

        self._apps = None
        self._group_key = None
        self._group_name = None
        self._group_version = None
        self._plugins = None
        self._template_version = None
        self.discriminator = None

        if apps is not None:
            self.apps = apps
        if group_key is not None:
            self.group_key = group_key
        if group_name is not None:
            self.group_name = group_name
        if group_version is not None:
            self.group_version = group_version
        if plugins is not None:
            self.plugins = plugins
        if template_version is not None:
            self.template_version = template_version

    @property
    def apps(self):
        """Gets the apps of this StoreAppVersionTemplete.  # noqa: E501


        :return: The apps of this StoreAppVersionTemplete.  # noqa: E501
        :rtype: list[StoreAppVersionTempleteApp]
        """
        return self._apps

    @apps.setter
    def apps(self, apps):
        """Sets the apps of this StoreAppVersionTemplete.


        :param apps: The apps of this StoreAppVersionTemplete.  # noqa: E501
        :type: list[StoreAppVersionTempleteApp]
        """

        self._apps = apps

    @property
    def group_key(self):
        """Gets the group_key of this StoreAppVersionTemplete.  # noqa: E501


        :return: The group_key of this StoreAppVersionTemplete.  # noqa: E501
        :rtype: str
        """
        return self._group_key

    @group_key.setter
    def group_key(self, group_key):
        """Sets the group_key of this StoreAppVersionTemplete.


        :param group_key: The group_key of this StoreAppVersionTemplete.  # noqa: E501
        :type: str
        """

        self._group_key = group_key

    @property
    def group_name(self):
        """Gets the group_name of this StoreAppVersionTemplete.  # noqa: E501


        :return: The group_name of this StoreAppVersionTemplete.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this StoreAppVersionTemplete.


        :param group_name: The group_name of this StoreAppVersionTemplete.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def group_version(self):
        """Gets the group_version of this StoreAppVersionTemplete.  # noqa: E501


        :return: The group_version of this StoreAppVersionTemplete.  # noqa: E501
        :rtype: str
        """
        return self._group_version

    @group_version.setter
    def group_version(self, group_version):
        """Sets the group_version of this StoreAppVersionTemplete.


        :param group_version: The group_version of this StoreAppVersionTemplete.  # noqa: E501
        :type: str
        """

        self._group_version = group_version

    @property
    def plugins(self):
        """Gets the plugins of this StoreAppVersionTemplete.  # noqa: E501


        :return: The plugins of this StoreAppVersionTemplete.  # noqa: E501
        :rtype: list[StoreAppVersionTempletePlugin]
        """
        return self._plugins

    @plugins.setter
    def plugins(self, plugins):
        """Sets the plugins of this StoreAppVersionTemplete.


        :param plugins: The plugins of this StoreAppVersionTemplete.  # noqa: E501
        :type: list[StoreAppVersionTempletePlugin]
        """

        self._plugins = plugins

    @property
    def template_version(self):
        """Gets the template_version of this StoreAppVersionTemplete.  # noqa: E501


        :return: The template_version of this StoreAppVersionTemplete.  # noqa: E501
        :rtype: str
        """
        return self._template_version

    @template_version.setter
    def template_version(self, template_version):
        """Sets the template_version of this StoreAppVersionTemplete.


        :param template_version: The template_version of this StoreAppVersionTemplete.  # noqa: E501
        :type: str
        """

        self._template_version = template_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreAppVersionTemplete, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreAppVersionTemplete):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
