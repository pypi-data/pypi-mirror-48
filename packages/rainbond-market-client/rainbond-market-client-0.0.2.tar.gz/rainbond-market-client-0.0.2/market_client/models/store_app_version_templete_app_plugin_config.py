# coding: utf-8

"""
    rainbond cloud app market OpenAPI.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: 576501057@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StoreAppVersionTempleteAppPluginConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'attr': 'list[dict(str, object)]',
        'build_version': 'str',
        'create_time': 'str',
        'plugin_id': 'str',
        'plugin_key': 'str',
        'plugin_status': 'bool',
        'service_id': 'str',
        'service_meta_type': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'attr': 'attr',
        'build_version': 'build_version',
        'create_time': 'create_time',
        'plugin_id': 'plugin_id',
        'plugin_key': 'plugin_key',
        'plugin_status': 'plugin_status',
        'service_id': 'service_id',
        'service_meta_type': 'service_meta_type'
    }

    def __init__(self, id=None, attr=None, build_version=None, create_time=None, plugin_id=None, plugin_key=None, plugin_status=None, service_id=None, service_meta_type=None):  # noqa: E501
        """StoreAppVersionTempleteAppPluginConfig - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._attr = None
        self._build_version = None
        self._create_time = None
        self._plugin_id = None
        self._plugin_key = None
        self._plugin_status = None
        self._service_id = None
        self._service_meta_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if attr is not None:
            self.attr = attr
        if build_version is not None:
            self.build_version = build_version
        if create_time is not None:
            self.create_time = create_time
        if plugin_id is not None:
            self.plugin_id = plugin_id
        if plugin_key is not None:
            self.plugin_key = plugin_key
        if plugin_status is not None:
            self.plugin_status = plugin_status
        if service_id is not None:
            self.service_id = service_id
        if service_meta_type is not None:
            self.service_meta_type = service_meta_type

    @property
    def id(self):
        """Gets the id of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501


        :return: The id of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoreAppVersionTempleteAppPluginConfig.


        :param id: The id of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def attr(self):
        """Gets the attr of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501


        :return: The attr of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._attr

    @attr.setter
    def attr(self, attr):
        """Sets the attr of this StoreAppVersionTempleteAppPluginConfig.


        :param attr: The attr of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._attr = attr

    @property
    def build_version(self):
        """Gets the build_version of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501


        :return: The build_version of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :rtype: str
        """
        return self._build_version

    @build_version.setter
    def build_version(self, build_version):
        """Sets the build_version of this StoreAppVersionTempleteAppPluginConfig.


        :param build_version: The build_version of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :type: str
        """

        self._build_version = build_version

    @property
    def create_time(self):
        """Gets the create_time of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501


        :return: The create_time of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this StoreAppVersionTempleteAppPluginConfig.


        :param create_time: The create_time of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def plugin_id(self):
        """Gets the plugin_id of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501


        :return: The plugin_id of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :rtype: str
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this StoreAppVersionTempleteAppPluginConfig.


        :param plugin_id: The plugin_id of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :type: str
        """

        self._plugin_id = plugin_id

    @property
    def plugin_key(self):
        """Gets the plugin_key of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501

        插件类型  # noqa: E501

        :return: The plugin_key of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :rtype: str
        """
        return self._plugin_key

    @plugin_key.setter
    def plugin_key(self, plugin_key):
        """Sets the plugin_key of this StoreAppVersionTempleteAppPluginConfig.

        插件类型  # noqa: E501

        :param plugin_key: The plugin_key of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :type: str
        """

        self._plugin_key = plugin_key

    @property
    def plugin_status(self):
        """Gets the plugin_status of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501


        :return: The plugin_status of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :rtype: bool
        """
        return self._plugin_status

    @plugin_status.setter
    def plugin_status(self, plugin_status):
        """Sets the plugin_status of this StoreAppVersionTempleteAppPluginConfig.


        :param plugin_status: The plugin_status of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :type: bool
        """

        self._plugin_status = plugin_status

    @property
    def service_id(self):
        """Gets the service_id of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501


        :return: The service_id of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this StoreAppVersionTempleteAppPluginConfig.


        :param service_id: The service_id of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def service_meta_type(self):
        """Gets the service_meta_type of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501


        :return: The service_meta_type of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :rtype: str
        """
        return self._service_meta_type

    @service_meta_type.setter
    def service_meta_type(self, service_meta_type):
        """Sets the service_meta_type of this StoreAppVersionTempleteAppPluginConfig.


        :param service_meta_type: The service_meta_type of this StoreAppVersionTempleteAppPluginConfig.  # noqa: E501
        :type: str
        """

        self._service_meta_type = service_meta_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreAppVersionTempleteAppPluginConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreAppVersionTempleteAppPluginConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
