# coding: utf-8

"""
    rainbond cloud app market OpenAPI.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: 576501057@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from market_client.models.image_info import ImageInfo  # noqa: F401,E501
from market_client.models.store_app_version_templete_plugin_config_group import StoreAppVersionTempletePluginConfigGroup  # noqa: F401,E501


class StoreAppVersionTempletePlugin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'build_source': 'str',
        'build_version': 'str',
        'category': 'str',
        'code_repo': 'str',
        'config_groups': 'list[StoreAppVersionTempletePluginConfigGroup]',
        'create_time': 'str',
        'desc': 'str',
        'image': 'str',
        'origin': 'str',
        'origin_share_id': 'str',
        'plugin_alias': 'str',
        'plugin_id': 'str',
        'plugin_image': 'ImageInfo',
        'plugin_key': 'str',
        'plugin_name': 'str',
        'share_image': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'build_source': 'build_source',
        'build_version': 'build_version',
        'category': 'category',
        'code_repo': 'code_repo',
        'config_groups': 'config_groups',
        'create_time': 'create_time',
        'desc': 'desc',
        'image': 'image',
        'origin': 'origin',
        'origin_share_id': 'origin_share_id',
        'plugin_alias': 'plugin_alias',
        'plugin_id': 'plugin_id',
        'plugin_image': 'plugin_image',
        'plugin_key': 'plugin_key',
        'plugin_name': 'plugin_name',
        'share_image': 'share_image'
    }

    def __init__(self, id=None, build_source=None, build_version=None, category=None, code_repo=None, config_groups=None, create_time=None, desc=None, image=None, origin=None, origin_share_id=None, plugin_alias=None, plugin_id=None, plugin_image=None, plugin_key=None, plugin_name=None, share_image=None):  # noqa: E501
        """StoreAppVersionTempletePlugin - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._build_source = None
        self._build_version = None
        self._category = None
        self._code_repo = None
        self._config_groups = None
        self._create_time = None
        self._desc = None
        self._image = None
        self._origin = None
        self._origin_share_id = None
        self._plugin_alias = None
        self._plugin_id = None
        self._plugin_image = None
        self._plugin_key = None
        self._plugin_name = None
        self._share_image = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if build_source is not None:
            self.build_source = build_source
        if build_version is not None:
            self.build_version = build_version
        if category is not None:
            self.category = category
        if code_repo is not None:
            self.code_repo = code_repo
        if config_groups is not None:
            self.config_groups = config_groups
        if create_time is not None:
            self.create_time = create_time
        if desc is not None:
            self.desc = desc
        if image is not None:
            self.image = image
        if origin is not None:
            self.origin = origin
        if origin_share_id is not None:
            self.origin_share_id = origin_share_id
        if plugin_alias is not None:
            self.plugin_alias = plugin_alias
        if plugin_id is not None:
            self.plugin_id = plugin_id
        if plugin_image is not None:
            self.plugin_image = plugin_image
        if plugin_key is not None:
            self.plugin_key = plugin_key
        if plugin_name is not None:
            self.plugin_name = plugin_name
        if share_image is not None:
            self.share_image = share_image

    @property
    def id(self):
        """Gets the id of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The id of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoreAppVersionTempletePlugin.


        :param id: The id of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def build_source(self):
        """Gets the build_source of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The build_source of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: str
        """
        return self._build_source

    @build_source.setter
    def build_source(self, build_source):
        """Sets the build_source of this StoreAppVersionTempletePlugin.


        :param build_source: The build_source of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: str
        """

        self._build_source = build_source

    @property
    def build_version(self):
        """Gets the build_version of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The build_version of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: str
        """
        return self._build_version

    @build_version.setter
    def build_version(self, build_version):
        """Sets the build_version of this StoreAppVersionTempletePlugin.


        :param build_version: The build_version of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: str
        """

        self._build_version = build_version

    @property
    def category(self):
        """Gets the category of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The category of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this StoreAppVersionTempletePlugin.


        :param category: The category of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def code_repo(self):
        """Gets the code_repo of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The code_repo of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: str
        """
        return self._code_repo

    @code_repo.setter
    def code_repo(self, code_repo):
        """Sets the code_repo of this StoreAppVersionTempletePlugin.


        :param code_repo: The code_repo of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: str
        """

        self._code_repo = code_repo

    @property
    def config_groups(self):
        """Gets the config_groups of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The config_groups of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: list[StoreAppVersionTempletePluginConfigGroup]
        """
        return self._config_groups

    @config_groups.setter
    def config_groups(self, config_groups):
        """Sets the config_groups of this StoreAppVersionTempletePlugin.


        :param config_groups: The config_groups of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: list[StoreAppVersionTempletePluginConfigGroup]
        """

        self._config_groups = config_groups

    @property
    def create_time(self):
        """Gets the create_time of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The create_time of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this StoreAppVersionTempletePlugin.


        :param create_time: The create_time of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def desc(self):
        """Gets the desc of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The desc of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this StoreAppVersionTempletePlugin.


        :param desc: The desc of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def image(self):
        """Gets the image of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The image of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this StoreAppVersionTempletePlugin.


        :param image: The image of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def origin(self):
        """Gets the origin of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The origin of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this StoreAppVersionTempletePlugin.


        :param origin: The origin of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def origin_share_id(self):
        """Gets the origin_share_id of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The origin_share_id of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: str
        """
        return self._origin_share_id

    @origin_share_id.setter
    def origin_share_id(self, origin_share_id):
        """Sets the origin_share_id of this StoreAppVersionTempletePlugin.


        :param origin_share_id: The origin_share_id of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: str
        """

        self._origin_share_id = origin_share_id

    @property
    def plugin_alias(self):
        """Gets the plugin_alias of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The plugin_alias of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: str
        """
        return self._plugin_alias

    @plugin_alias.setter
    def plugin_alias(self, plugin_alias):
        """Sets the plugin_alias of this StoreAppVersionTempletePlugin.


        :param plugin_alias: The plugin_alias of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: str
        """

        self._plugin_alias = plugin_alias

    @property
    def plugin_id(self):
        """Gets the plugin_id of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The plugin_id of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: str
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this StoreAppVersionTempletePlugin.


        :param plugin_id: The plugin_id of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: str
        """

        self._plugin_id = plugin_id

    @property
    def plugin_image(self):
        """Gets the plugin_image of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The plugin_image of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: ImageInfo
        """
        return self._plugin_image

    @plugin_image.setter
    def plugin_image(self, plugin_image):
        """Sets the plugin_image of this StoreAppVersionTempletePlugin.


        :param plugin_image: The plugin_image of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: ImageInfo
        """

        self._plugin_image = plugin_image

    @property
    def plugin_key(self):
        """Gets the plugin_key of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The plugin_key of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: str
        """
        return self._plugin_key

    @plugin_key.setter
    def plugin_key(self, plugin_key):
        """Sets the plugin_key of this StoreAppVersionTempletePlugin.


        :param plugin_key: The plugin_key of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: str
        """

        self._plugin_key = plugin_key

    @property
    def plugin_name(self):
        """Gets the plugin_name of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The plugin_name of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: str
        """
        return self._plugin_name

    @plugin_name.setter
    def plugin_name(self, plugin_name):
        """Sets the plugin_name of this StoreAppVersionTempletePlugin.


        :param plugin_name: The plugin_name of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: str
        """

        self._plugin_name = plugin_name

    @property
    def share_image(self):
        """Gets the share_image of this StoreAppVersionTempletePlugin.  # noqa: E501


        :return: The share_image of this StoreAppVersionTempletePlugin.  # noqa: E501
        :rtype: str
        """
        return self._share_image

    @share_image.setter
    def share_image(self, share_image):
        """Sets the share_image of this StoreAppVersionTempletePlugin.


        :param share_image: The share_image of this StoreAppVersionTempletePlugin.  # noqa: E501
        :type: str
        """

        self._share_image = share_image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreAppVersionTempletePlugin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreAppVersionTempletePlugin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
