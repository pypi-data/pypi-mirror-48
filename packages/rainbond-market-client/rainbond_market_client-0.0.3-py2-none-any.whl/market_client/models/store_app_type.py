# coding: utf-8

"""
    rainbond cloud app market OpenAPI.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: 576501057@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StoreAppType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_type_desc': 'str',
        'app_type_id': 'str',
        'app_type_name': 'str',
        'enterprise_id': 'str',
        'sort': 'int'
    }

    attribute_map = {
        'app_type_desc': 'app_type_desc',
        'app_type_id': 'app_type_id',
        'app_type_name': 'app_type_name',
        'enterprise_id': 'enterprise_id',
        'sort': 'sort'
    }

    def __init__(self, app_type_desc=None, app_type_id=None, app_type_name=None, enterprise_id=None, sort=None):  # noqa: E501
        """StoreAppType - a model defined in Swagger"""  # noqa: E501

        self._app_type_desc = None
        self._app_type_id = None
        self._app_type_name = None
        self._enterprise_id = None
        self._sort = None
        self.discriminator = None

        if app_type_desc is not None:
            self.app_type_desc = app_type_desc
        if app_type_id is not None:
            self.app_type_id = app_type_id
        if app_type_name is not None:
            self.app_type_name = app_type_name
        if enterprise_id is not None:
            self.enterprise_id = enterprise_id
        if sort is not None:
            self.sort = sort

    @property
    def app_type_desc(self):
        """Gets the app_type_desc of this StoreAppType.  # noqa: E501


        :return: The app_type_desc of this StoreAppType.  # noqa: E501
        :rtype: str
        """
        return self._app_type_desc

    @app_type_desc.setter
    def app_type_desc(self, app_type_desc):
        """Sets the app_type_desc of this StoreAppType.


        :param app_type_desc: The app_type_desc of this StoreAppType.  # noqa: E501
        :type: str
        """

        self._app_type_desc = app_type_desc

    @property
    def app_type_id(self):
        """Gets the app_type_id of this StoreAppType.  # noqa: E501


        :return: The app_type_id of this StoreAppType.  # noqa: E501
        :rtype: str
        """
        return self._app_type_id

    @app_type_id.setter
    def app_type_id(self, app_type_id):
        """Sets the app_type_id of this StoreAppType.


        :param app_type_id: The app_type_id of this StoreAppType.  # noqa: E501
        :type: str
        """

        self._app_type_id = app_type_id

    @property
    def app_type_name(self):
        """Gets the app_type_name of this StoreAppType.  # noqa: E501


        :return: The app_type_name of this StoreAppType.  # noqa: E501
        :rtype: str
        """
        return self._app_type_name

    @app_type_name.setter
    def app_type_name(self, app_type_name):
        """Sets the app_type_name of this StoreAppType.


        :param app_type_name: The app_type_name of this StoreAppType.  # noqa: E501
        :type: str
        """

        self._app_type_name = app_type_name

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this StoreAppType.  # noqa: E501


        :return: The enterprise_id of this StoreAppType.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this StoreAppType.


        :param enterprise_id: The enterprise_id of this StoreAppType.  # noqa: E501
        :type: str
        """

        self._enterprise_id = enterprise_id

    @property
    def sort(self):
        """Gets the sort of this StoreAppType.  # noqa: E501


        :return: The sort of this StoreAppType.  # noqa: E501
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this StoreAppType.


        :param sort: The sort of this StoreAppType.  # noqa: E501
        :type: int
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreAppType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreAppType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
