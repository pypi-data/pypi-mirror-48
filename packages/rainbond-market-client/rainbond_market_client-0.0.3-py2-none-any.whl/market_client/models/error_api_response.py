# coding: utf-8

"""
    rainbond cloud app market OpenAPI.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: 576501057@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ErrorAPIResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_code': 'int',
        'error_list': 'list[str]'
    }

    attribute_map = {
        'error_code': 'error_code',
        'error_list': 'error_list'
    }

    def __init__(self, error_code=None, error_list=None):  # noqa: E501
        """ErrorAPIResponse - a model defined in Swagger"""  # noqa: E501

        self._error_code = None
        self._error_list = None
        self.discriminator = None

        if error_code is not None:
            self.error_code = error_code
        if error_list is not None:
            self.error_list = error_list

    @property
    def error_code(self):
        """Gets the error_code of this ErrorAPIResponse.  # noqa: E501


        :return: The error_code of this ErrorAPIResponse.  # noqa: E501
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ErrorAPIResponse.


        :param error_code: The error_code of this ErrorAPIResponse.  # noqa: E501
        :type: int
        """

        self._error_code = error_code

    @property
    def error_list(self):
        """Gets the error_list of this ErrorAPIResponse.  # noqa: E501


        :return: The error_list of this ErrorAPIResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._error_list

    @error_list.setter
    def error_list(self, error_list):
        """Sets the error_list of this ErrorAPIResponse.


        :param error_list: The error_list of this ErrorAPIResponse.  # noqa: E501
        :type: list[str]
        """

        self._error_list = error_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorAPIResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorAPIResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
