# coding: utf-8

"""
    rainbond cloud app market OpenAPI.

    the purpose of this application is to provide an application that is using plain go code to define an API  This should demonstrate all the possible comment annotations that are available to turn go code into a fully compliant swagger 2.0 spec  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: 576501057@qq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StoreAppVersionTempleteAppEnv(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attr_name': 'str',
        'attr_value': 'str',
        'is_change': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'attr_name': 'attr_name',
        'attr_value': 'attr_value',
        'is_change': 'is_change',
        'name': 'name'
    }

    def __init__(self, attr_name=None, attr_value=None, is_change=None, name=None):  # noqa: E501
        """StoreAppVersionTempleteAppEnv - a model defined in Swagger"""  # noqa: E501

        self._attr_name = None
        self._attr_value = None
        self._is_change = None
        self._name = None
        self.discriminator = None

        if attr_name is not None:
            self.attr_name = attr_name
        if attr_value is not None:
            self.attr_value = attr_value
        if is_change is not None:
            self.is_change = is_change
        if name is not None:
            self.name = name

    @property
    def attr_name(self):
        """Gets the attr_name of this StoreAppVersionTempleteAppEnv.  # noqa: E501


        :return: The attr_name of this StoreAppVersionTempleteAppEnv.  # noqa: E501
        :rtype: str
        """
        return self._attr_name

    @attr_name.setter
    def attr_name(self, attr_name):
        """Sets the attr_name of this StoreAppVersionTempleteAppEnv.


        :param attr_name: The attr_name of this StoreAppVersionTempleteAppEnv.  # noqa: E501
        :type: str
        """

        self._attr_name = attr_name

    @property
    def attr_value(self):
        """Gets the attr_value of this StoreAppVersionTempleteAppEnv.  # noqa: E501


        :return: The attr_value of this StoreAppVersionTempleteAppEnv.  # noqa: E501
        :rtype: str
        """
        return self._attr_value

    @attr_value.setter
    def attr_value(self, attr_value):
        """Sets the attr_value of this StoreAppVersionTempleteAppEnv.


        :param attr_value: The attr_value of this StoreAppVersionTempleteAppEnv.  # noqa: E501
        :type: str
        """

        self._attr_value = attr_value

    @property
    def is_change(self):
        """Gets the is_change of this StoreAppVersionTempleteAppEnv.  # noqa: E501


        :return: The is_change of this StoreAppVersionTempleteAppEnv.  # noqa: E501
        :rtype: bool
        """
        return self._is_change

    @is_change.setter
    def is_change(self, is_change):
        """Sets the is_change of this StoreAppVersionTempleteAppEnv.


        :param is_change: The is_change of this StoreAppVersionTempleteAppEnv.  # noqa: E501
        :type: bool
        """

        self._is_change = is_change

    @property
    def name(self):
        """Gets the name of this StoreAppVersionTempleteAppEnv.  # noqa: E501


        :return: The name of this StoreAppVersionTempleteAppEnv.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StoreAppVersionTempleteAppEnv.


        :param name: The name of this StoreAppVersionTempleteAppEnv.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreAppVersionTempleteAppEnv, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreAppVersionTempleteAppEnv):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
