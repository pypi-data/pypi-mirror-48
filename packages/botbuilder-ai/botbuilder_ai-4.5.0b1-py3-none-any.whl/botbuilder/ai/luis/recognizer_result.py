# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

from typing import Dict, NamedTuple

from . import IntentScore


class TopIntent(NamedTuple):
    """The top scoring intent and its score."""

    intent: str
    score: float


class RecognizerResult:
    """
    Contains recognition results generated by a recognizer.
    """

    def __init__(
        self,
        text: str = None,
        altered_text: str = None,
        intents: Dict[str, IntentScore] = None,
        entities: Dict[str, object] = None,
    ):
        self.text: str = text
        self.altered_text: str = altered_text
        self.intents: Dict[str, IntentScore] = intents
        self.entities: Dict[str, object] = entities
        self.properties: Dict[str, object] = {}

    def get_top_scoring_intent(self) -> TopIntent:
        """Return the top scoring intent and its score.
        
        :return: Intent and score.
        :rtype: TopIntent
        """

        if self.intents is None:
            raise TypeError("result.intents can't be None")

        top_intent = TopIntent(intent="", score=0.0)
        for intent_name, intent_score in self.intents.items():
            score = intent_score.score
            if score > top_intent[1]:
                top_intent = TopIntent(intent_name, score)

        return top_intent
