# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from MatricesM import *
from MatricesM.constructors.matrices import *

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
o=Matrix(8,fill=0)
b=Matrix(1)
c=Matrix(dim=[2,4],ranged=[-50,50])
d=Matrix([4,3],dtype=float)
e=Matrix(8,fill=gauss,ranged=[0,3])
f=Matrix(dim=6,ranged=[-1250,1250],dtype=float)
g=Matrix(dim=[3,6],ranged=[2,10])
p=Matrix(5,ranged=[0,100])
q=Matrix(4,dtype=float)
q1=Matrix(9,decimal=2,dtype=float)
q2=Matrix(6,decimal=6,dtype=float)
y=Matrix(3,listed=[3,5,7,8,3,4,5,2,5])
c1=Matrix(5,dtype=complex)
c2=Matrix([7,3],ranged=[-10,10],dtype=complex)
# =============================================================================
# String inputs Matrices
# =============================================================================
proj=Matrix(20,listed=projectGrid,dtype=int)
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""",features=["Height","Weight","Age"],dtype=dataframe,coldtypes=[int]*3)
# =============================================================================
# Identity Matrices
# =============================================================================
id1=Matrix(listed=Identity())
id2=Matrix(listed=Identity(5))
id3=id2[:3,:3]
id4=Matrix(listed=Identity(6))

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
l=[proj,o,b,c,d,e,f,g,p,q,q1,q2,y,c1,c2]
for matrix in l:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f[:4,1:3]:\n",f[:4,1:3],"\n")
print(f)
print("f.delDim(2)")
f.delDim(2)
print(f)
print("[L,U]=f.LU")
[L,U]=f.LU
print("L.p")
L.p
print("U.p")
U.p
print("f-(L@U)")
print(f-(L@U))
print("[Q,R]=f.QR")
[Q,R]=f.QR
print("Q.p")
Q.p
print("R.p")
R.p
print("f-(Q@R)")
print(f-(Q@R))
print('################')
      
print("g.dim:\n",g.dim)
print("g.ranged():\n",g.ranged())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
print("q1.decimal",q1.decimal)
q1.p
print("q1.decimal=5")
q1.decimal=5
q1.p
print('################')      
h=proj[11:18,4:11]
print("h=proj[11:18,4:11]:\n",h)
print("h.mean():",h.mean())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.rrechelon:",h.rrechelon)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4,returndet=False):\n",h.minor(3,4,returndet=False),"\n")
print("h.minor(3,4):\n",h.minor(3,4),"\n")
print('################')
      
j=g[:2,:4]
print("j=g.[:2,:4]:\n",j,"\n")
print("j.obj:\n",j.obj)

print('\n################')
      
print("proj=proj[:5,:15]:\n")
proj=proj[:5,:15]
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(2,1)\np.p")
p.remove(2,1)
p.p
print("p.add(col=2,lis=[55]*4):")
p.add(col=2,lis=[55]*4)
print(p)
print("p.sdev()")
print(p.sdev())

print('################\n')

print("proj.find(40)")
print(proj.find(40))
print("\nproj.find(40,0)")
print(proj.find(40,0))
print("\nproj.find(111)")
proj.find(111)

print("################\n")

print("r=p.t")
r=p.t
print("r.remove(2):")
r.remove(2)
print(r)
print("r.rank:",r.rank)
print("\nr.matrix[0]=r.matrix[1][:]")
r.matrix[0]=r.matrix[1][:]
print(r)
print("r.rank:",r.rank)    

      
# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print("f:\n",f)
print("f1=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("e+=Matrix(listed=Identity(e.dim[0]))*99")
e+=Matrix(listed=Identity(e.dim[0]))*99
print(e)
print("\ne-=33:")
e-=33
print(e)
print("\ne+=Matrix(e.dim):")
e+=Matrix(e.dim,dtype=float)
print(e)
print("\ne*=[2,1,1,0.5,0.2,0.0003,1,3]:")
e*=[2,1,1,0.5,0.2,0.0003,1,3]
print(e)
print("e%=[2,2,2,2,1,1,1,1]")
e%=[5,5,5,5,3,3,1,1]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("\nbool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)):")
print(bool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)))
# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")
# =============================================================================
"""Basic statistical properties"""
# =============================================================================
print("validStr4.ranged()")
print(validStr4.ranged())
print("")

print("validStr4.mean()")
print(validStr4.mean())
print("")

print("validStr4.sdev()")
print(validStr4.sdev())
print("")

print("validStr4.median()")
print(validStr4.median())
print("")

print("validStr4.freq()")
print(validStr4.freq())
print("")

print("validStr4.mode()")
print(validStr4.mode())
print("")

print("validStr4.iqr()")
print(validStr4.iqr())
print("")

print("validStr4.iqr(as_quartiles=True)")
print(validStr4.iqr(as_quartiles=True))
print("")

print("validStr4.var()")
print(validStr4.var())
print("")

print('################')
print("Multivariate linear model for validStr4:")
print("""
validStr4.corr().p Correlation matrix

var = validStr4["Weight","Age"]
var.add([1]*22,col=1,feature="constant")

out = validStr4["Height"]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs

err = out-preds
err.features=["Difference"]

""")
print("Correlation Matrix")
validStr4.corr().p

var = validStr4["Weight","Age"]
var.add([1]*22,col=1,feature="constant")

out = validStr4["Height"]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs
err = out-preds
err.features=["Difference"]

print("Height={0} + {1}*{2} + {3}*{4}".format(coefs[0,0],coefs[1,0],"Weight",coefs[2,0],"Age"))
print("\nModel range:",var.ranged("Weight"))
print("\nError mean:",err.mean("Difference"),"\nError sdev:",err.sdev("Difference"))

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8

0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 


Square matrix
Dimension: 1x1

0.5557 


Dimension: 2x4

-7.0611 -3.5174  16.4615 28.6658 
19.3218 -5.9943 -15.0147 23.0300 


Dimension: 4x3

0.9631 0.4441 0.1771 
0.2127 0.6123 0.7631 
0.1566 0.2565 0.1616 
0.1927 0.2773 0.7375 


Square matrix
Dimension: 8x8

 3.5967  6.3748  1.5104  3.6178  1.7786  1.6916  1.0702 -0.1976 
-1.6047 -2.0955  2.3147  0.1714 -0.0344  1.9817 -0.9051  4.4025 
 1.2315  0.7359  2.7837 -2.6662  5.6125 -3.3667  1.5223 -5.5593 
-1.2409  2.0562  1.1791 -3.8133  1.5161 -5.2377  2.9914  3.7801 
 1.1821 -2.5316  2.9367  1.6664 -0.2113  2.2190  5.1640 -2.5301 
-5.8071  2.1025 -4.7961 -0.7322 -1.6681 -2.5034  0.1676 -0.5522 
 2.2359 -2.0798  2.3580 -3.7705  2.1711 -3.8259 -1.4660  1.9986 
 1.2102  0.8326  0.2601  3.9352  1.1352  2.2832  3.5598 -3.1163 


Square matrix
Dimension: 6x6

-399.2867  532.3991 -411.7788  -586.1993  -939.3214 1200.2731 
-132.1976 -544.0265 -206.6851  -287.7359 -1229.6358 -125.7341 
 893.2927  844.7620  732.8968 -1224.4845 -1028.0481 -208.9012 
-857.6612 -715.7714 1033.8636   478.3252  1149.3901 -725.9508 
-535.9593  -66.7749 -572.0397   669.2899  -213.5043 -432.4992 
-639.8674 1047.4018  565.5091   262.1340   792.7258  763.6470 


Dimension: 3x6

7.7472 7.1027 2.2104 5.6599 4.0045 6.9411 
3.5019 8.9299 4.2721 6.9197 4.9962 3.6125 
2.1318 9.1880 3.8403 5.6114 8.5666 7.2201 


Square matrix
Dimension: 5x5

60.3783  7.9776 84.1369 98.0099 93.8233 
68.2829 39.6630 14.5056  1.5519 41.4823 
36.2624 93.4866 14.0639 72.6051 75.3256 
51.8573 44.4856 51.8896 73.3160 44.4555 
59.8183 68.3104 28.7708 15.0930 67.9199 


Square matrix
Dimension: 4x4

0.3144 0.9615 0.5869 0.5687 
0.8754 0.2219 0.8134 0.3526 
0.6745 0.7492 0.3276 0.9148 
0.4958 0.2944 0.0639 0.3880 


Square matrix
Dimension: 9x9

0.54 0.51 0.55 0.75 0.24 0.01 0.00 0.37 0.98 
0.27 0.82 0.09 0.43 0.86 0.00 0.35 0.31 0.90 
0.92 0.25 0.31 0.80 0.38 0.82 0.42 0.98 0.49 
0.20 0.40 0.03 0.25 0.35 0.88 0.09 0.77 0.18 
0.00 0.53 0.01 0.80 0.92 0.04 0.96 0.72 0.20 
0.09 0.21 0.71 0.42 0.73 0.66 0.26 0.94 0.99 
0.57 0.18 0.16 0.58 0.45 0.41 0.30 0.27 0.15 
0.49 0.04 0.66 0.61 0.83 0.84 0.66 0.60 0.24 
0.57 0.43 0.94 0.74 0.09 0.10 0.55 0.22 0.40 


Square matrix
Dimension: 6x6

0.280007 0.934660 0.361614 0.749474 0.555712 0.799554 
0.865078 0.423414 0.545579 0.101321 0.225471 0.304392 
0.736686 0.863735 0.417310 0.832850 0.216407 0.098636 
0.082949 0.546922 0.474166 0.525681 0.999725 0.806787 
0.853877 0.340251 0.400037 0.958281 0.687674 0.936949 
0.427015 0.092227 0.642903 0.993957 0.505417 0.055971 


Square matrix
Dimension: 3x3

3.0000 5.0000 7.0000 
8.0000 3.0000 4.0000 
5.0000 2.0000 5.0000 


Square matrix
Dimension: 5x5

 0.9708+0.2214j   0.9391+0.2817j   0.8248+0.6468j   0.8331+0.0215j   0.6545+0.7756j  
   0.8688+0.18j   0.0489+0.7268j    0.927+0.4441j   0.4192+0.7259j   0.4885+0.3677j  
  0.4875+0.523j   0.9484+0.9641j   0.5137+0.4495j   0.7485+0.4931j   0.9638+0.3937j  
 0.2753+0.1479j   0.8561+0.0274j     0.5719+0.78j    0.5504+0.649j   0.3348+0.8066j  
 0.7949+0.2281j   0.0152+0.5392j   0.1187+0.0106j    0.574+0.5736j    0.6849+0.075j  


Dimension: 7x3

  3.7189+8.9618j   -9.1474-2.0969j   -9.3747-8.3638j  
  5.5791+7.3516j   -9.2157+0.5585j   -4.4609+0.7125j  
  1.9143-9.6669j    9.5726-7.1265j    8.8969+7.4856j  
  0.0429+2.5877j    9.8599-5.4981j    -8.678+0.5674j  
 -5.5783+7.7915j    2.7009-4.4628j   -9.3044-2.2588j  
   9.3885+0.094j   -0.2957-8.3024j    0.2882+0.1477j  
 -6.9223+0.2152j   -4.3781-1.7299j   -2.3091-9.3029j  

################################
################################
Identity matrices

Square matrix
Dimension: 1x1

1.0000 


Square matrix
Dimension: 5x5

1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 


Square matrix
Dimension: 3x3

1.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 
0.0000 0.0000 1.0000 


Square matrix
Dimension: 6x6

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 

################################
################################
Attribute call outputs

################

d:

Dimension: 4x3

0.9631 0.4441 0.1771 
0.2127 0.6123 0.7631 
0.1566 0.2565 0.1616 
0.1927 0.2773 0.7375 

d.matrix:

[[0.9630726035340434, 0.4441053498947111, 0.1771294289986877], [0.21274452955717643, 0.6122928556169317, 0.7630542924283578], [0.15659047212134158, 0.2564775536362804, 0.16162602618488114], [0.19269386883144626, 0.2772911770989105, 0.7374797814874722]]

################

f[:4,1:3]:
 
Dimension: 4x2

 532.3991 -411.7788 
-544.0265 -206.6851 
 844.7620  732.8968 
-715.7714 1033.8636 
 


Square matrix
Dimension: 6x6

-399.2867  532.3991 -411.7788  -586.1993  -939.3214 1200.2731 
-132.1976 -544.0265 -206.6851  -287.7359 -1229.6358 -125.7341 
 893.2927  844.7620  732.8968 -1224.4845 -1028.0481 -208.9012 
-857.6612 -715.7714 1033.8636   478.3252  1149.3901 -725.9508 
-535.9593  -66.7749 -572.0397   669.2899  -213.5043 -432.4992 
-639.8674 1047.4018  565.5091   262.1340   792.7258  763.6470 

f.delDim(2)

Square matrix
Dimension: 4x4

-399.2867  532.3991 -411.7788  -586.1993 
-132.1976 -544.0265 -206.6851  -287.7359 
 893.2927  844.7620  732.8968 -1224.4845 
-857.6612 -715.7714 1033.8636   478.3252 

[L,U]=f.LU
L.p

Square matrix
Dimension: 4x4

 1.0000  0.0000  0.0000 0.0000 
 0.3311  1.0000  0.0000 0.0000 
-2.2372 -2.8264  1.0000 0.0000 
 2.1480  2.5814 -5.4236 1.0000 

U.p

Square matrix
Dimension: 4x4

-399.2867  532.3991 -411.7788   -586.1993 
   0.0000 -720.2954  -70.3516    -93.6545 
   0.0000    0.0000 -387.1864  -2800.6489 
   0.0000    0.0000    0.0000 -13210.4960 

f-(L@U)

Square matrix
Dimension: 4x4

0.0000  0.0000 0.0000  0.0000 
0.0000  0.0000 0.0000  0.0000 
0.0000  0.0000 0.0000  0.0000 
0.0000  0.0000 0.0000  0.0000 

[Q,R]=f.QR
Q.p

Square matrix
Dimension: 4x4

-0.3053  0.8521 -0.1839 -0.3834 
-0.1011 -0.4672 -0.2300 -0.8477 
 0.6830  0.2117  0.5988 -0.3606 
-0.6558 -0.1041  0.7448 -0.0665 

R.p

Square matrix
Dimension: 4x4

1307.8458 938.8325  -30.7928 -941.9799 
   0.0000 961.2277 -206.7834 -674.1007 
   0.0000   0.0000 1332.1354 -203.0136 
   0.0000   0.0000    0.0000  878.4228 

f-(Q@R)

Square matrix
Dimension: 4x4

0.0000  0.0000 0.0000  0.0000 
0.0000  0.0000 0.0000  0.0000 
0.0000  0.0000 0.0000  0.0000 
0.0000  0.0000 0.0000  0.0000 

################
g.dim:
 [3, 6]
g.ranged():
 {'Col 1': [2.131833587806912, 7.7471509943240395], 'Col 2': [7.102684127638616, 9.187958590794757], 'Col 3': [2.2103628613399016, 4.272056767810231], 'Col 4': [5.61137704012303, 6.919724601459942], 'Col 5': [4.0044924011026675, 8.566577405268923], 'Col 6': [3.6125180169653, 7.220133409512403]}
g: 
Dimension: 3x6

7.7472 7.1027 2.2104 5.6599 4.0045 6.9411 
3.5019 8.9299 4.2721 6.9197 4.9962 3.6125 
2.1318 9.1880 3.8403 5.6114 8.5666 7.2201 

g.remove(3):

Dimension: 2x6

7.7472 7.1027 2.2104 5.6599 4.0045 6.9411 
3.5019 8.9299 4.2721 6.9197 4.9962 3.6125 

################
q1.decimal 2

Square matrix
Dimension: 9x9

0.54 0.51 0.55 0.75 0.24 0.01 0.00 0.37 0.98 
0.27 0.82 0.09 0.43 0.86 0.00 0.35 0.31 0.90 
0.92 0.25 0.31 0.80 0.38 0.82 0.42 0.98 0.49 
0.20 0.40 0.03 0.25 0.35 0.88 0.09 0.77 0.18 
0.00 0.53 0.01 0.80 0.92 0.04 0.96 0.72 0.20 
0.09 0.21 0.71 0.42 0.73 0.66 0.26 0.94 0.99 
0.57 0.18 0.16 0.58 0.45 0.41 0.30 0.27 0.15 
0.49 0.04 0.66 0.61 0.83 0.84 0.66 0.60 0.24 
0.57 0.43 0.94 0.74 0.09 0.10 0.55 0.22 0.40 

q1.decimal=5

Square matrix
Dimension: 9x9

0.54402 0.51390 0.55452 0.74563 0.24271 0.01221 0.00470 0.37376 0.97861 
0.27387 0.82192 0.08655 0.43498 0.85659 0.00906 0.34617 0.31193 0.90109 
0.92190 0.25217 0.31101 0.80111 0.38337 0.82220 0.41923 0.97708 0.48848 
0.20356 0.39787 0.03421 0.25391 0.34861 0.88275 0.08704 0.77023 0.18351 
0.00198 0.53099 0.01184 0.80291 0.91775 0.04233 0.96194 0.72079 0.19761 
0.08838 0.20753 0.70968 0.42311 0.72817 0.66195 0.25864 0.93988 0.98556 
0.57021 0.18192 0.15732 0.57619 0.45402 0.40904 0.30317 0.26868 0.15247 
0.48772 0.03912 0.66228 0.61452 0.83135 0.84451 0.66143 0.59987 0.24128 
0.57329 0.42915 0.94424 0.73635 0.09162 0.09995 0.54527 0.21967 0.40138 

################
h=proj[11:18,4:11]:
 
Square matrix
Dimension: 7x7

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.mean(): {'Col 5': 57.142857142857146, 'Col 6': 50.285714285714285, 'Col 7': 49.714285714285715, 'Col 8': 44.285714285714285, 'Col 9': 22.285714285714285, 'Col 10': 67.71428571428571, 'Col 11': 69.28571428571429}

h.det: 1287494716522.8682

h.rank: 7

h.rrechelon: 
Square matrix
Dimension: 7x7

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 


h.inv:

Square matrix
Dimension: 7x7

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4,returndet=False):
 
Square matrix
Dimension: 6x6

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

h.minor(3,4):
 -46677834292.743515 

################
j=g.[:2,:4]:
 
Dimension: 2x4

7.7472 7.1027 2.2104 5.6599 
3.5019 8.9299 4.2721 6.9197 
 

j.obj:
 Matrix(dim=[2, 4],listed=[[7.7471509943240395, 7.102684127638616, 2.2103628613399016, 5.659866105056777], [3.501913398869518, 8.929913632780325, 4.272056767810231, 6.919724601459942]],ranged=[0, 1],fill=uniform,features=['Col 1', 'Col 2', 'Col 3', 'Col 4'],header=0,directory='',decimal=4,seed=None,dtype=float,coldtypes=[float, float, float, float])

################
proj=proj[:5,:15]:


Dimension: 5x15

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5

60.3783  7.9776 84.1369 98.0099 93.8233 
68.2829 39.6630 14.5056  1.5519 41.4823 
36.2624 93.4866 14.0639 72.6051 75.3256 
51.8573 44.4856 51.8896 73.3160 44.4555 
59.8183 68.3104 28.7708 15.0930 67.9199 

p.det:
 -569652123.5097752

p.adj:
 
Square matrix
Dimension: 5x5

  350090.4237 -17098910.2972  -307029.4501  -2221776.8709  11754308.7266 
 6568926.2271   8372676.4716   750865.2323  -7639438.2658 -10020330.6643 
 2200122.3567  18223206.0442 12687858.3122 -11647517.8064 -20616728.6739 
-1193290.4508  -6042310.0274 -6547726.5170  -2492226.0432  14231631.6302 
-7581820.1331    261890.6863 -4404310.1703  15127797.1781  -3090707.0287 

p.inv:


Square matrix
Dimension: 5x5

-0.0006  0.0300  0.0005  0.0039 -0.0206 
-0.0115 -0.0147 -0.0013  0.0134  0.0176 
-0.0039 -0.0320 -0.0223  0.0204  0.0362 
 0.0021  0.0106  0.0115  0.0044 -0.0250 
 0.0133 -0.0005  0.0077 -0.0266  0.0054 

################
p:

Square matrix
Dimension: 5x5

60.3783  7.9776 84.1369 98.0099 93.8233 
68.2829 39.6630 14.5056  1.5519 41.4823 
36.2624 93.4866 14.0639 72.6051 75.3256 
51.8573 44.4856 51.8896 73.3160 44.4555 
59.8183 68.3104 28.7708 15.0930 67.9199 

p.remove(2,1)
p.p

Square matrix
Dimension: 4x4

 7.9776 84.1369 98.0099 93.8233 
93.4866 14.0639 72.6051 75.3256 
44.4856 51.8896 73.3160 44.4555 
68.3104 28.7708 15.0930 67.9199 

p.add(col=2,lis=[55]*4):

Dimension: 4x5

 7.9776 55.0000 84.1369 98.0099 93.8233 
93.4866 55.0000 14.0639 72.6051 75.3256 
44.4856 55.0000 51.8896 73.3160 44.4555 
68.3104 55.0000 28.7708 15.0930 67.9199 

p.sdev()
{'Col 2': 31.51115056522844, 'Col': 0.0, 'Col 3': 26.45403866862386, 'Col 4': 30.44305600207822, 'Col 5': 17.693078442029485}
################

proj.find(40)
[(1, 8), (2, 4), (2, 12), (3, 11), (5, 14), (5, 15)]

proj.find(40,0)
[(0, 7), (1, 3), (1, 11), (2, 10), (4, 13), (4, 14)]

proj.find(111)
################

r=p.t
r.remove(2):

Square matrix
Dimension: 4x4

 7.9776 93.4866 44.4856 68.3104 
84.1369 14.0639 51.8896 28.7708 
98.0099 72.6051 73.3160 15.0930 
93.8233 75.3256 44.4555 67.9199 

r.rank: 4

r.matrix[0]=r.matrix[1][:]

Square matrix
Dimension: 4x4

84.1369 14.0639 51.8896 28.7708 
84.1369 14.0639 51.8896 28.7708 
98.0099 72.6051 73.3160 15.0930 
93.8233 75.3256 44.4555 67.9199 

r.rank: 3
################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Dimension: 2x3

 0.5528 6.8812 19.8664 
19.4196 7.4457 13.4059 


((((mMulti)+125)**3)%2):

Dimension: 2x3

1.1680 1.6344 1.0234 
0.9327 1.2587 1.4949 

################

f:
 
Square matrix
Dimension: 4x4

-399.2867  532.3991 -411.7788  -586.1993 
-132.1976 -544.0265 -206.6851  -287.7359 
 893.2927  844.7620  732.8968 -1224.4845 
-857.6612 -715.7714 1033.8636   478.3252 

f1=f.intForm

Square matrix
Dimension: 4x4

-399  532 -411  -586 
-132 -544 -206  -287 
 893  844  732 -1224 
-857 -715 1033   478 

f2=f.roundForm(3)

Square matrix
Dimension: 4x4

-399.2900  532.4000 -411.7800  -586.2000 
-132.2000 -544.0300 -206.6900  -287.7400 
 893.2900  844.7600  732.9000 -1224.4800 
-857.6600 -715.7700 1033.8600   478.3300 

f2-f1

Square matrix
Dimension: 4x4

-0.2900  0.4000 -0.7800 -0.2000 
-0.2000 -0.0300 -0.6900 -0.7400 
 0.2900  0.7600  0.9000 -0.4800 
-0.6600 -0.7700  0.8600  0.3300 

################
e+=Matrix(listed=Identity(e.dim[0]))*99

Square matrix
Dimension: 8x8

102.5967  6.3748   1.5104  3.6178  1.7786  1.6916  1.0702 -0.1976 
 -1.6047 96.9045   2.3147  0.1714 -0.0344  1.9817 -0.9051  4.4025 
  1.2315  0.7359 101.7837 -2.6662  5.6125 -3.3667  1.5223 -5.5593 
 -1.2409  2.0562   1.1791 95.1867  1.5161 -5.2377  2.9914  3.7801 
  1.1821 -2.5316   2.9367  1.6664 98.7887  2.2190  5.1640 -2.5301 
 -5.8071  2.1025  -4.7961 -0.7322 -1.6681 96.4966  0.1676 -0.5522 
  2.2359 -2.0798   2.3580 -3.7705  2.1711 -3.8259 97.5340  1.9986 
  1.2102  0.8326   0.2601  3.9352  1.1352  2.2832  3.5598 95.8837 


e-=33:

Square matrix
Dimension: 8x8

 69.5967 -26.6252 -31.4896 -29.3822 -31.2214 -31.3084 -31.9298 -33.1976 
-34.6047  63.9045 -30.6853 -32.8286 -33.0344 -31.0183 -33.9051 -28.5975 
-31.7685 -32.2641  68.7837 -35.6662 -27.3875 -36.3667 -31.4777 -38.5593 
-34.2409 -30.9438 -31.8209  62.1867 -31.4839 -38.2377 -30.0086 -29.2199 
-31.8179 -35.5316 -30.0633 -31.3336  65.7887 -30.7810 -27.8360 -35.5301 
-38.8071 -30.8975 -37.7961 -33.7322 -34.6681  63.4966 -32.8324 -33.5522 
-30.7641 -35.0798 -30.6420 -36.7705 -30.8289 -36.8259  64.5340 -31.0014 
-31.7898 -32.1674 -32.7399 -29.0648 -31.8648 -30.7168 -29.4402  62.8837 


e+=Matrix(e.dim):

Square matrix
Dimension: 8x8

 69.7926 -26.1790 -31.3724 -28.9719 -30.8239 -30.3256 -31.2816 -32.4955 
-33.6569  64.7181 -30.2541 -32.4640 -32.6223 -30.4117 -33.0341 -28.1402 
-31.4792 -31.9334  68.9488 -35.0901 -26.6590 -36.1369 -31.4716 -37.6890 
-34.1406 -30.7072 -30.8557  62.2034 -30.7831 -37.2556 -29.9188 -28.6660 
-31.4441 -35.4749 -29.3196 -30.8492  66.1175 -30.1011 -27.6122 -34.9791 
-37.8690 -30.4631 -37.6130 -33.6400 -33.8744  63.7175 -32.4411 -32.6670 
-29.9592 -34.9908 -29.7770 -35.8899 -30.2105 -36.7228  65.4320 -30.7651 
-31.6480 -31.2710 -32.7162 -28.5085 -31.4127 -30.6465 -29.0009  63.6249 


e*=[2,1,1,0.5,0.2,0.0003,1,3]:

Square matrix
Dimension: 8x8

139.5852 -26.1790 -31.3724 -14.4860 -6.1648 -0.0091 -31.2816  -97.4864 
-67.3138  64.7181 -30.2541 -16.2320 -6.5245 -0.0091 -33.0341  -84.4205 
-62.9585 -31.9334  68.9488 -17.5450 -5.3318 -0.0108 -31.4716 -113.0671 
-68.2813 -30.7072 -30.8557  31.1017 -6.1566 -0.0112 -29.9188  -85.9981 
-62.8883 -35.4749 -29.3196 -15.4246 13.2235 -0.0090 -27.6122 -104.9372 
-75.7380 -30.4631 -37.6130 -16.8200 -6.7749  0.0191 -32.4411  -98.0010 
-59.9184 -34.9908 -29.7770 -17.9449 -6.0421 -0.0110  65.4320  -92.2952 
-63.2959 -31.2710 -32.7162 -14.2542 -6.2825 -0.0092 -29.0009  190.8746 

e%=[2,2,2,2,1,1,1,1]

Square matrix
Dimension: 8x8

4.5852 3.8210 3.6276 0.5140 2.8352 2.9909 0.7184 0.5136 
2.6862 4.7181 4.7459 3.7680 2.4755 2.9909 0.9659 0.5795 
2.0415 3.0666 3.9488 2.4550 0.6682 2.9892 0.5284 0.9329 
1.7187 4.2928 4.1443 1.1017 2.8434 2.9888 0.0812 0.0019 
2.1117 4.5251 0.6804 4.5754 1.2235 2.9910 0.3878 0.0628 
4.2620 4.5369 2.3870 3.1800 2.2251 0.0191 0.5589 0.9990 
0.0816 0.0092 0.2230 2.0551 2.9579 2.9890 0.4320 0.7048 
1.7041 3.7290 2.2838 0.7458 2.7175 2.9908 0.9991 0.8746 

################

c%j

Dimension: 2x4

0.6860 3.5853 0.9889 0.3665 
1.8123 2.9356 2.0735 2.2708 


bool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)):
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3

34.0000 -52.0000 33.0000 
 9.0000  88.0000 -3.0000 

################
validStr2:

Dimension: 1x10

312.0000 45.0000 12.0000 44.0000 352.0000 45.0000 12.0000 44.0000 3.0000 -5.0000 

################
validStr3:

Dimension: 1x4

34.0000 5.0000 44.0000 659.0000 

################
validStr4:

Dimension: 22x3

  Height    Weight      Age  
     130        30       10  
     125        36       11  
     135        34       10  
     133        30        9  
     129        38       12  
     180        90       30  
     190        80       25  
     175        90       35  
     177        60       22  
     185       105       33  
     165        55       27  
     155        50       44  
     160        58       39  
     162        59       41  
     167        62       55  
     174        70       47  
     193        90       23  
     187        80       27  
     183        88       28  
     159        40       29  
     164        66       32  
     166        56       42  

################

validStr4.ranged()
{'Height': [125, 193], 'Weight': [30, 105], 'Age': [9, 55]}

validStr4.mean()
{'Height': 163.36363636363637, 'Weight': 62.13636363636363, 'Age': 28.681818181818183}

validStr4.sdev()
{'Height': 20.592464320155067, 'Weight': 21.774245534462064, 'Age': 12.68996154316246}

validStr4.median()
{'Height': 166, 'Weight': 60, 'Age': 29}

validStr4.freq()
{'Height': {130: 1, 125: 1, 135: 1, 133: 1, 129: 1, 180: 1, 190: 1, 175: 1, 177: 1, 185: 1, 165: 1, 155: 1, 160: 1, 162: 1, 167: 1, 174: 1, 193: 1, 187: 1, 183: 1, 159: 1, 164: 1, 166: 1}, 'Weight': {30: 2, 36: 1, 34: 1, 38: 1, 90: 3, 80: 2, 60: 1, 105: 1, 55: 1, 50: 1, 58: 1, 59: 1, 62: 1, 70: 1, 88: 1, 40: 1, 66: 1, 56: 1}, 'Age': {10: 2, 11: 1, 9: 1, 12: 1, 30: 1, 25: 1, 35: 1, 22: 1, 33: 1, 27: 2, 44: 1, 39: 1, 41: 1, 55: 1, 47: 1, 23: 1, 28: 1, 29: 1, 32: 1, 42: 1}}

validStr4.mode()
{'Height': {'All': 1}, 'Weight': {90: 3}, 'Age': {(10, 27): 2}}

validStr4.iqr()
{'Height': 25, 'Weight': 40, 'Age': 17}

validStr4.iqr(as_quartiles=True)
{'Height': [155, 166, 180], 'Weight': [40, 60, 80], 'Age': [22, 29, 39]}

validStr4.var()
{'Height': 424.0495867768595, 'Weight': 474.1177685950411, 'Age': 161.03512396694214}

################
Multivariate linear model for validStr4:

validStr4.corr().p Correlation matrix

var = validStr4["Weight","Age"]
var.add([1]*22,col=1,feature="constant")

out = validStr4["Height"]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs

err = out-preds
err.features=["Difference"]


Correlation Matrix

Dimension: 3x4

Feature  Height  Weight     Age  
 Height  1.0000  0.8992  0.5087  
 Weight  0.8992  1.0000  0.4233  
    Age  0.5087  0.4233  1.0000  

Height=107.14201097077388 + 0.787896266012001*Weight + 0.2532830400643249*Age

Model range: {'Weight': [30, 105]}

Error mean: {'Difference': -1.603455434530009e-06} 
Error sdev: {'Difference': 8.52745602526779}
"""
# =============================================================================

