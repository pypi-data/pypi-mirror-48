# ${project}

${description}

## Description

A longer description of your project goes here...

## Installation

In order to set up the necessary environment:

1. create an environment `${project}` with the help of [conda],
   ```
   conda env create -f environment.yaml
   ```
2. activate the new environment with
   ```
   conda activate ${project}
   ```
3. install `${project}` with:
   ```
   python setup.py install # or `develop`
   ```

Optional and needed only once after `git clone`:

4. install several [pre-commit] git hooks with:
   ```
   pre-commit install
   ```
   and checkout the configuration under `.pre-commit-config.yaml`,

5. install [nbstripout] to remove the output of committed notebooks with:
   ```
   nbstripout --install --attributes notebooks/.gitattributes
   ```


Then take a look into the `experiments` and `notebooks` folder.

## Dependency Management & Reproducibility

1. Always keep your abstract (unpinned) dependencies updated in `environment.yaml` and eventually
   in `setup.cfg` if you want to install via `pip` later on.
2. Create concrete dependencies as `environment.lock.yaml` for the exact reproduction of your
   environment with:
   ```
   conda env export -n ${project} -f environment.lock.yaml
   ```
   For a multi-OS development, consider using `--no-builds` during the export.
3. Update your current environment with respect to a new `environment.lock.yaml` using:
   ```
   conda env update -f environment.lock.yaml --prune
   ```
## Project Organization

```
├── AUTHORS.rst             <- List of developers and maintainers.
├── CHANGELOG.rst           <- Changelog to keep track of new features and fixes between versions.
├── LICENSE.txt             <- License as chosen as specified on the command-line.
├── README.md               <- The top-level README for developers using this project.
│
├── data
│   ├── external            <- Data from third party sources.
│   ├── interim             <- Intermediate data that has been transformed.
│   ├── processed           <- The final, canonical data sets for modeling.
│   └── raw                 <- The original, immutable data dump.
│
├── docs                    <- Directory for Sphinx documentation as in the standard PyScaffold setup.
│
├── environment.yaml        <- The conda environment file for reproducing the analysis environment.
│
├── models                  <- Trained and serialized models, model predictions, or model summaries
│
├── notebooks               <- Jupyter notebooks. Naming convention is a number (for ordering),
│                              the creator's initials, and a short `-` delimited description, e.g.
│                              `1.0-fw-initial-data-exploration`.
│
├── references              <- Data dictionaries, manuals, and all other explanatory materials.
│
├── reports                 <- Generated analysis as HTML, PDF, LaTeX, etc.
│   └── figures             <- Generated graphics and figures to be used in reporting
│
├── scripts                 <- Analysis and production scripts which import the actual PYTHON_PKG,
│                              e.g. train_model, run_model. etc.
│
├── setup.cfg               <- Declarative configuration of your project.
│
├── setup.py                <- Make this project pip installable with `pip install -e`
│                              or `python setup.py develop`.
│
├── src
│   └── ${pkg} <- Actual Python package where the main functionality goes.
│
├── tests                   <- Unit tests which can be run with `py.test` or `python setup.py test`.
│
├── .coveragerc             <- Configuration for coverage reports of unit tests.
│
├── .isort.cfg              <- Configuration for git hook that sorts imports.
│
└── .pre-commit-config.yaml <- Configuration of pre-commit git hooks.
```

## Note

This project has been set up using PyScaffold ${version}. For details and usage
information on PyScaffold see https://pyscaffold.org/.

[conda]: https://docs.conda.io/
[pre-commit]: https://pre-commit.com/
[Jupyter]: https://jupyter.org/
[nbstripout]: https://github.com/kynan/nbstripout
