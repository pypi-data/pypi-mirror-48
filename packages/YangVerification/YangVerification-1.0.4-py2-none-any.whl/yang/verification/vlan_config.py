# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class yc_VLAN_vlan_config__VLAN(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vlan_config - based on the path /VLAN. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name__','__admin_status','__arp_proxy','__description','__dhcp_relay_src_ip','__dhcp_servers',)

  _yang_name = 'VLAN'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__arp_proxy = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="arp_proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='common:enable-status', is_config=True)
    self.__description = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='string', is_config=True)
    self.__dhcp_servers = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),]), is_leaf=False, yang_name="dhcp_servers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='inet:ip-address', is_config=True)
    self.__name__ = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='string', is_config=True)
    self.__admin_status = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {}, u'up': {}},), is_leaf=True, yang_name="admin_status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='common:status', is_config=True)
    self.__dhcp_relay_src_ip = YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="dhcp_relay_src_ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='inet:ip-address', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'VLAN']

  def _get_name__(self):
    """
    Getter method for name__, mapped from YANG variable /VLAN/name__ (string)

    YANG Description: VLAN name
    """
    return self.__name__
      
  def _set_name__(self, v, load=False):
    """
    Setter method for name__, mapped from YANG variable /VLAN/name__ (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name__ is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name__() directly.

    YANG Description: VLAN name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name__ must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='string', is_config=True)""",
        })

    self.__name__ = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name__(self):
    self.__name__ = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='string', is_config=True)


  def _get_admin_status(self):
    """
    Getter method for admin_status, mapped from YANG variable /VLAN/admin_status (common:status)
    """
    return self.__admin_status
      
  def _set_admin_status(self, v, load=False):
    """
    Setter method for admin_status, mapped from YANG variable /VLAN/admin_status (common:status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_status() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {}, u'up': {}},), is_leaf=True, yang_name="admin_status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='common:status', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_status must be of a type compatible with common:status""",
          'defined-type': "common:status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {}, u'up': {}},), is_leaf=True, yang_name="admin_status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='common:status', is_config=True)""",
        })

    self.__admin_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_status(self):
    self.__admin_status = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {}, u'up': {}},), is_leaf=True, yang_name="admin_status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='common:status', is_config=True)


  def _get_arp_proxy(self):
    """
    Getter method for arp_proxy, mapped from YANG variable /VLAN/arp_proxy (common:enable-status)
    """
    return self.__arp_proxy
      
  def _set_arp_proxy(self, v, load=False):
    """
    Setter method for arp_proxy, mapped from YANG variable /VLAN/arp_proxy (common:enable-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arp_proxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arp_proxy() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="arp_proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='common:enable-status', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arp_proxy must be of a type compatible with common:enable-status""",
          'defined-type': "common:enable-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="arp_proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='common:enable-status', is_config=True)""",
        })

    self.__arp_proxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arp_proxy(self):
    self.__arp_proxy = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="arp_proxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='common:enable-status', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /VLAN/description (string)
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /VLAN/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='string', is_config=True)


  def _get_dhcp_relay_src_ip(self):
    """
    Getter method for dhcp_relay_src_ip, mapped from YANG variable /VLAN/dhcp_relay_src_ip (inet:ip-address)
    """
    return self.__dhcp_relay_src_ip
      
  def _set_dhcp_relay_src_ip(self, v, load=False):
    """
    Setter method for dhcp_relay_src_ip, mapped from YANG variable /VLAN/dhcp_relay_src_ip (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_relay_src_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_relay_src_ip() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="dhcp_relay_src_ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_relay_src_ip must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="dhcp_relay_src_ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__dhcp_relay_src_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_relay_src_ip(self):
    self.__dhcp_relay_src_ip = YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="dhcp_relay_src_ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='inet:ip-address', is_config=True)


  def _get_dhcp_servers(self):
    """
    Getter method for dhcp_servers, mapped from YANG variable /VLAN/dhcp_servers (inet:ip-address)
    """
    return self.__dhcp_servers
      
  def _set_dhcp_servers(self, v, load=False):
    """
    Setter method for dhcp_servers, mapped from YANG variable /VLAN/dhcp_servers (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_servers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_servers() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),]), is_leaf=False, yang_name="dhcp_servers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_servers must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),]), is_leaf=False, yang_name="dhcp_servers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__dhcp_servers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_servers(self):
    self.__dhcp_servers = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),]), is_leaf=False, yang_name="dhcp_servers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='inet:ip-address', is_config=True)

  name__ = __builtin__.property(_get_name__, _set_name__)
  admin_status = __builtin__.property(_get_admin_status, _set_admin_status)
  arp_proxy = __builtin__.property(_get_arp_proxy, _set_arp_proxy)
  description = __builtin__.property(_get_description, _set_description)
  dhcp_relay_src_ip = __builtin__.property(_get_dhcp_relay_src_ip, _set_dhcp_relay_src_ip)
  dhcp_servers = __builtin__.property(_get_dhcp_servers, _set_dhcp_servers)


  _pyangbind_elements = OrderedDict([('name__', name__), ('admin_status', admin_status), ('arp_proxy', arp_proxy), ('description', description), ('dhcp_relay_src_ip', dhcp_relay_src_ip), ('dhcp_servers', dhcp_servers), ])


class vlan_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vlan_config - based on the path /vlan_config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__VLAN',)

  _yang_name = 'vlan_config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__VLAN = YANGDynClass(base=YANGListType("name__",yc_VLAN_vlan_config__VLAN, yang_name="VLAN", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name__', extensions=None), is_container='list', yang_name="VLAN", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_VLAN(self):
    """
    Getter method for VLAN, mapped from YANG variable /VLAN (list)
    """
    return self.__VLAN
      
  def _set_VLAN(self, v, load=False):
    """
    Setter method for VLAN, mapped from YANG variable /VLAN (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_VLAN is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_VLAN() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name__",yc_VLAN_vlan_config__VLAN, yang_name="VLAN", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name__', extensions=None), is_container='list', yang_name="VLAN", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """VLAN must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name__",yc_VLAN_vlan_config__VLAN, yang_name="VLAN", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name__', extensions=None), is_container='list', yang_name="VLAN", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='list', is_config=True)""",
        })

    self.__VLAN = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_VLAN(self):
    self.__VLAN = YANGDynClass(base=YANGListType("name__",yc_VLAN_vlan_config__VLAN, yang_name="VLAN", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name__', extensions=None), is_container='list', yang_name="VLAN", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/vlan', defining_module='vlan_config', yang_type='list', is_config=True)

  VLAN = __builtin__.property(_get_VLAN, _set_VLAN)


  _pyangbind_elements = OrderedDict([('VLAN', VLAN), ])


