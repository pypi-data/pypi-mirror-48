# -*- coding: utf-8 -*-
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class yc_VLAN_UPDATE_vlan_update_schema__VLAN_UPDATE(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vlan_update_schema - based on the path /VLAN_UPDATE. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name__','__ipv4Address','__ipv6Address','__ipv6Linklocal','__vrf','__adminStatus','__aclIn','__aclOut','__mtu','__arpProxy','__description','__dhcpRelaySrcIP','__dhcpSever','__ndpProxy',)

  _yang_name = 'VLAN_UPDATE'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__ipv4Address = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'})), is_leaf=False, yang_name="ipv4Address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ipv4-prefix', is_config=True)
    self.__adminStatus = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {}, u'up': {}},), is_leaf=True, yang_name="adminStatus", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='common:status', is_config=True)
    self.__ndpProxy = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="ndpProxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='common:enable-status', is_config=True)
    self.__description = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)
    self.__ipv6Address = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'})), is_leaf=False, yang_name="ipv6Address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ipv6-prefix', is_config=True)
    self.__aclIn = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="aclIn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)
    self.__name__ = YANGDynClass(base=ReferenceType(referenced_path='/vlan-schema:VLAN/vlan-schema:name__', caller=self._path() + ['name__'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='leafref', is_config=True)
    self.__aclOut = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="aclOut", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={u'range': [u'64 .. 9800']}), is_leaf=True, yang_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='mtu', is_config=True)
    self.__dhcpSever = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-f]{0,4}):)([0-9a-f]{0,4}:){0,5}((([0-9a-f]{0,4}:)?(:|[0-9a-f]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),]), is_leaf=False, yang_name="dhcpSever", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ip-address', is_config=True)
    self.__vrf = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="vrf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)
    self.__arpProxy = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="arpProxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='common:enable-status', is_config=True)
    self.__ipv6Linklocal = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'})), is_leaf=False, yang_name="ipv6Linklocal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ipv6-prefix', is_config=True)
    self.__dhcpRelaySrcIP = YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-f]{0,4}):)([0-9a-f]{0,4}:){0,5}((([0-9a-f]{0,4}:)?(:|[0-9a-f]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="dhcpRelaySrcIP", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ip-address', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'VLAN_UPDATE']

  def _get_name__(self):
    """
    Getter method for name__, mapped from YANG variable /VLAN_UPDATE/name__ (leafref)
    """
    return self.__name__
      
  def _set_name__(self, v, load=False):
    """
    Setter method for name__, mapped from YANG variable /VLAN_UPDATE/name__ (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name__ is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name__() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ReferenceType(referenced_path='/vlan-schema:VLAN/vlan-schema:name__', caller=self._path() + ['name__'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name__ must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=ReferenceType(referenced_path='/vlan-schema:VLAN/vlan-schema:name__', caller=self._path() + ['name__'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='leafref', is_config=True)""",
        })

    self.__name__ = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name__(self):
    self.__name__ = YANGDynClass(base=ReferenceType(referenced_path='/vlan-schema:VLAN/vlan-schema:name__', caller=self._path() + ['name__'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='leafref', is_config=True)


  def _get_ipv4Address(self):
    """
    Getter method for ipv4Address, mapped from YANG variable /VLAN_UPDATE/ipv4Address (inet:ipv4-prefix)
    """
    return self.__ipv4Address
      
  def _set_ipv4Address(self, v, load=False):
    """
    Setter method for ipv4Address, mapped from YANG variable /VLAN_UPDATE/ipv4Address (inet:ipv4-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv4Address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv4Address() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'})), is_leaf=False, yang_name="ipv4Address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ipv4-prefix', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv4Address must be of a type compatible with inet:ipv4-prefix""",
          'defined-type': "inet:ipv4-prefix",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'})), is_leaf=False, yang_name="ipv4Address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ipv4-prefix', is_config=True)""",
        })

    self.__ipv4Address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv4Address(self):
    self.__ipv4Address = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'})), is_leaf=False, yang_name="ipv4Address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ipv4-prefix', is_config=True)


  def _get_ipv6Address(self):
    """
    Getter method for ipv6Address, mapped from YANG variable /VLAN_UPDATE/ipv6Address (inet:ipv6-prefix)
    """
    return self.__ipv6Address
      
  def _set_ipv6Address(self, v, load=False):
    """
    Setter method for ipv6Address, mapped from YANG variable /VLAN_UPDATE/ipv6Address (inet:ipv6-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv6Address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv6Address() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'})), is_leaf=False, yang_name="ipv6Address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ipv6-prefix', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv6Address must be of a type compatible with inet:ipv6-prefix""",
          'defined-type': "inet:ipv6-prefix",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'})), is_leaf=False, yang_name="ipv6Address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ipv6-prefix', is_config=True)""",
        })

    self.__ipv6Address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv6Address(self):
    self.__ipv6Address = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'})), is_leaf=False, yang_name="ipv6Address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ipv6-prefix', is_config=True)


  def _get_ipv6Linklocal(self):
    """
    Getter method for ipv6Linklocal, mapped from YANG variable /VLAN_UPDATE/ipv6Linklocal (inet:ipv6-prefix)
    """
    return self.__ipv6Linklocal
      
  def _set_ipv6Linklocal(self, v, load=False):
    """
    Setter method for ipv6Linklocal, mapped from YANG variable /VLAN_UPDATE/ipv6Linklocal (inet:ipv6-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv6Linklocal is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv6Linklocal() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'})), is_leaf=False, yang_name="ipv6Linklocal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ipv6-prefix', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv6Linklocal must be of a type compatible with inet:ipv6-prefix""",
          'defined-type': "inet:ipv6-prefix",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'})), is_leaf=False, yang_name="ipv6Linklocal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ipv6-prefix', is_config=True)""",
        })

    self.__ipv6Linklocal = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv6Linklocal(self):
    self.__ipv6Linklocal = YANGDynClass(unique=True, base=TypedListType(allowed_type=RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'})), is_leaf=False, yang_name="ipv6Linklocal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ipv6-prefix', is_config=True)


  def _get_vrf(self):
    """
    Getter method for vrf, mapped from YANG variable /VLAN_UPDATE/vrf (string)
    """
    return self.__vrf
      
  def _set_vrf(self, v, load=False):
    """
    Setter method for vrf, mapped from YANG variable /VLAN_UPDATE/vrf (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="vrf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="vrf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)""",
        })

    self.__vrf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf(self):
    self.__vrf = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="vrf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)


  def _get_adminStatus(self):
    """
    Getter method for adminStatus, mapped from YANG variable /VLAN_UPDATE/adminStatus (common:status)
    """
    return self.__adminStatus
      
  def _set_adminStatus(self, v, load=False):
    """
    Setter method for adminStatus, mapped from YANG variable /VLAN_UPDATE/adminStatus (common:status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adminStatus is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adminStatus() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {}, u'up': {}},), is_leaf=True, yang_name="adminStatus", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='common:status', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adminStatus must be of a type compatible with common:status""",
          'defined-type': "common:status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {}, u'up': {}},), is_leaf=True, yang_name="adminStatus", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='common:status', is_config=True)""",
        })

    self.__adminStatus = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adminStatus(self):
    self.__adminStatus = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {}, u'up': {}},), is_leaf=True, yang_name="adminStatus", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='common:status', is_config=True)


  def _get_aclIn(self):
    """
    Getter method for aclIn, mapped from YANG variable /VLAN_UPDATE/aclIn (string)
    """
    return self.__aclIn
      
  def _set_aclIn(self, v, load=False):
    """
    Setter method for aclIn, mapped from YANG variable /VLAN_UPDATE/aclIn (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_aclIn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_aclIn() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="aclIn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """aclIn must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="aclIn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)""",
        })

    self.__aclIn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_aclIn(self):
    self.__aclIn = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="aclIn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)


  def _get_aclOut(self):
    """
    Getter method for aclOut, mapped from YANG variable /VLAN_UPDATE/aclOut (string)
    """
    return self.__aclOut
      
  def _set_aclOut(self, v, load=False):
    """
    Setter method for aclOut, mapped from YANG variable /VLAN_UPDATE/aclOut (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_aclOut is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_aclOut() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="aclOut", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """aclOut must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="aclOut", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)""",
        })

    self.__aclOut = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_aclOut(self):
    self.__aclOut = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="aclOut", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)


  def _get_mtu(self):
    """
    Getter method for mtu, mapped from YANG variable /VLAN_UPDATE/mtu (mtu)
    """
    return self.__mtu
      
  def _set_mtu(self, v, load=False):
    """
    Setter method for mtu, mapped from YANG variable /VLAN_UPDATE/mtu (mtu)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mtu() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={u'range': [u'64 .. 9800']}), is_leaf=True, yang_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='mtu', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mtu must be of a type compatible with mtu""",
          'defined-type': "vlan_update_schema:mtu",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={u'range': [u'64 .. 9800']}), is_leaf=True, yang_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='mtu', is_config=True)""",
        })

    self.__mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mtu(self):
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={u'range': [u'64 .. 9800']}), is_leaf=True, yang_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='mtu', is_config=True)


  def _get_arpProxy(self):
    """
    Getter method for arpProxy, mapped from YANG variable /VLAN_UPDATE/arpProxy (common:enable-status)
    """
    return self.__arpProxy
      
  def _set_arpProxy(self, v, load=False):
    """
    Setter method for arpProxy, mapped from YANG variable /VLAN_UPDATE/arpProxy (common:enable-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arpProxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arpProxy() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="arpProxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='common:enable-status', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arpProxy must be of a type compatible with common:enable-status""",
          'defined-type': "common:enable-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="arpProxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='common:enable-status', is_config=True)""",
        })

    self.__arpProxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arpProxy(self):
    self.__arpProxy = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="arpProxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='common:enable-status', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /VLAN_UPDATE/description (string)
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /VLAN_UPDATE/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='string', is_config=True)


  def _get_dhcpRelaySrcIP(self):
    """
    Getter method for dhcpRelaySrcIP, mapped from YANG variable /VLAN_UPDATE/dhcpRelaySrcIP (inet:ip-address)
    """
    return self.__dhcpRelaySrcIP
      
  def _set_dhcpRelaySrcIP(self, v, load=False):
    """
    Setter method for dhcpRelaySrcIP, mapped from YANG variable /VLAN_UPDATE/dhcpRelaySrcIP (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpRelaySrcIP is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpRelaySrcIP() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-f]{0,4}):)([0-9a-f]{0,4}:){0,5}((([0-9a-f]{0,4}:)?(:|[0-9a-f]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="dhcpRelaySrcIP", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpRelaySrcIP must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-f]{0,4}):)([0-9a-f]{0,4}:){0,5}((([0-9a-f]{0,4}:)?(:|[0-9a-f]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="dhcpRelaySrcIP", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__dhcpRelaySrcIP = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpRelaySrcIP(self):
    self.__dhcpRelaySrcIP = YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-f]{0,4}):)([0-9a-f]{0,4}:){0,5}((([0-9a-f]{0,4}:)?(:|[0-9a-f]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="dhcpRelaySrcIP", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ip-address', is_config=True)


  def _get_dhcpSever(self):
    """
    Getter method for dhcpSever, mapped from YANG variable /VLAN_UPDATE/dhcpSever (inet:ip-address)
    """
    return self.__dhcpSever
      
  def _set_dhcpSever(self, v, load=False):
    """
    Setter method for dhcpSever, mapped from YANG variable /VLAN_UPDATE/dhcpSever (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcpSever is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcpSever() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-f]{0,4}):)([0-9a-f]{0,4}:){0,5}((([0-9a-f]{0,4}:)?(:|[0-9a-f]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),]), is_leaf=False, yang_name="dhcpSever", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcpSever must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-f]{0,4}):)([0-9a-f]{0,4}:){0,5}((([0-9a-f]{0,4}:)?(:|[0-9a-f]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),]), is_leaf=False, yang_name="dhcpSever", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__dhcpSever = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcpSever(self):
    self.__dhcpSever = YANGDynClass(unique=True, base=TypedListType(allowed_type=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-f]{0,4}):)([0-9a-f]{0,4}:){0,5}((([0-9a-f]{0,4}:)?(:|[0-9a-f]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),]), is_leaf=False, yang_name="dhcpSever", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='inet:ip-address', is_config=True)


  def _get_ndpProxy(self):
    """
    Getter method for ndpProxy, mapped from YANG variable /VLAN_UPDATE/ndpProxy (common:enable-status)
    """
    return self.__ndpProxy
      
  def _set_ndpProxy(self, v, load=False):
    """
    Setter method for ndpProxy, mapped from YANG variable /VLAN_UPDATE/ndpProxy (common:enable-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ndpProxy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ndpProxy() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="ndpProxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='common:enable-status', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ndpProxy must be of a type compatible with common:enable-status""",
          'defined-type': "common:enable-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="ndpProxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='common:enable-status', is_config=True)""",
        })

    self.__ndpProxy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ndpProxy(self):
    self.__ndpProxy = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="ndpProxy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='common:enable-status', is_config=True)

  name__ = __builtin__.property(_get_name__, _set_name__)
  ipv4Address = __builtin__.property(_get_ipv4Address, _set_ipv4Address)
  ipv6Address = __builtin__.property(_get_ipv6Address, _set_ipv6Address)
  ipv6Linklocal = __builtin__.property(_get_ipv6Linklocal, _set_ipv6Linklocal)
  vrf = __builtin__.property(_get_vrf, _set_vrf)
  adminStatus = __builtin__.property(_get_adminStatus, _set_adminStatus)
  aclIn = __builtin__.property(_get_aclIn, _set_aclIn)
  aclOut = __builtin__.property(_get_aclOut, _set_aclOut)
  mtu = __builtin__.property(_get_mtu, _set_mtu)
  arpProxy = __builtin__.property(_get_arpProxy, _set_arpProxy)
  description = __builtin__.property(_get_description, _set_description)
  dhcpRelaySrcIP = __builtin__.property(_get_dhcpRelaySrcIP, _set_dhcpRelaySrcIP)
  dhcpSever = __builtin__.property(_get_dhcpSever, _set_dhcpSever)
  ndpProxy = __builtin__.property(_get_ndpProxy, _set_ndpProxy)


  _pyangbind_elements = OrderedDict([('name__', name__), ('ipv4Address', ipv4Address), ('ipv6Address', ipv6Address), ('ipv6Linklocal', ipv6Linklocal), ('vrf', vrf), ('adminStatus', adminStatus), ('aclIn', aclIn), ('aclOut', aclOut), ('mtu', mtu), ('arpProxy', arpProxy), ('description', description), ('dhcpRelaySrcIP', dhcpRelaySrcIP), ('dhcpSever', dhcpSever), ('ndpProxy', ndpProxy), ])


class vlan_update_schema(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vlan_update_schema - based on the path /vlan_update_schema. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__VLAN_UPDATE',)

  _yang_name = 'vlan_update_schema'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__VLAN_UPDATE = YANGDynClass(base=YANGListType("name__",yc_VLAN_UPDATE_vlan_update_schema__VLAN_UPDATE, yang_name="VLAN_UPDATE", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name__', extensions=None), is_container='list', yang_name="VLAN_UPDATE", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_VLAN_UPDATE(self):
    """
    Getter method for VLAN_UPDATE, mapped from YANG variable /VLAN_UPDATE (list)
    """
    return self.__VLAN_UPDATE
      
  def _set_VLAN_UPDATE(self, v, load=False):
    """
    Setter method for VLAN_UPDATE, mapped from YANG variable /VLAN_UPDATE (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_VLAN_UPDATE is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_VLAN_UPDATE() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name__",yc_VLAN_UPDATE_vlan_update_schema__VLAN_UPDATE, yang_name="VLAN_UPDATE", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name__', extensions=None), is_container='list', yang_name="VLAN_UPDATE", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """VLAN_UPDATE must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name__",yc_VLAN_UPDATE_vlan_update_schema__VLAN_UPDATE, yang_name="VLAN_UPDATE", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name__', extensions=None), is_container='list', yang_name="VLAN_UPDATE", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='list', is_config=True)""",
        })

    self.__VLAN_UPDATE = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_VLAN_UPDATE(self):
    self.__VLAN_UPDATE = YANGDynClass(base=YANGListType("name__",yc_VLAN_UPDATE_vlan_update_schema__VLAN_UPDATE, yang_name="VLAN_UPDATE", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name__', extensions=None), is_container='list', yang_name="VLAN_UPDATE", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/vlan/', defining_module='vlan_update_schema', yang_type='list', is_config=True)

  VLAN_UPDATE = __builtin__.property(_get_VLAN_UPDATE, _set_VLAN_UPDATE)


  _pyangbind_elements = OrderedDict([('VLAN_UPDATE', VLAN_UPDATE), ])


