# -*- coding: utf-8 -*-
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class yc_removeVlan_portChannel_remove_vlan_schema__PORTCHANNEL_VLAN_removeVlan(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module portChannel_remove_vlan_schema - based on the path /PORTCHANNEL_VLAN/removeVlan. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__vlan_name__','__taggingMode',)

  _yang_name = 'removeVlan'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__vlan_name__ = YANGDynClass(base=ReferenceType(referenced_path='/portChannel:PORTCHANNEL/portChannel:permitVlan/portChannel:vlan_name', caller=self._path() + ['vlan_name__'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="vlan_name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='leafref', is_config=True)
    self.__taggingMode = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'untagged': {}, u'tagged': {}},), is_leaf=True, yang_name="taggingMode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='common:taggingMode', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'PORTCHANNEL_VLAN', u'removeVlan']

  def _get_vlan_name__(self):
    """
    Getter method for vlan_name__, mapped from YANG variable /PORTCHANNEL_VLAN/removeVlan/vlan_name__ (leafref)
    """
    return self.__vlan_name__
      
  def _set_vlan_name__(self, v, load=False):
    """
    Setter method for vlan_name__, mapped from YANG variable /PORTCHANNEL_VLAN/removeVlan/vlan_name__ (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan_name__ is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan_name__() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ReferenceType(referenced_path='/portChannel:PORTCHANNEL/portChannel:permitVlan/portChannel:vlan_name', caller=self._path() + ['vlan_name__'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="vlan_name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan_name__ must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=ReferenceType(referenced_path='/portChannel:PORTCHANNEL/portChannel:permitVlan/portChannel:vlan_name', caller=self._path() + ['vlan_name__'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="vlan_name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='leafref', is_config=True)""",
        })

    self.__vlan_name__ = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan_name__(self):
    self.__vlan_name__ = YANGDynClass(base=ReferenceType(referenced_path='/portChannel:PORTCHANNEL/portChannel:permitVlan/portChannel:vlan_name', caller=self._path() + ['vlan_name__'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="vlan_name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='leafref', is_config=True)


  def _get_taggingMode(self):
    """
    Getter method for taggingMode, mapped from YANG variable /PORTCHANNEL_VLAN/removeVlan/taggingMode (common:taggingMode)
    """
    return self.__taggingMode
      
  def _set_taggingMode(self, v, load=False):
    """
    Setter method for taggingMode, mapped from YANG variable /PORTCHANNEL_VLAN/removeVlan/taggingMode (common:taggingMode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_taggingMode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_taggingMode() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'untagged': {}, u'tagged': {}},), is_leaf=True, yang_name="taggingMode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='common:taggingMode', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """taggingMode must be of a type compatible with common:taggingMode""",
          'defined-type': "common:taggingMode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'untagged': {}, u'tagged': {}},), is_leaf=True, yang_name="taggingMode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='common:taggingMode', is_config=True)""",
        })

    self.__taggingMode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_taggingMode(self):
    self.__taggingMode = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'untagged': {}, u'tagged': {}},), is_leaf=True, yang_name="taggingMode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='common:taggingMode', is_config=True)

  vlan_name__ = __builtin__.property(_get_vlan_name__, _set_vlan_name__)
  taggingMode = __builtin__.property(_get_taggingMode, _set_taggingMode)


  _pyangbind_elements = OrderedDict([('vlan_name__', vlan_name__), ('taggingMode', taggingMode), ])


class yc_PORTCHANNEL_VLAN_portChannel_remove_vlan_schema__PORTCHANNEL_VLAN(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module portChannel_remove_vlan_schema - based on the path /PORTCHANNEL_VLAN. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name__','__removeVlan',)

  _yang_name = 'PORTCHANNEL_VLAN'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__name__ = YANGDynClass(base=ReferenceType(referenced_path='/portChannel:PORTCHANNEL/portChannel:name__', caller=self._path() + ['name__'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='leafref', is_config=True)
    self.__removeVlan = YANGDynClass(base=YANGListType("vlan_name__",yc_removeVlan_portChannel_remove_vlan_schema__PORTCHANNEL_VLAN_removeVlan, yang_name="removeVlan", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan_name__', extensions=None), is_container='list', yang_name="removeVlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'PORTCHANNEL_VLAN']

  def _get_name__(self):
    """
    Getter method for name__, mapped from YANG variable /PORTCHANNEL_VLAN/name__ (leafref)
    """
    return self.__name__
      
  def _set_name__(self, v, load=False):
    """
    Setter method for name__, mapped from YANG variable /PORTCHANNEL_VLAN/name__ (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name__ is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name__() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ReferenceType(referenced_path='/portChannel:PORTCHANNEL/portChannel:name__', caller=self._path() + ['name__'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name__ must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=ReferenceType(referenced_path='/portChannel:PORTCHANNEL/portChannel:name__', caller=self._path() + ['name__'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='leafref', is_config=True)""",
        })

    self.__name__ = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name__(self):
    self.__name__ = YANGDynClass(base=ReferenceType(referenced_path='/portChannel:PORTCHANNEL/portChannel:name__', caller=self._path() + ['name__'], path_helper=self._path_helper, require_instance=True), is_leaf=True, yang_name="name__", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='leafref', is_config=True)


  def _get_removeVlan(self):
    """
    Getter method for removeVlan, mapped from YANG variable /PORTCHANNEL_VLAN/removeVlan (list)
    """
    return self.__removeVlan
      
  def _set_removeVlan(self, v, load=False):
    """
    Setter method for removeVlan, mapped from YANG variable /PORTCHANNEL_VLAN/removeVlan (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_removeVlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_removeVlan() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("vlan_name__",yc_removeVlan_portChannel_remove_vlan_schema__PORTCHANNEL_VLAN_removeVlan, yang_name="removeVlan", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan_name__', extensions=None), is_container='list', yang_name="removeVlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """removeVlan must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("vlan_name__",yc_removeVlan_portChannel_remove_vlan_schema__PORTCHANNEL_VLAN_removeVlan, yang_name="removeVlan", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan_name__', extensions=None), is_container='list', yang_name="removeVlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='list', is_config=True)""",
        })

    self.__removeVlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_removeVlan(self):
    self.__removeVlan = YANGDynClass(base=YANGListType("vlan_name__",yc_removeVlan_portChannel_remove_vlan_schema__PORTCHANNEL_VLAN_removeVlan, yang_name="removeVlan", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan_name__', extensions=None), is_container='list', yang_name="removeVlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='list', is_config=True)

  name__ = __builtin__.property(_get_name__, _set_name__)
  removeVlan = __builtin__.property(_get_removeVlan, _set_removeVlan)


  _pyangbind_elements = OrderedDict([('name__', name__), ('removeVlan', removeVlan), ])


class portChannel_remove_vlan_schema(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module portChannel_remove_vlan_schema - based on the path /portChannel_remove_vlan_schema. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__PORTCHANNEL_VLAN',)

  _yang_name = 'portChannel_remove_vlan_schema'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__PORTCHANNEL_VLAN = YANGDynClass(base=YANGListType("name__",yc_PORTCHANNEL_VLAN_portChannel_remove_vlan_schema__PORTCHANNEL_VLAN, yang_name="PORTCHANNEL_VLAN", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name__', extensions=None), is_container='list', yang_name="PORTCHANNEL_VLAN", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_PORTCHANNEL_VLAN(self):
    """
    Getter method for PORTCHANNEL_VLAN, mapped from YANG variable /PORTCHANNEL_VLAN (list)
    """
    return self.__PORTCHANNEL_VLAN
      
  def _set_PORTCHANNEL_VLAN(self, v, load=False):
    """
    Setter method for PORTCHANNEL_VLAN, mapped from YANG variable /PORTCHANNEL_VLAN (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_PORTCHANNEL_VLAN is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_PORTCHANNEL_VLAN() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name__",yc_PORTCHANNEL_VLAN_portChannel_remove_vlan_schema__PORTCHANNEL_VLAN, yang_name="PORTCHANNEL_VLAN", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name__', extensions=None), is_container='list', yang_name="PORTCHANNEL_VLAN", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """PORTCHANNEL_VLAN must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name__",yc_PORTCHANNEL_VLAN_portChannel_remove_vlan_schema__PORTCHANNEL_VLAN, yang_name="PORTCHANNEL_VLAN", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name__', extensions=None), is_container='list', yang_name="PORTCHANNEL_VLAN", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='list', is_config=True)""",
        })

    self.__PORTCHANNEL_VLAN = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_PORTCHANNEL_VLAN(self):
    self.__PORTCHANNEL_VLAN = YANGDynClass(base=YANGListType("name__",yc_PORTCHANNEL_VLAN_portChannel_remove_vlan_schema__PORTCHANNEL_VLAN, yang_name="PORTCHANNEL_VLAN", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name__', extensions=None), is_container='list', yang_name="PORTCHANNEL_VLAN", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/vlan/remove', defining_module='portChannel_remove_vlan_schema', yang_type='list', is_config=True)

  PORTCHANNEL_VLAN = __builtin__.property(_get_PORTCHANNEL_VLAN, _set_PORTCHANNEL_VLAN)


  _pyangbind_elements = OrderedDict([('PORTCHANNEL_VLAN', PORTCHANNEL_VLAN), ])


