# -*- coding: utf-8 -*-
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class yc_networkList_bgp_network_schema__vrfs_addressFamily_routeImport_network_networkList(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bgp_network_schema - based on the path /vrfs/addressFamily/routeImport/network/networkList. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ipMask','__network','__maskLength','__policyName',)

  _yang_name = 'networkList'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__ipMask = YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'}),], is_leaf=True, yang_name="ipMask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='inet:ip-prefix', is_config=True)
    self.__network = YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-f]{0,4}):)([0-9a-f]{0,4}:){0,5}((([0-9a-f]{0,4}:)?(:|[0-9a-f]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="network", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='inet:ip-address', is_config=True)
    self.__maskLength = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'1..128']}), is_leaf=True, yang_name="maskLength", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='common:mask', is_config=True)
    self.__policyName = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="policyName", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'vrfs', u'addressFamily', u'routeImport', u'network', u'networkList']

  def _get_ipMask(self):
    """
    Getter method for ipMask, mapped from YANG variable /vrfs/addressFamily/routeImport/network/networkList/ipMask (inet:ip-prefix)
    """
    return self.__ipMask
      
  def _set_ipMask(self, v, load=False):
    """
    Setter method for ipMask, mapped from YANG variable /vrfs/addressFamily/routeImport/network/networkList/ipMask (inet:ip-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipMask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipMask() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'}),], is_leaf=True, yang_name="ipMask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='inet:ip-prefix', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipMask must be of a type compatible with inet:ip-prefix""",
          'defined-type': "inet:ip-prefix",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'}),], is_leaf=True, yang_name="ipMask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='inet:ip-prefix', is_config=True)""",
        })

    self.__ipMask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipMask(self):
    self.__ipMask = YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'}),], is_leaf=True, yang_name="ipMask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='inet:ip-prefix', is_config=True)


  def _get_network(self):
    """
    Getter method for network, mapped from YANG variable /vrfs/addressFamily/routeImport/network/networkList/network (inet:ip-address)
    """
    return self.__network
      
  def _set_network(self, v, load=False):
    """
    Setter method for network, mapped from YANG variable /vrfs/addressFamily/routeImport/network/networkList/network (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_network is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_network() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-f]{0,4}):)([0-9a-f]{0,4}:){0,5}((([0-9a-f]{0,4}:)?(:|[0-9a-f]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="network", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """network must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-f]{0,4}):)([0-9a-f]{0,4}:){0,5}((([0-9a-f]{0,4}:)?(:|[0-9a-f]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="network", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__network = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_network(self):
    self.__network = YANGDynClass(base=[RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=six.text_type, restriction_dict={u'pattern': u'((:|[0-9a-f]{0,4}):)([0-9a-f]{0,4}:){0,5}((([0-9a-f]{0,4}:)?(:|[0-9a-f]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="network", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='inet:ip-address', is_config=True)


  def _get_maskLength(self):
    """
    Getter method for maskLength, mapped from YANG variable /vrfs/addressFamily/routeImport/network/networkList/maskLength (common:mask)
    """
    return self.__maskLength
      
  def _set_maskLength(self, v, load=False):
    """
    Setter method for maskLength, mapped from YANG variable /vrfs/addressFamily/routeImport/network/networkList/maskLength (common:mask)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maskLength is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maskLength() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'1..128']}), is_leaf=True, yang_name="maskLength", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='common:mask', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maskLength must be of a type compatible with common:mask""",
          'defined-type': "common:mask",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'1..128']}), is_leaf=True, yang_name="maskLength", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='common:mask', is_config=True)""",
        })

    self.__maskLength = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maskLength(self):
    self.__maskLength = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={u'range': [u'1..128']}), is_leaf=True, yang_name="maskLength", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='common:mask', is_config=True)


  def _get_policyName(self):
    """
    Getter method for policyName, mapped from YANG variable /vrfs/addressFamily/routeImport/network/networkList/policyName (string)
    """
    return self.__policyName
      
  def _set_policyName(self, v, load=False):
    """
    Setter method for policyName, mapped from YANG variable /vrfs/addressFamily/routeImport/network/networkList/policyName (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_policyName is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_policyName() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="policyName", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """policyName must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="policyName", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='string', is_config=True)""",
        })

    self.__policyName = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_policyName(self):
    self.__policyName = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="policyName", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='string', is_config=True)

  ipMask = __builtin__.property(_get_ipMask, _set_ipMask)
  network = __builtin__.property(_get_network, _set_network)
  maskLength = __builtin__.property(_get_maskLength, _set_maskLength)
  policyName = __builtin__.property(_get_policyName, _set_policyName)


  _pyangbind_elements = OrderedDict([('ipMask', ipMask), ('network', network), ('maskLength', maskLength), ('policyName', policyName), ])


class yc_network_bgp_network_schema__vrfs_addressFamily_routeImport_network(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bgp_network_schema - based on the path /vrfs/addressFamily/routeImport/network. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__networkList',)

  _yang_name = 'network'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__networkList = YANGDynClass(base=YANGListType("ipMask",yc_networkList_bgp_network_schema__vrfs_addressFamily_routeImport_network_networkList, yang_name="networkList", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipMask', extensions=None), is_container='list', yang_name="networkList", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'vrfs', u'addressFamily', u'routeImport', u'network']

  def _get_networkList(self):
    """
    Getter method for networkList, mapped from YANG variable /vrfs/addressFamily/routeImport/network/networkList (list)
    """
    return self.__networkList
      
  def _set_networkList(self, v, load=False):
    """
    Setter method for networkList, mapped from YANG variable /vrfs/addressFamily/routeImport/network/networkList (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_networkList is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_networkList() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ipMask",yc_networkList_bgp_network_schema__vrfs_addressFamily_routeImport_network_networkList, yang_name="networkList", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipMask', extensions=None), is_container='list', yang_name="networkList", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """networkList must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ipMask",yc_networkList_bgp_network_schema__vrfs_addressFamily_routeImport_network_networkList, yang_name="networkList", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipMask', extensions=None), is_container='list', yang_name="networkList", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='list', is_config=True)""",
        })

    self.__networkList = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_networkList(self):
    self.__networkList = YANGDynClass(base=YANGListType("ipMask",yc_networkList_bgp_network_schema__vrfs_addressFamily_routeImport_network_networkList, yang_name="networkList", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipMask', extensions=None), is_container='list', yang_name="networkList", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='list', is_config=True)

  networkList = __builtin__.property(_get_networkList, _set_networkList)


  _pyangbind_elements = OrderedDict([('networkList', networkList), ])


class yc_routeImport_bgp_network_schema__vrfs_addressFamily_routeImport(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bgp_network_schema - based on the path /vrfs/addressFamily/routeImport. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__network',)

  _yang_name = 'routeImport'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__network = YANGDynClass(base=yc_network_bgp_network_schema__vrfs_addressFamily_routeImport_network, is_container='container', yang_name="network", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'vrfs', u'addressFamily', u'routeImport']

  def _get_network(self):
    """
    Getter method for network, mapped from YANG variable /vrfs/addressFamily/routeImport/network (container)
    """
    return self.__network
      
  def _set_network(self, v, load=False):
    """
    Setter method for network, mapped from YANG variable /vrfs/addressFamily/routeImport/network (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_network is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_network() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_network_bgp_network_schema__vrfs_addressFamily_routeImport_network, is_container='container', yang_name="network", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """network must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_network_bgp_network_schema__vrfs_addressFamily_routeImport_network, is_container='container', yang_name="network", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='container', is_config=True)""",
        })

    self.__network = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_network(self):
    self.__network = YANGDynClass(base=yc_network_bgp_network_schema__vrfs_addressFamily_routeImport_network, is_container='container', yang_name="network", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='container', is_config=True)

  network = __builtin__.property(_get_network, _set_network)


  _pyangbind_elements = OrderedDict([('network', network), ])


class yc_addressFamily_bgp_network_schema__vrfs_addressFamily(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bgp_network_schema - based on the path /vrfs/addressFamily. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__familyType','__routeImport',)

  _yang_name = 'addressFamily'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__familyType = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'ipv6Unicast': {}, u'ipv4Unicast': {}},), is_leaf=True, yang_name="familyType", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='addressFamilyType', is_config=True)
    self.__routeImport = YANGDynClass(base=yc_routeImport_bgp_network_schema__vrfs_addressFamily_routeImport, is_container='container', yang_name="routeImport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'vrfs', u'addressFamily']

  def _get_familyType(self):
    """
    Getter method for familyType, mapped from YANG variable /vrfs/addressFamily/familyType (addressFamilyType)
    """
    return self.__familyType
      
  def _set_familyType(self, v, load=False):
    """
    Setter method for familyType, mapped from YANG variable /vrfs/addressFamily/familyType (addressFamilyType)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_familyType is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_familyType() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'ipv6Unicast': {}, u'ipv4Unicast': {}},), is_leaf=True, yang_name="familyType", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='addressFamilyType', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """familyType must be of a type compatible with addressFamilyType""",
          'defined-type': "bgp_network_schema:addressFamilyType",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'ipv6Unicast': {}, u'ipv4Unicast': {}},), is_leaf=True, yang_name="familyType", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='addressFamilyType', is_config=True)""",
        })

    self.__familyType = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_familyType(self):
    self.__familyType = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'ipv6Unicast': {}, u'ipv4Unicast': {}},), is_leaf=True, yang_name="familyType", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='addressFamilyType', is_config=True)


  def _get_routeImport(self):
    """
    Getter method for routeImport, mapped from YANG variable /vrfs/addressFamily/routeImport (container)
    """
    return self.__routeImport
      
  def _set_routeImport(self, v, load=False):
    """
    Setter method for routeImport, mapped from YANG variable /vrfs/addressFamily/routeImport (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_routeImport is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_routeImport() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_routeImport_bgp_network_schema__vrfs_addressFamily_routeImport, is_container='container', yang_name="routeImport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """routeImport must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_routeImport_bgp_network_schema__vrfs_addressFamily_routeImport, is_container='container', yang_name="routeImport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='container', is_config=True)""",
        })

    self.__routeImport = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_routeImport(self):
    self.__routeImport = YANGDynClass(base=yc_routeImport_bgp_network_schema__vrfs_addressFamily_routeImport, is_container='container', yang_name="routeImport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='container', is_config=True)

  familyType = __builtin__.property(_get_familyType, _set_familyType)
  routeImport = __builtin__.property(_get_routeImport, _set_routeImport)


  _pyangbind_elements = OrderedDict([('familyType', familyType), ('routeImport', routeImport), ])


class yc_vrfs_bgp_network_schema__vrfs(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bgp_network_schema - based on the path /vrfs. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__vrf','__addressFamily',)

  _yang_name = 'vrfs'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__vrf = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'default': {}, u'globals': {}},), is_leaf=True, yang_name="vrf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='vrf', is_config=True)
    self.__addressFamily = YANGDynClass(base=YANGListType("familyType",yc_addressFamily_bgp_network_schema__vrfs_addressFamily, yang_name="addressFamily", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='familyType', extensions=None), is_container='list', yang_name="addressFamily", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'vrfs']

  def _get_vrf(self):
    """
    Getter method for vrf, mapped from YANG variable /vrfs/vrf (vrf)
    """
    return self.__vrf
      
  def _set_vrf(self, v, load=False):
    """
    Setter method for vrf, mapped from YANG variable /vrfs/vrf (vrf)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'default': {}, u'globals': {}},), is_leaf=True, yang_name="vrf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='vrf', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf must be of a type compatible with vrf""",
          'defined-type': "bgp_network_schema:vrf",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'default': {}, u'globals': {}},), is_leaf=True, yang_name="vrf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='vrf', is_config=True)""",
        })

    self.__vrf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf(self):
    self.__vrf = YANGDynClass(base=RestrictedClassType(base_type=six.text_type,                                     restriction_type="dict_key",                                     restriction_arg={u'default': {}, u'globals': {}},), is_leaf=True, yang_name="vrf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='vrf', is_config=True)


  def _get_addressFamily(self):
    """
    Getter method for addressFamily, mapped from YANG variable /vrfs/addressFamily (list)
    """
    return self.__addressFamily
      
  def _set_addressFamily(self, v, load=False):
    """
    Setter method for addressFamily, mapped from YANG variable /vrfs/addressFamily (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_addressFamily is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_addressFamily() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("familyType",yc_addressFamily_bgp_network_schema__vrfs_addressFamily, yang_name="addressFamily", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='familyType', extensions=None), is_container='list', yang_name="addressFamily", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """addressFamily must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("familyType",yc_addressFamily_bgp_network_schema__vrfs_addressFamily, yang_name="addressFamily", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='familyType', extensions=None), is_container='list', yang_name="addressFamily", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='list', is_config=True)""",
        })

    self.__addressFamily = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_addressFamily(self):
    self.__addressFamily = YANGDynClass(base=YANGListType("familyType",yc_addressFamily_bgp_network_schema__vrfs_addressFamily, yang_name="addressFamily", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='familyType', extensions=None), is_container='list', yang_name="addressFamily", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='list', is_config=True)

  vrf = __builtin__.property(_get_vrf, _set_vrf)
  addressFamily = __builtin__.property(_get_addressFamily, _set_addressFamily)


  _pyangbind_elements = OrderedDict([('vrf', vrf), ('addressFamily', addressFamily), ])


class bgp_network_schema(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module bgp_network_schema - based on the path /bgp_network_schema. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_path_helper', '_extmethods', '__vrfs',)

  _yang_name = 'bgp_network_schema'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__vrfs = YANGDynClass(base=YANGListType("vrf",yc_vrfs_bgp_network_schema__vrfs, yang_name="vrfs", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vrf', extensions=None), is_container='list', yang_name="vrfs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_vrfs(self):
    """
    Getter method for vrfs, mapped from YANG variable /vrfs (list)
    """
    return self.__vrfs
      
  def _set_vrfs(self, v, load=False):
    """
    Setter method for vrfs, mapped from YANG variable /vrfs (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrfs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrfs() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("vrf",yc_vrfs_bgp_network_schema__vrfs, yang_name="vrfs", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vrf', extensions=None), is_container='list', yang_name="vrfs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrfs must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("vrf",yc_vrfs_bgp_network_schema__vrfs, yang_name="vrfs", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vrf', extensions=None), is_container='list', yang_name="vrfs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='list', is_config=True)""",
        })

    self.__vrfs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrfs(self):
    self.__vrfs = YANGDynClass(base=YANGListType("vrf",yc_vrfs_bgp_network_schema__vrfs, yang_name="vrfs", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vrf', extensions=None), is_container='list', yang_name="vrfs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://north-api.aliababa.com/schema/portChannel/', defining_module='bgp_network_schema', yang_type='list', is_config=True)

  vrfs = __builtin__.property(_get_vrfs, _set_vrfs)


  _pyangbind_elements = OrderedDict([('vrfs', vrfs), ])


