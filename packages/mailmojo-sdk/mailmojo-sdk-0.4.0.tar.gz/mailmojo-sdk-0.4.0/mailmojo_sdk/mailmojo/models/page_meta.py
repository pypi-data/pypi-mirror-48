# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PageMeta(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, next_page=None, page=None, per_page=None, prev_page=None, total=None):
        """
        PageMeta - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'next_page': 'int',
            'page': 'int',
            'per_page': 'int',
            'prev_page': 'int',
            'total': 'int'
        }

        self.attribute_map = {
            'next_page': 'next_page',
            'page': 'page',
            'per_page': 'per_page',
            'prev_page': 'prev_page',
            'total': 'total'
        }

        self._next_page = next_page
        self._page = page
        self._per_page = per_page
        self._prev_page = prev_page
        self._total = total

    @property
    def next_page(self):
        """
        Gets the next_page of this PageMeta.

        :return: The next_page of this PageMeta.
        :rtype: int
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """
        Sets the next_page of this PageMeta.

        :param next_page: The next_page of this PageMeta.
        :type: int
        """

        self._next_page = next_page

    @property
    def page(self):
        """
        Gets the page of this PageMeta.

        :return: The page of this PageMeta.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """
        Sets the page of this PageMeta.

        :param page: The page of this PageMeta.
        :type: int
        """

        self._page = page

    @property
    def per_page(self):
        """
        Gets the per_page of this PageMeta.

        :return: The per_page of this PageMeta.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """
        Sets the per_page of this PageMeta.

        :param per_page: The per_page of this PageMeta.
        :type: int
        """

        self._per_page = per_page

    @property
    def prev_page(self):
        """
        Gets the prev_page of this PageMeta.

        :return: The prev_page of this PageMeta.
        :rtype: int
        """
        return self._prev_page

    @prev_page.setter
    def prev_page(self, prev_page):
        """
        Sets the prev_page of this PageMeta.

        :param prev_page: The prev_page of this PageMeta.
        :type: int
        """

        self._prev_page = prev_page

    @property
    def total(self):
        """
        Gets the total of this PageMeta.

        :return: The total of this PageMeta.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this PageMeta.

        :param total: The total of this PageMeta.
        :type: int
        """

        self._total = total

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PageMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
