# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MinimalContact(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, email=None, first_name=None, last_name=None, name=None, tags=None):
        """
        MinimalContact - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'email': 'str',
            'first_name': 'str',
            'last_name': 'str',
            'name': 'str',
            'tags': 'list[str]'
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'name': 'name',
            'tags': 'tags'
        }

        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._name = name
        self._tags = tags

    @property
    def email(self):
        """
        Gets the email of this MinimalContact.

        :return: The email of this MinimalContact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this MinimalContact.

        :param email: The email of this MinimalContact.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this MinimalContact.

        :return: The first_name of this MinimalContact.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this MinimalContact.

        :param first_name: The first_name of this MinimalContact.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this MinimalContact.

        :return: The last_name of this MinimalContact.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this MinimalContact.

        :param last_name: The last_name of this MinimalContact.
        :type: str
        """

        self._last_name = last_name

    @property
    def name(self):
        """
        Gets the name of this MinimalContact.
        Full name of the contact. Will, if present, take precedence over first_name and last_name.

        :return: The name of this MinimalContact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MinimalContact.
        Full name of the contact. Will, if present, take precedence over first_name and last_name.

        :param name: The name of this MinimalContact.
        :type: str
        """

        self._name = name

    @property
    def tags(self):
        """
        Gets the tags of this MinimalContact.

        :return: The tags of this MinimalContact.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this MinimalContact.

        :param tags: The tags of this MinimalContact.
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MinimalContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
