# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class User(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, address=None, city=None, contact_email=None, contact_name=None, created=None, logo_url=None, name=None, partner=None, plan=None, trial_expires=None, username=None, zip_code=None):
        """
        User - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address': 'str',
            'city': 'str',
            'contact_email': 'str',
            'contact_name': 'str',
            'created': 'datetime',
            'logo_url': 'str',
            'name': 'str',
            'partner': 'str',
            'plan': 'str',
            'trial_expires': 'date',
            'username': 'str',
            'zip_code': 'str'
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'contact_email': 'contact_email',
            'contact_name': 'contact_name',
            'created': 'created',
            'logo_url': 'logo_url',
            'name': 'name',
            'partner': 'partner',
            'plan': 'plan',
            'trial_expires': 'trial_expires',
            'username': 'username',
            'zip_code': 'zip_code'
        }

        self._address = address
        self._city = city
        self._contact_email = contact_email
        self._contact_name = contact_name
        self._created = created
        self._logo_url = logo_url
        self._name = name
        self._partner = partner
        self._plan = plan
        self._trial_expires = trial_expires
        self._username = username
        self._zip_code = zip_code

    @property
    def address(self):
        """
        Gets the address of this User.

        :return: The address of this User.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this User.

        :param address: The address of this User.
        :type: str
        """

        self._address = address

    @property
    def city(self):
        """
        Gets the city of this User.

        :return: The city of this User.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this User.

        :param city: The city of this User.
        :type: str
        """

        self._city = city

    @property
    def contact_email(self):
        """
        Gets the contact_email of this User.

        :return: The contact_email of this User.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """
        Sets the contact_email of this User.

        :param contact_email: The contact_email of this User.
        :type: str
        """
        if contact_email is None:
            raise ValueError("Invalid value for `contact_email`, must not be `None`")

        self._contact_email = contact_email

    @property
    def contact_name(self):
        """
        Gets the contact_name of this User.

        :return: The contact_name of this User.
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """
        Sets the contact_name of this User.

        :param contact_name: The contact_name of this User.
        :type: str
        """

        self._contact_name = contact_name

    @property
    def created(self):
        """
        Gets the created of this User.

        :return: The created of this User.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this User.

        :param created: The created of this User.
        :type: datetime
        """

        self._created = created

    @property
    def logo_url(self):
        """
        Gets the logo_url of this User.

        :return: The logo_url of this User.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """
        Sets the logo_url of this User.

        :param logo_url: The logo_url of this User.
        :type: str
        """

        self._logo_url = logo_url

    @property
    def name(self):
        """
        Gets the name of this User.

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this User.

        :param name: The name of this User.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def partner(self):
        """
        Gets the partner of this User.

        :return: The partner of this User.
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """
        Sets the partner of this User.

        :param partner: The partner of this User.
        :type: str
        """

        self._partner = partner

    @property
    def plan(self):
        """
        Gets the plan of this User.

        :return: The plan of this User.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """
        Sets the plan of this User.

        :param plan: The plan of this User.
        :type: str
        """

        self._plan = plan

    @property
    def trial_expires(self):
        """
        Gets the trial_expires of this User.

        :return: The trial_expires of this User.
        :rtype: date
        """
        return self._trial_expires

    @trial_expires.setter
    def trial_expires(self, trial_expires):
        """
        Sets the trial_expires of this User.

        :param trial_expires: The trial_expires of this User.
        :type: date
        """

        self._trial_expires = trial_expires

    @property
    def username(self):
        """
        Gets the username of this User.

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this User.

        :param username: The username of this User.
        :type: str
        """

        self._username = username

    @property
    def zip_code(self):
        """
        Gets the zip_code of this User.

        :return: The zip_code of this User.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """
        Sets the zip_code of this User.

        :param zip_code: The zip_code of this User.
        :type: str
        """

        self._zip_code = zip_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
