# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Embed(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, options=None, session_type=None, user_ip=None):
        """
        Embed - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'options': 'EmbedOptions',
            'session_type': 'str',
            'user_ip': 'str'
        }

        self.attribute_map = {
            'options': 'options',
            'session_type': 'session_type',
            'user_ip': 'user_ip'
        }

        self._options = options
        self._session_type = session_type
        self._user_ip = user_ip

    @property
    def options(self):
        """
        Gets the options of this Embed.

        :return: The options of this Embed.
        :rtype: EmbedOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this Embed.

        :param options: The options of this Embed.
        :type: EmbedOptions
        """

        self._options = options

    @property
    def session_type(self):
        """
        Gets the session_type of this Embed.

        :return: The session_type of this Embed.
        :rtype: str
        """
        return self._session_type

    @session_type.setter
    def session_type(self, session_type):
        """
        Sets the session_type of this Embed.

        :param session_type: The session_type of this Embed.
        :type: str
        """
        allowed_values = ["newsletters"]
        if session_type not in allowed_values:
            raise ValueError(
                "Invalid value for `session_type` ({0}), must be one of {1}"
                .format(session_type, allowed_values)
            )

        self._session_type = session_type

    @property
    def user_ip(self):
        """
        Gets the user_ip of this Embed.

        :return: The user_ip of this Embed.
        :rtype: str
        """
        return self._user_ip

    @user_ip.setter
    def user_ip(self, user_ip):
        """
        Sets the user_ip of this Embed.

        :param user_ip: The user_ip of this Embed.
        :type: str
        """
        if user_ip is None:
            raise ValueError("Invalid value for `user_ip`, must not be `None`")

        self._user_ip = user_ip

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Embed):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
