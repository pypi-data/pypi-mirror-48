# coding: utf-8

"""
    MailMojo API

    v1 of the MailMojo API  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: hjelp@mailmojo.no
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NewsletterCreation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, html=None, html_url=None, list_id=None, segment_ids=None, subject=None, template_id=None, utm_campaign=None):
        """
        NewsletterCreation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'html': 'str',
            'html_url': 'str',
            'list_id': 'int',
            'segment_ids': 'list[str]',
            'subject': 'str',
            'template_id': 'int',
            'utm_campaign': 'str'
        }

        self.attribute_map = {
            'html': 'html',
            'html_url': 'html_url',
            'list_id': 'list_id',
            'segment_ids': 'segment_ids',
            'subject': 'subject',
            'template_id': 'template_id',
            'utm_campaign': 'utm_campaign'
        }

        self._html = html
        self._html_url = html_url
        self._list_id = list_id
        self._segment_ids = segment_ids
        self._subject = subject
        self._template_id = template_id
        self._utm_campaign = utm_campaign

    @property
    def html(self):
        """
        Gets the html of this NewsletterCreation.

        :return: The html of this NewsletterCreation.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """
        Sets the html of this NewsletterCreation.

        :param html: The html of this NewsletterCreation.
        :type: str
        """

        self._html = html

    @property
    def html_url(self):
        """
        Gets the html_url of this NewsletterCreation.

        :return: The html_url of this NewsletterCreation.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """
        Sets the html_url of this NewsletterCreation.

        :param html_url: The html_url of this NewsletterCreation.
        :type: str
        """

        self._html_url = html_url

    @property
    def list_id(self):
        """
        Gets the list_id of this NewsletterCreation.

        :return: The list_id of this NewsletterCreation.
        :rtype: int
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """
        Sets the list_id of this NewsletterCreation.

        :param list_id: The list_id of this NewsletterCreation.
        :type: int
        """
        if list_id is None:
            raise ValueError("Invalid value for `list_id`, must not be `None`")

        self._list_id = list_id

    @property
    def segment_ids(self):
        """
        Gets the segment_ids of this NewsletterCreation.

        :return: The segment_ids of this NewsletterCreation.
        :rtype: list[str]
        """
        return self._segment_ids

    @segment_ids.setter
    def segment_ids(self, segment_ids):
        """
        Sets the segment_ids of this NewsletterCreation.

        :param segment_ids: The segment_ids of this NewsletterCreation.
        :type: list[str]
        """

        self._segment_ids = segment_ids

    @property
    def subject(self):
        """
        Gets the subject of this NewsletterCreation.

        :return: The subject of this NewsletterCreation.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this NewsletterCreation.

        :param subject: The subject of this NewsletterCreation.
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def template_id(self):
        """
        Gets the template_id of this NewsletterCreation.

        :return: The template_id of this NewsletterCreation.
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """
        Sets the template_id of this NewsletterCreation.

        :param template_id: The template_id of this NewsletterCreation.
        :type: int
        """

        self._template_id = template_id

    @property
    def utm_campaign(self):
        """
        Gets the utm_campaign of this NewsletterCreation.

        :return: The utm_campaign of this NewsletterCreation.
        :rtype: str
        """
        return self._utm_campaign

    @utm_campaign.setter
    def utm_campaign(self, utm_campaign):
        """
        Sets the utm_campaign of this NewsletterCreation.

        :param utm_campaign: The utm_campaign of this NewsletterCreation.
        :type: str
        """

        self._utm_campaign = utm_campaign

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NewsletterCreation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
