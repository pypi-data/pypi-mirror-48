from __future__ import absolute_import, division, print_function
from simdna.synthetic.core import DefaultNameMixin
from simdna.synthetic.substringgen import AbstractSubstringGenerator
from collections import OrderedDict


class TransformedSubstringGenerator(AbstractSubstringGenerator):
    """Generates a substring and applies a series of transformations.

    Takes a substringGenerator and a set of AbstractTransformation objects,
    applies the transformations to the generated substring

    Arguments:
        substringGenerator: instance of :class:`.AbstractSubstringGenerator`

        transformations: an iterable of :class:`.AbstractTransformation`

        transformationsDescription: a string that will be prefixed in\
        front of ``substringDescription`` (generated by\
        ``substringGenerator.generateSubstring())`` to produce the\
        ``stringDescription``.

        name: see :class:`.DefaultNameMixin`.
    """

    def __init__(self, substringGenerator, transformations,
                       transformationsDescription="transformations",
                       name=None):
        self.substringGenerator = substringGenerator
        self.transformations = transformations
        self.transformationsDescription = transformationsDescription
        super(TransformedSubstringGenerator, self).__init__(self.name)

    def generateSubstring(self):
        """See superclass.
        """
        substring, substringDescription = self.substringGenerator.generateSubstring()
        baseSubstringArr = [x for x in substring]
        for transformation in self.transformations:
            baseSubstringArr = transformation.transform(baseSubstringArr)
        return "".join(baseSubstringArr), self.transformationsDescription + "-" + substringDescription

    def getJsonableObject(self):
        """See superclass.
        """
        return OrderedDict([("class", "TransformedSubstringGenerator"),
    ("substringGenerator", self.substringGenerator.getJsonableObject()),
    ("transformations", [x.getJsonableObject() for x in self.transformations])
    ])


class AbstractTransformation(DefaultNameMixin):
    """Class representing a transformation applied to a character array.

    Takes an array of characters, applies some transformation.
    """

    def transform(self, stringArr):
        """Applies a transformation to stringArr.

            Arguments:
                stringArr: an array of characters.

            Returns:
                An array of characters that has the transformation applied.
            May mutate ``stringArr``
        """
        raise NotImplementedError()

    def getJsonableObject(self):
        """Get JSON object representation.

        Returns:
            A json-friendly object (built of dictionaries, lists and
        python primitives), which can be converted to json to
        record the exact details of what was simualted.
        """
        raise NotImplementedError()


class RevertToReference(AbstractTransformation):
    """For a series of mutations, reverts the supplied character
    to the reference ("unmutated") string.

    Arguments:
        setOfMutations: instance of AbstractSetOfMutations

        name: see :class:`.DefaultNameMixin`.
    """

    def __init__(self, setOfMutations, name=None):
        self.setOfMutations = setOfMutations
        super(RevertToReference, self).__init__(name)

    def transform(self, stringArr):
        """See superclass.
        """
        for mutation in self.setOfMutations.getMutationsArr():
            mutation.revert(stringArr)
        return stringArr

    def getJsonableObject(self):
        """See superclass.
        """
        return OrderedDict([
                 ("class", "RevertToReference"),
                 ("setOfMutations", self.setOfMutations.getJsonableObject())])


class AbstractApplySingleMutationFromSet(AbstractTransformation):
    """
        Class for applying a single mutation from a set of mutations; used
        to transform substrings generated by another method

        Arguments:
            setOfMutations: instance of :class:`.AbstractSetOfMutations`

            name: see :class:`.DefaultNameMixin`.
    """

    def __init__(self, setOfMutations, name=None):
        self.setOfMutations = setOfMutations
        super(AbstractApplySingleMutationFromSet, self).__init__(name)

    def transform(self, stringArr):
        """See superclass.
        """
        selectedMutation = self.selectMutation()
        selectedMutation.applyMutation(stringArr)
        return stringArr

    def selectMutation(self):
        """Chooses a mutation from the set of mutations to apply.

        Returns:
            an instance of :class:`.Mutation`
        """
        raise NotImplementedError()

    def getJsonableObject(self):
        """See superclass.
        """
        return OrderedDict([
    ("class", type(self).__name__),
    ("selectedMutations", self.setOfMutations.getJsonableObject())])


class Mutation(object):
    """Represent a single bp mutation in a motif sequence.

    Useful for creating simulations involving SNPs.

    Arguments:
        index: the position idx within the motif of the mutation

        previous: character, the previous base at this position

        new: character, the new base at this position after the mutation

        parentLength: optional; length of the motif. Used for assertion checks.
    """

    def __init__(self, index, previous, new, parentLength=None):
        self.index = index
        assert previous != new
        self.previous = previous
        self.new = new
        # the length of the full sequence that self.index indexes into
        self.parentLength = parentLength

    def parentLengthAssertionCheck(self, stringArr):
        """Checks that stringArr is consistent with parentLength if defined.
        """
        assert self.parentLength is None or len(stringArr) == self.parentLength

    def revert(self, stringArr):
        """Set the base at the position of the mutation to the unmutated value.

        Modifies stringArr which is an array of characters.

        Arguments:
            stringArr: an array of characters, which gets modified.
        """
        self.parentLengthAssertionCheck(stringArr)
        stringArr[self.index] = self.previous

    def applyMutation(self, stringArr):
        """Set the base at the position of the mutation to the mutated value.
        
        Modifies stringArr which is an array of characters.

        Arguments:
            stringArr: an array of characters, which gets modified.
        """
        self.parentLengthAssertionCheck(stringArr)
        assert stringArr[self.index] == self.previous
        stringArr[self.index] = self.new


class ChooseMutationAtRandom(AbstractApplySingleMutationFromSet):
    """Selects a mutation at random from self.setOfMutations to apply.
    """

    def selectMutation(self):
        mutationsArr = self.setOfMutations.getMutationsArr()
        return mutationsArr[int(random.random() * len(mutationsArr))]


class AbstractSetOfMutations(object):
    """Represents a collection of :class:`.Mutation` objects.

    Arguments:
        mutationsArr: array of :class:`.Mutation` objects
    """

    def __init__(self, mutationsArr):
        self.mutationsArr = mutationsArr

    def getMutationsArr(self):
        """Returns ``self.mutationsArr``

        Returns:
            ``self.mutationsArr``
        """
        return self.mutationsArr

    def getJsonableObject(self):
        """Get JSON object representation.

        Returns:
            A json-friendly object (built of dictionaries, lists and
        python primitives), which can be converted to json to
        record the exact details of what was simualted.
        """
        raise NotImplementedError()
