# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class VirtualMachine(pulumi.CustomResource):
    alternate_guest_name: pulumi.Output[str]
    """
    The guest name for the operating system
    when `guest_id` is `other` or `other-64`.
    """
    annotation: pulumi.Output[str]
    """
    A user-provided description of the virtual machine.
    The default is no annotation.
    """
    boot_delay: pulumi.Output[float]
    """
    The number of milliseconds to wait before starting
    the boot sequence. The default is no delay.
    """
    boot_retry_delay: pulumi.Output[float]
    """
    The number of milliseconds to wait before
    retrying the boot sequence. This only valid if `boot_retry_enabled` is true.
    Default: `10000` (10 seconds).
    """
    boot_retry_enabled: pulumi.Output[bool]
    """
    If set to true, a virtual machine that
    fails to boot will try again after the delay defined in `boot_retry_delay`.
    Default: `false`.
    """
    cdrom: pulumi.Output[dict]
    """
    A specification for a CDROM device on this virtual
    machine. See CDROM options below.
    """
    change_version: pulumi.Output[str]
    """
    A unique identifier for a given version of the last
    configuration applied, such the timestamp of the last update to the
    configuration.
    """
    clone: pulumi.Output[dict]
    """
    When specified, the VM will be created as a clone of a
    specified template. Optional customization options can be submitted as well.
    See creating a virtual machine from a
    template for more details.
    """
    cpu_hot_add_enabled: pulumi.Output[bool]
    """
    Allow CPUs to be added to this virtual
    machine while it is running.
    """
    cpu_hot_remove_enabled: pulumi.Output[bool]
    """
    Allow CPUs to be removed to this
    virtual machine while it is running.
    """
    cpu_limit: pulumi.Output[float]
    """
    The maximum amount of CPU (in MHz) that this virtual
    machine can consume, regardless of available resources. The default is no
    limit.
    """
    cpu_performance_counters_enabled: pulumi.Output[bool]
    """
    Enable CPU performance
    counters on this virtual machine. Default: `false`.
    """
    cpu_reservation: pulumi.Output[float]
    """
    The amount of CPU (in MHz) that this virtual
    machine is guaranteed. The default is no reservation.
    """
    cpu_share_count: pulumi.Output[float]
    """
    The number of CPU shares allocated to the
    virtual machine when the `cpu_share_level` is `custom`.
    """
    cpu_share_level: pulumi.Output[str]
    """
    The allocation level for CPU resources. Can be
    one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
    """
    custom_attributes: pulumi.Output[dict]
    """
    Map of custom attribute ids to attribute
    value strings to set for virtual machine. See
    [here][docs-setting-custom-attributes] for a reference on how to set values
    for custom attributes.
    """
    datastore_cluster_id: pulumi.Output[str]
    """
    The [managed object reference
    ID][docs-about-morefs] of the datastore cluster ID to use. This setting
    applies to entire virtual machine and implies that you wish to use Storage
    DRS with this virtual machine. See the section on virtual machine
    migration for details on changing this value.
    """
    datastore_id: pulumi.Output[str]
    """
    The datastore ID that the ISO is located in.
    Requried for using a datastore ISO. Conflicts with `client_device`.
    """
    default_ip_address: pulumi.Output[str]
    """
    The IP address selected by Terraform to be used with
    any [provisioners][tf-docs-provisioners] configured on this resource.
    Whenever possible, this is the first IPv4 address that is reachable through
    the default gateway configured on the machine, then the first reachable IPv6
    address, and then the first general discovered address if neither exist. If
    VMware tools is not running on the virtual machine, or if the VM is powered
    off, this value will be blank.
    """
    disks: pulumi.Output[list]
    """
    A specification for a virtual disk device on this virtual
    machine. See disk options below.
    """
    efi_secure_boot_enabled: pulumi.Output[bool]
    """
    When the `firmware` type is set to is
    `efi`, this enables EFI secure boot. Default: `false`.
    """
    enable_disk_uuid: pulumi.Output[bool]
    """
    Expose the UUIDs of attached virtual disks to
    the virtual machine, allowing access to them in the guest. Default: `false`.
    """
    enable_logging: pulumi.Output[bool]
    """
    Enable logging of virtual machine events to a
    log file stored in the virtual machine directory. Default: `false`.
    """
    ept_rvi_mode: pulumi.Output[str]
    """
    The EPT/RVI (hardware memory virtualization)
    setting for this virtual machine. Can be one of `automatic`, `on`, or `off`.
    Default: `automatic`.
    """
    extra_config: pulumi.Output[dict]
    """
    Extra configuration data for this virtual
    machine. Can be used to supply advanced parameters not normally in
    configuration, such as instance metadata.
    """
    firmware: pulumi.Output[str]
    """
    The firmware interface to use on the virtual machine.
    Can be one of `bios` or `EFI`. Default: `bios`.
    """
    folder: pulumi.Output[str]
    """
    The path to the folder to put this virtual machine in,
    relative to the datacenter that the resource pool is in.
    """
    force_power_off: pulumi.Output[bool]
    """
    If a guest shutdown failed or timed out while
    updating or destroying (see
    `shutdown_wait_timeout`), force the power-off of
    the virtual machine. Default: `true`.
    """
    guest_id: pulumi.Output[str]
    """
    The guest ID for the operating system type. For a
    full list of possible values, see [here][vmware-docs-guest-ids]. Default: `other-64`.
    """
    guest_ip_addresses: pulumi.Output[list]
    """
    The current list of IP addresses on this machine,
    including the value of `default_ip_address`. If VMware tools is not running
    on the virtual machine, or if the VM is powered off, this list will be empty.
    * `moid`: The [managed object reference ID][docs-about-morefs] of the created
    virtual machine.
    """
    host_system_id: pulumi.Output[str]
    """
    An optional [managed object reference
    ID][docs-about-morefs] of a host to put this virtual machine on. See the
    section on virtual machine migration for
    details on changing this value. If a `host_system_id` is not supplied,
    vSphere will select a host in the resource pool to place the virtual machine,
    according to any defaults or DRS policies in place.
    """
    hv_mode: pulumi.Output[str]
    """
    The (non-nested) hardware virtualization setting for
    this virtual machine. Can be one of `hvAuto`, `hvOn`, or `hvOff`. Default:
    `hvAuto`.
    """
    ignored_guest_ips: pulumi.Output[list]
    """
    List of IP addresses to ignore while waiting
    for an available IP address using either of the waiters. Any IP addresses in
    this list will be ignored if they show up so that the waiter will continue to
    wait for a real IP address. Default: [].
    """
    imported: pulumi.Output[bool]
    """
    This is flagged if the virtual machine has been imported, or the
    state has been migrated from a previous version of the resource. It
    influences the behavior of the first post-import apply operation. See the
    section on importing below.
    """
    latency_sensitivity: pulumi.Output[str]
    """
    Controls the scheduling delay of the
    virtual machine. Use a higher sensitivity for applications that require lower
    latency, such as VOIP, media player applications, or applications that
    require frequent access to mouse or keyboard devices. Can be one of `low`,
    `normal`, `medium`, or `high`.
    """
    memory: pulumi.Output[float]
    """
    The size of the virtual machine's memory, in MB.
    Default: `1024` (1 GB).
    """
    memory_hot_add_enabled: pulumi.Output[bool]
    """
    Allow memory to be added to this
    virtual machine while it is running.
    """
    memory_limit: pulumi.Output[float]
    """
    The maximum amount of memory (in MB) that this
    virtual machine can consume, regardless of available resources. The default
    is no limit.
    """
    memory_reservation: pulumi.Output[float]
    """
    The amount of memory (in MB) that this
    virtual machine is guaranteed. The default is no reservation.
    """
    memory_share_count: pulumi.Output[float]
    """
    The number of memory shares allocated to
    the virtual machine when the `memory_share_level` is `custom`.
    """
    memory_share_level: pulumi.Output[str]
    """
    The allocation level for memory resources.
    Can be one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
    """
    migrate_wait_timeout: pulumi.Output[float]
    """
    The amount of time, in minutes, to wait
    for a virtual machine migration to complete before failing. Default: 10
    minutes. Also see the section on virtual machine
    migration.
    """
    moid: pulumi.Output[str]
    name: pulumi.Output[str]
    """
    An alias for both `label` and `path`, the latter when
    using `attach`. Required if not using `label`.
    """
    nested_hv_enabled: pulumi.Output[bool]
    """
    Enable nested hardware virtualization on
    this virtual machine, facilitating nested virtualization in the guest.
    Default: `false`.
    """
    network_interfaces: pulumi.Output[list]
    """
    A specification for a virtual NIC on this
    virtual machine. See network interface options
    below.
    """
    num_cores_per_socket: pulumi.Output[float]
    """
    The number of cores to distribute among
    the CPUs in this virtual machine. If specified, the value supplied to
    `num_cpus` must be evenly divisible by this value. Default: `1`.
    """
    num_cpus: pulumi.Output[float]
    """
    The number of virtual processors to assign to this
    virtual machine. Default: `1`.
    """
    reboot_required: pulumi.Output[bool]
    """
    Value internal to Terraform used to determine if a
    configuration set change requires a reboot. This value is only useful during
    an update process and gets reset on refresh.
    """
    resource_pool_id: pulumi.Output[str]
    """
    The [managed object reference
    ID][docs-about-morefs] of the resource pool to put this virtual machine in.
    See the section on virtual machine migration
    for details on changing this value.
    """
    run_tools_scripts_after_power_on: pulumi.Output[bool]
    """
    Enable the execution of
    post-power-on scripts when VMware tools is installed. Default: `true`.
    """
    run_tools_scripts_after_resume: pulumi.Output[bool]
    """
    Enable the execution of
    post-resume scripts when VMware tools is installed. Default: `true`.
    """
    run_tools_scripts_before_guest_reboot: pulumi.Output[bool]
    """
    Enable the execution of
    pre-reboot scripts when VMware tools is installed. Default: `false`.
    """
    run_tools_scripts_before_guest_shutdown: pulumi.Output[bool]
    """
    Enable the execution
    of pre-shutdown scripts when VMware tools is installed. Default: `true`.
    """
    run_tools_scripts_before_guest_standby: pulumi.Output[bool]
    """
    Enable the execution of
    pre-standby scripts when VMware tools is installed. Default: `true`.
    """
    scsi_bus_sharing: pulumi.Output[str]
    """
    Mode for sharing the SCSI bus. The modes are
    physicalSharing, virtualSharing, and noSharing. Default: `noSharing`.
    """
    scsi_controller_count: pulumi.Output[float]
    """
    The number of SCSI controllers that
    Terraform manages on this virtual machine. This directly affects the amount
    of disks you can add to the virtual machine and the maximum disk unit number.
    Note that lowering this value does not remove controllers. Default: `1`.
    """
    scsi_type: pulumi.Output[str]
    """
    The type of SCSI bus this virtual machine will have.
    Can be one of lsilogic (LSI Logic Parallel), lsilogic-sas (LSI Logic SAS) or
    pvscsi (VMware Paravirtual). Defualt: `pvscsi`.
    """
    shutdown_wait_timeout: pulumi.Output[float]
    """
    The amount of time, in minutes, to wait
    for a graceful guest shutdown when making necessary updates to the virtual
    machine. If `force_power_off` is set to true, the VM will be force powered-off
    after this timeout, otherwise an error is returned. Default: 3 minutes.
    """
    swap_placement_policy: pulumi.Output[str]
    """
    The swap file placement policy for this
    virtual machine. Can be one of `inherit`, `hostLocal`, or `vmDirectory`.
    Default: `inherit`.
    """
    sync_time_with_host: pulumi.Output[bool]
    """
    Enable guest clock synchronization with
    the host. Requires VMware tools to be installed. Default: `false`.
    """
    tags: pulumi.Output[list]
    """
    The IDs of any tags to attach to this resource. See
    [here][docs-applying-tags] for a reference on how to apply tags.
    """
    uuid: pulumi.Output[str]
    """
    The UUID of the virtual disk's VMDK file. This is used to track the
    virtual disk on the virtual machine.
    """
    vapp: pulumi.Output[dict]
    """
    Optional vApp configuration. The only sub-key available
    is `properties`, which is a key/value map of properties for virtual machines
    imported from OVF or OVA files. See Using vApp properties to supply OVF/OVA
    configuration for
    more details.
    """
    vapp_transports: pulumi.Output[list]
    """
    Computed value which is only valid for cloned virtual
    machines. A list of vApp transport methods supported by the source virtual
    machine or template.
    """
    vmware_tools_status: pulumi.Output[str]
    """
    The state of VMware tools in the guest. This will
    determine the proper course of action for some device operations.
    """
    vmx_path: pulumi.Output[str]
    """
    The path of the virtual machine's configuration file in the VM's
    datastore.
    """
    wait_for_guest_ip_timeout: pulumi.Output[float]
    """
    The amount of time, in minutes, to
    wait for an available guest IP address on this virtual machine. This should
    only be used if your version of VMware Tools does not allow the
    `wait_for_guest_net_timeout` waiter to be
    used. A value less than 1 disables the waiter. Default: 0.
    """
    wait_for_guest_net_routable: pulumi.Output[bool]
    """
    Controls whether or not the guest
    network waiter waits for a routable address. When `false`, the waiter does
    not wait for a default gateway, nor are IP addresses checked against any
    discovered default gateways as part of its success criteria. This property is
    ignored if the `wait_for_guest_ip_timeout`
    waiter is used. Default: `true`.
    """
    wait_for_guest_net_timeout: pulumi.Output[float]
    """
    The amount of time, in minutes, to
    wait for an available IP address on this virtual machine's NICs. Older
    versions of VMware Tools do not populate this property. In those cases, this
    waiter can be disabled and the
    `wait_for_guest_ip_timeout` waiter can be used
    instead. A value less than 1 disables the waiter. Default: 5 minutes.
    """
    def __init__(__self__, resource_name, opts=None, alternate_guest_name=None, annotation=None, boot_delay=None, boot_retry_delay=None, boot_retry_enabled=None, cdrom=None, clone=None, cpu_hot_add_enabled=None, cpu_hot_remove_enabled=None, cpu_limit=None, cpu_performance_counters_enabled=None, cpu_reservation=None, cpu_share_count=None, cpu_share_level=None, custom_attributes=None, datastore_cluster_id=None, datastore_id=None, disks=None, efi_secure_boot_enabled=None, enable_disk_uuid=None, enable_logging=None, ept_rvi_mode=None, extra_config=None, firmware=None, folder=None, force_power_off=None, guest_id=None, host_system_id=None, hv_mode=None, ignored_guest_ips=None, latency_sensitivity=None, memory=None, memory_hot_add_enabled=None, memory_limit=None, memory_reservation=None, memory_share_count=None, memory_share_level=None, migrate_wait_timeout=None, name=None, nested_hv_enabled=None, network_interfaces=None, num_cores_per_socket=None, num_cpus=None, resource_pool_id=None, run_tools_scripts_after_power_on=None, run_tools_scripts_after_resume=None, run_tools_scripts_before_guest_reboot=None, run_tools_scripts_before_guest_shutdown=None, run_tools_scripts_before_guest_standby=None, scsi_bus_sharing=None, scsi_controller_count=None, scsi_type=None, shutdown_wait_timeout=None, swap_placement_policy=None, sync_time_with_host=None, tags=None, vapp=None, wait_for_guest_ip_timeout=None, wait_for_guest_net_routable=None, wait_for_guest_net_timeout=None, __name__=None, __opts__=None):
        """
        The `vsphere_virtual_machine` resource can be used to manage the complex
        lifecycle of a virtual machine. It supports management of disk, network
        interface, and CDROM devices, creation from scratch or cloning from template,
        and migration through both host and storage vMotion.
        
        For more details on working with virtual machines in vSphere, see [this
        page][vmware-docs-vm-management].
        
        [vmware-docs-vm-management]: https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.vm_admin.doc/GUID-55238059-912E-411F-A0E9-A7A536972A91.html
        
        ## About Working with Virtual Machines in Terraform
        
        A high degree of control and flexibility is afforded to a vSphere user when it
        comes to how to configure, deploy, and manage virtual machines - much more
        control than given in a traditional cloud provider. As such, Terraform has to
        make some decisions on how to manage the virtual machines it creates and
        manages. This section documents things you need to know about your virtual
        machine configuration that you should consider when setting up virtual
        machines, creating templates to clone from, or migrating from previous versions
        of this resource.
        
        ### Disks
        
        The `vsphere_virtual_machine` resource currently only supports standard
        VMDK-backed virtual disks - it does not support other special kinds of disk
        devices like RDM disks.
        
        Disks are managed by an arbitrary label supplied to the `label`
        attribute of a `disk` block. This is separate from the
        automatic naming that vSphere picks for you when creating a virtual machine.
        Control over a virtual disk's name is not supported unless you are attaching an
        external disk with the `attach` attribute.
        
        Virtual disks can be SCSI disks only. The SCSI controllers managed by Terraform
        can vary, depending on the value supplied to
        `scsi_controller_count`. This also dictates the
        controllers that are checked when looking for disks during a cloning process.
        By default, this value is `1`, meaning that you can have up to 15 disks
        configured on a virtual machine. These are all configured with the controller
        type defined by the `scsi_type` setting. If you are cloning from
        a template, devices will be added or re-configured as necessary.
        
        When cloning from a template, you must specify disks of either the same or
        greater size than the disks in the source template when creating a traditional
        clone, or exactly the same size when cloning from snapshot (also known as a
        linked clone). For more details, see the section on creating a virtual machine
        from a template.
        
        A maximum of 60 virtual disks can be configured when the
        `scsi_controller_count` setting is configured to its
        maximum of `4` controllers. See the disk options section for
        more details.
        
        ### Customization and network waiters
        
        Terraform waits during various parts of a virtual machine deployment to ensure
        that it is in a correct expected state before proceeding. These happen when a
        VM is created, or also when it's updated, depending on the waiter.
        
        Two waiters of note are:
        
        * **The customization waiter:** This waiter watches events in vSphere to
          monitor when customization on a virtual machine completes during VM creation.
          Depending on your vSphere or VM configuration it may be necessary to change
          the timeout or turn it off. This can be controlled by the
          `timeout` setting in the customization
          settings block.
        * **The network waiter:** This waiter waits for interfaces to show up on a
          guest virtual machine close to the end of both VM creation and update. This
          waiter is necessary to ensure that correct IP information gets reported to
          the guest virtual machine, mainly to facilitate the availability of a valid,
          reachable default IP address for any [provisioners][tf-docs-provisioners].
          The behavior of the waiter can be controlled with the
          `wait_for_guest_net_timeout`,
          `wait_for_guest_net_routable`,
          `wait_for_guest_ip_timeout`, and
          `ignored_guest_ips` settings.
        
        [tf-docs-provisioners]: /docs/provisioners/index.html
        
        ### Migrating from a previous version of this resource
        
        > **NOTE:** This section only applies to versions of this resource available
        in versions v0.4.2 of this provider or earlier.
        
        The path for migrating to the current version of this resource is very similar
        to the import path, with the exception that the `terraform
        import` command does not need to be run. See that section for details on what
        is required before you run `terraform plan` on a state that requires migration.
        
        A successful migration usually only results in a configuration-only diff - that
        is, Terraform reconciles some configuration settings that cannot be set during
        the migration process with state. In this event, no reconfiguration operations
        are sent to the vSphere server during the next `terraform apply`.  See the
        importing section for more details.
        
        ## Creating a Virtual Machine from a Template
        
        The `clone` block can be used to create a new virtual machine from an existing
        virtual machine or template. The resource supports both making a complete copy
        of a virtual machine, or cloning from a snapshot (otherwise known as a linked
        clone).
        
        See the cloning and customization
        example for a usage synopsis.
        
        > **NOTE:** Changing any option in `clone` after creation forces a new
        resource.
        
        > **NOTE:** Cloning requires vCenter and is not supported on direct ESXi
        connections.
        
        The options available in the `clone` block are:
        
        * `template_uuid` - (Required) The UUID of the source virtual machine or
          template.
        * `linked_clone` - (Optional) Clone this virtual machine from a snapshot.
          Templates must have a single snapshot only in order to be eligible. Default:
          `false`.
        * `timeout` - (Optional) The timeout, in minutes, to wait for the virtual
          machine clone to complete. Default: 30 minutes.
        * `customize` - (Optional) The customization spec for this clone. This allows
          the user to configure the virtual machine post-clone. For more details, see
          virtual machine customization.
        
        ### Additional requirements and notes for cloning
        
        Note that when cloning from a template, there are additional requirements in
        both the resource configuration and source template:
        
        * The virtual machine must not be powered on at the time of cloning.
        * All disks on the virtual machine must be SCSI disks.
        * You must specify at least the same number of `disk` devices as there are
          disks that exist in the template. These devices are ordered and lined up by
          the `unit_number` attribute. Additional disks can be added past this.
        * The `size` of a virtual disk must be at least the same size as its
          counterpart disk in the template.
        * When using `linked_clone`, the `size`, `thin_provisioned`, and
          `eagerly_scrub` settings for each disk must be an exact match to the
          individual disk's counterpart in the source template.
        * The `scsi_controller_count` setting should be
          configured as necessary to cover all of the disks on the template. For best
          results, only configure this setting for the amount of controllers you will
          need to cover your disk quantity and bandwidth needs, and configure your
          template accordingly. For most workloads, this setting should be kept at its
          default of `1`, and all disks in the template should reside on the single,
          primary controller.
        * Some operating systems (such as Windows) do not respond well to a change in
          disk controller type, so when using such OSes, take care to ensure that
          `scsi_type` is set to an exact match of the template's controller set. For
          maximum compatibility, make sure the SCSI controllers on the source template
          are all the same type.
        
        To ease the gathering of some of these options, you can use the
        [`vsphere_virtual_machine` data source][tf-vsphere-virtual-machine-ds], which
        will give you disk attributes, network interface types, SCSI bus types, and
        also the guest ID of the source template.  See the cloning and customization
        example for usage details.
        
        ## Virtual Machine Migration
        
        The `vsphere_virtual_machine` resource supports live migration (otherwise known
        as vMotion) both on the host and storage level. One can migrate the entire VM
        to another host, cluster, resource pool, or datastore, and migrate or pin a
        single disk to a specific datastore.
        
        ### Host, cluster, and resource pool migration 
        
        To migrate the virtual machine to another host or resource pool, change the
        `host_system_id` or `resource_pool_id` to the manged object IDs of the new host
        or resource pool accordingly. To change the virtual machine's cluster or
        standalone host, select a resource pool within the specific target.
        
        The same rules apply for migration as they do for VM creation - any host
        specified needs to be a part of the resource pool supplied. Also keep in mind
        the implications of moving the virtual machine to a resource pool in another
        cluster or standalone host, namely ensuring that all hosts in the cluster (or
        the single standalone host) have access to the datastore that the virtual
        machine is in.
        
        ## Importing 
        
        ### Additional requirements and notes for importing
        
        Many of the same requirements for
        cloning apply to importing,
        although since importing writes directly to state, a lot of these rules cannot
        be enforced at import time, so every effort should be made to ensure the
        correctness of the configuration before the import.
        
        In addition to these rules, the following extra rules apply to importing:
        
        * Disks need to have their `label` argument assigned in a convention
          matching `diskN`, starting with disk number 0, based on each disk's order on
          the SCSI bus. As an example, a disk on SCSI controller 0 with a unit number
          of 0 would be labeled `disk0`, a disk on the same controller with a unit
          number of 1 would be `disk1`, but the next disk, which is on SCSI controller
          1 with a unit number of 0, still becomes `disk2`.
        * Disks always get imported with `keep_on_remove` enabled
          until the first `terraform apply` runs, which will remove the setting for
          known disks. This is an extra safeguard against naming or accounting mistakes
          in the disk configuration.
        * The `scsi_controller_count` for the resource is set
          to the number of contiguous SCSI controllers found, starting with the SCSI
          controller at bus number 0. If no SCSI controllers are found, the VM is not
          eligible for import. To ensure maximum compatibility, make sure your virtual
          machine has the exact number of SCSI controllers it needs, and set
          `scsi_controller_count` accordingly.
        
        After importing, you should run `terraform plan`. Unless you have changed
        anything else in configuration that would be causing other attributes to
        change, the only difference should be configuration-only changes, usually
        comprising of:
        
        * The `imported` flag will transition from `true` to `false`.
        * `keep_on_remove` of known disks will transition from
          `true` to `false`. 
        * Configuration supplied in the `clone` block, if present, will be
          persisted to state. This initial persistence operation does not perform any
          cloning or customization actions, nor does it force a new resource. After the
          first apply operation, further changes to `clone` will force a new resource
          as per normal operation.
        
        > **NOTE:** Further to the above, do not make any configuration changes to
        `clone` after importing or upgrading from a legacy version of the provider
        before doing an initial `terraform apply` as these changes will not correctly
        force a new resource, and your changes will have persisted to state, preventing
        further plans from correctly triggering a diff.
        
        These changes only update Terraform state when applied, hence it is safe to run
        when the virtual machine is running. If more settings are being modified, you
        may need to plan maintenance accordingly for any necessary re-configuration of
        the virtual machine.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alternate_guest_name: The guest name for the operating system
               when `guest_id` is `other` or `other-64`.
        :param pulumi.Input[str] annotation: A user-provided description of the virtual machine.
               The default is no annotation.
        :param pulumi.Input[float] boot_delay: The number of milliseconds to wait before starting
               the boot sequence. The default is no delay.
        :param pulumi.Input[float] boot_retry_delay: The number of milliseconds to wait before
               retrying the boot sequence. This only valid if `boot_retry_enabled` is true.
               Default: `10000` (10 seconds).
        :param pulumi.Input[bool] boot_retry_enabled: If set to true, a virtual machine that
               fails to boot will try again after the delay defined in `boot_retry_delay`.
               Default: `false`.
        :param pulumi.Input[dict] cdrom: A specification for a CDROM device on this virtual
               machine. See CDROM options below.
        :param pulumi.Input[dict] clone: When specified, the VM will be created as a clone of a
               specified template. Optional customization options can be submitted as well.
               See creating a virtual machine from a
               template for more details.
        :param pulumi.Input[bool] cpu_hot_add_enabled: Allow CPUs to be added to this virtual
               machine while it is running.
        :param pulumi.Input[bool] cpu_hot_remove_enabled: Allow CPUs to be removed to this
               virtual machine while it is running.
        :param pulumi.Input[float] cpu_limit: The maximum amount of CPU (in MHz) that this virtual
               machine can consume, regardless of available resources. The default is no
               limit.
        :param pulumi.Input[bool] cpu_performance_counters_enabled: Enable CPU performance
               counters on this virtual machine. Default: `false`.
        :param pulumi.Input[float] cpu_reservation: The amount of CPU (in MHz) that this virtual
               machine is guaranteed. The default is no reservation.
        :param pulumi.Input[float] cpu_share_count: The number of CPU shares allocated to the
               virtual machine when the `cpu_share_level` is `custom`.
        :param pulumi.Input[str] cpu_share_level: The allocation level for CPU resources. Can be
               one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
        :param pulumi.Input[dict] custom_attributes: Map of custom attribute ids to attribute
               value strings to set for virtual machine. See
               [here][docs-setting-custom-attributes] for a reference on how to set values
               for custom attributes.
        :param pulumi.Input[str] datastore_cluster_id: The [managed object reference
               ID][docs-about-morefs] of the datastore cluster ID to use. This setting
               applies to entire virtual machine and implies that you wish to use Storage
               DRS with this virtual machine. See the section on virtual machine
               migration for details on changing this value.
        :param pulumi.Input[str] datastore_id: The datastore ID that the ISO is located in.
               Requried for using a datastore ISO. Conflicts with `client_device`.
        :param pulumi.Input[list] disks: A specification for a virtual disk device on this virtual
               machine. See disk options below.
        :param pulumi.Input[bool] efi_secure_boot_enabled: When the `firmware` type is set to is
               `efi`, this enables EFI secure boot. Default: `false`.
        :param pulumi.Input[bool] enable_disk_uuid: Expose the UUIDs of attached virtual disks to
               the virtual machine, allowing access to them in the guest. Default: `false`.
        :param pulumi.Input[bool] enable_logging: Enable logging of virtual machine events to a
               log file stored in the virtual machine directory. Default: `false`.
        :param pulumi.Input[str] ept_rvi_mode: The EPT/RVI (hardware memory virtualization)
               setting for this virtual machine. Can be one of `automatic`, `on`, or `off`.
               Default: `automatic`.
        :param pulumi.Input[dict] extra_config: Extra configuration data for this virtual
               machine. Can be used to supply advanced parameters not normally in
               configuration, such as instance metadata.
        :param pulumi.Input[str] firmware: The firmware interface to use on the virtual machine.
               Can be one of `bios` or `EFI`. Default: `bios`.
        :param pulumi.Input[str] folder: The path to the folder to put this virtual machine in,
               relative to the datacenter that the resource pool is in.
        :param pulumi.Input[bool] force_power_off: If a guest shutdown failed or timed out while
               updating or destroying (see
               `shutdown_wait_timeout`), force the power-off of
               the virtual machine. Default: `true`.
        :param pulumi.Input[str] guest_id: The guest ID for the operating system type. For a
               full list of possible values, see [here][vmware-docs-guest-ids]. Default: `other-64`.
        :param pulumi.Input[str] host_system_id: An optional [managed object reference
               ID][docs-about-morefs] of a host to put this virtual machine on. See the
               section on virtual machine migration for
               details on changing this value. If a `host_system_id` is not supplied,
               vSphere will select a host in the resource pool to place the virtual machine,
               according to any defaults or DRS policies in place.
        :param pulumi.Input[str] hv_mode: The (non-nested) hardware virtualization setting for
               this virtual machine. Can be one of `hvAuto`, `hvOn`, or `hvOff`. Default:
               `hvAuto`.
        :param pulumi.Input[list] ignored_guest_ips: List of IP addresses to ignore while waiting
               for an available IP address using either of the waiters. Any IP addresses in
               this list will be ignored if they show up so that the waiter will continue to
               wait for a real IP address. Default: [].
        :param pulumi.Input[str] latency_sensitivity: Controls the scheduling delay of the
               virtual machine. Use a higher sensitivity for applications that require lower
               latency, such as VOIP, media player applications, or applications that
               require frequent access to mouse or keyboard devices. Can be one of `low`,
               `normal`, `medium`, or `high`.
        :param pulumi.Input[float] memory: The size of the virtual machine's memory, in MB.
               Default: `1024` (1 GB).
        :param pulumi.Input[bool] memory_hot_add_enabled: Allow memory to be added to this
               virtual machine while it is running.
        :param pulumi.Input[float] memory_limit: The maximum amount of memory (in MB) that this
               virtual machine can consume, regardless of available resources. The default
               is no limit.
        :param pulumi.Input[float] memory_reservation: The amount of memory (in MB) that this
               virtual machine is guaranteed. The default is no reservation.
        :param pulumi.Input[float] memory_share_count: The number of memory shares allocated to
               the virtual machine when the `memory_share_level` is `custom`.
        :param pulumi.Input[str] memory_share_level: The allocation level for memory resources.
               Can be one of `high`, `low`, `normal`, or `custom`. Default: `custom`.
        :param pulumi.Input[float] migrate_wait_timeout: The amount of time, in minutes, to wait
               for a virtual machine migration to complete before failing. Default: 10
               minutes. Also see the section on virtual machine
               migration.
        :param pulumi.Input[str] name: An alias for both `label` and `path`, the latter when
               using `attach`. Required if not using `label`.
        :param pulumi.Input[bool] nested_hv_enabled: Enable nested hardware virtualization on
               this virtual machine, facilitating nested virtualization in the guest.
               Default: `false`.
        :param pulumi.Input[list] network_interfaces: A specification for a virtual NIC on this
               virtual machine. See network interface options
               below.
        :param pulumi.Input[float] num_cores_per_socket: The number of cores to distribute among
               the CPUs in this virtual machine. If specified, the value supplied to
               `num_cpus` must be evenly divisible by this value. Default: `1`.
        :param pulumi.Input[float] num_cpus: The number of virtual processors to assign to this
               virtual machine. Default: `1`.
        :param pulumi.Input[str] resource_pool_id: The [managed object reference
               ID][docs-about-morefs] of the resource pool to put this virtual machine in.
               See the section on virtual machine migration
               for details on changing this value.
        :param pulumi.Input[bool] run_tools_scripts_after_power_on: Enable the execution of
               post-power-on scripts when VMware tools is installed. Default: `true`.
        :param pulumi.Input[bool] run_tools_scripts_after_resume: Enable the execution of
               post-resume scripts when VMware tools is installed. Default: `true`.
        :param pulumi.Input[bool] run_tools_scripts_before_guest_reboot: Enable the execution of
               pre-reboot scripts when VMware tools is installed. Default: `false`.
        :param pulumi.Input[bool] run_tools_scripts_before_guest_shutdown: Enable the execution
               of pre-shutdown scripts when VMware tools is installed. Default: `true`.
        :param pulumi.Input[bool] run_tools_scripts_before_guest_standby: Enable the execution of
               pre-standby scripts when VMware tools is installed. Default: `true`.
        :param pulumi.Input[str] scsi_bus_sharing: Mode for sharing the SCSI bus. The modes are
               physicalSharing, virtualSharing, and noSharing. Default: `noSharing`.
        :param pulumi.Input[float] scsi_controller_count: The number of SCSI controllers that
               Terraform manages on this virtual machine. This directly affects the amount
               of disks you can add to the virtual machine and the maximum disk unit number.
               Note that lowering this value does not remove controllers. Default: `1`.
        :param pulumi.Input[str] scsi_type: The type of SCSI bus this virtual machine will have.
               Can be one of lsilogic (LSI Logic Parallel), lsilogic-sas (LSI Logic SAS) or
               pvscsi (VMware Paravirtual). Defualt: `pvscsi`.
        :param pulumi.Input[float] shutdown_wait_timeout: The amount of time, in minutes, to wait
               for a graceful guest shutdown when making necessary updates to the virtual
               machine. If `force_power_off` is set to true, the VM will be force powered-off
               after this timeout, otherwise an error is returned. Default: 3 minutes.
        :param pulumi.Input[str] swap_placement_policy: The swap file placement policy for this
               virtual machine. Can be one of `inherit`, `hostLocal`, or `vmDirectory`.
               Default: `inherit`.
        :param pulumi.Input[bool] sync_time_with_host: Enable guest clock synchronization with
               the host. Requires VMware tools to be installed. Default: `false`.
        :param pulumi.Input[list] tags: The IDs of any tags to attach to this resource. See
               [here][docs-applying-tags] for a reference on how to apply tags.
        :param pulumi.Input[dict] vapp: Optional vApp configuration. The only sub-key available
               is `properties`, which is a key/value map of properties for virtual machines
               imported from OVF or OVA files. See Using vApp properties to supply OVF/OVA
               configuration for
               more details.
        :param pulumi.Input[float] wait_for_guest_ip_timeout: The amount of time, in minutes, to
               wait for an available guest IP address on this virtual machine. This should
               only be used if your version of VMware Tools does not allow the
               `wait_for_guest_net_timeout` waiter to be
               used. A value less than 1 disables the waiter. Default: 0.
        :param pulumi.Input[bool] wait_for_guest_net_routable: Controls whether or not the guest
               network waiter waits for a routable address. When `false`, the waiter does
               not wait for a default gateway, nor are IP addresses checked against any
               discovered default gateways as part of its success criteria. This property is
               ignored if the `wait_for_guest_ip_timeout`
               waiter is used. Default: `true`.
        :param pulumi.Input[float] wait_for_guest_net_timeout: The amount of time, in minutes, to
               wait for an available IP address on this virtual machine's NICs. Older
               versions of VMware Tools do not populate this property. In those cases, this
               waiter can be disabled and the
               `wait_for_guest_ip_timeout` waiter can be used
               instead. A value less than 1 disables the waiter. Default: 5 minutes.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['alternate_guest_name'] = alternate_guest_name

        __props__['annotation'] = annotation

        __props__['boot_delay'] = boot_delay

        __props__['boot_retry_delay'] = boot_retry_delay

        __props__['boot_retry_enabled'] = boot_retry_enabled

        __props__['cdrom'] = cdrom

        __props__['clone'] = clone

        __props__['cpu_hot_add_enabled'] = cpu_hot_add_enabled

        __props__['cpu_hot_remove_enabled'] = cpu_hot_remove_enabled

        __props__['cpu_limit'] = cpu_limit

        __props__['cpu_performance_counters_enabled'] = cpu_performance_counters_enabled

        __props__['cpu_reservation'] = cpu_reservation

        __props__['cpu_share_count'] = cpu_share_count

        __props__['cpu_share_level'] = cpu_share_level

        __props__['custom_attributes'] = custom_attributes

        __props__['datastore_cluster_id'] = datastore_cluster_id

        __props__['datastore_id'] = datastore_id

        __props__['disks'] = disks

        __props__['efi_secure_boot_enabled'] = efi_secure_boot_enabled

        __props__['enable_disk_uuid'] = enable_disk_uuid

        __props__['enable_logging'] = enable_logging

        __props__['ept_rvi_mode'] = ept_rvi_mode

        __props__['extra_config'] = extra_config

        __props__['firmware'] = firmware

        __props__['folder'] = folder

        __props__['force_power_off'] = force_power_off

        __props__['guest_id'] = guest_id

        __props__['host_system_id'] = host_system_id

        __props__['hv_mode'] = hv_mode

        __props__['ignored_guest_ips'] = ignored_guest_ips

        __props__['latency_sensitivity'] = latency_sensitivity

        __props__['memory'] = memory

        __props__['memory_hot_add_enabled'] = memory_hot_add_enabled

        __props__['memory_limit'] = memory_limit

        __props__['memory_reservation'] = memory_reservation

        __props__['memory_share_count'] = memory_share_count

        __props__['memory_share_level'] = memory_share_level

        __props__['migrate_wait_timeout'] = migrate_wait_timeout

        __props__['name'] = name

        __props__['nested_hv_enabled'] = nested_hv_enabled

        if network_interfaces is None:
            raise TypeError("Missing required property 'network_interfaces'")
        __props__['network_interfaces'] = network_interfaces

        __props__['num_cores_per_socket'] = num_cores_per_socket

        __props__['num_cpus'] = num_cpus

        if resource_pool_id is None:
            raise TypeError("Missing required property 'resource_pool_id'")
        __props__['resource_pool_id'] = resource_pool_id

        __props__['run_tools_scripts_after_power_on'] = run_tools_scripts_after_power_on

        __props__['run_tools_scripts_after_resume'] = run_tools_scripts_after_resume

        __props__['run_tools_scripts_before_guest_reboot'] = run_tools_scripts_before_guest_reboot

        __props__['run_tools_scripts_before_guest_shutdown'] = run_tools_scripts_before_guest_shutdown

        __props__['run_tools_scripts_before_guest_standby'] = run_tools_scripts_before_guest_standby

        __props__['scsi_bus_sharing'] = scsi_bus_sharing

        __props__['scsi_controller_count'] = scsi_controller_count

        __props__['scsi_type'] = scsi_type

        __props__['shutdown_wait_timeout'] = shutdown_wait_timeout

        __props__['swap_placement_policy'] = swap_placement_policy

        __props__['sync_time_with_host'] = sync_time_with_host

        __props__['tags'] = tags

        __props__['vapp'] = vapp

        __props__['wait_for_guest_ip_timeout'] = wait_for_guest_ip_timeout

        __props__['wait_for_guest_net_routable'] = wait_for_guest_net_routable

        __props__['wait_for_guest_net_timeout'] = wait_for_guest_net_timeout

        __props__['change_version'] = None
        __props__['default_ip_address'] = None
        __props__['guest_ip_addresses'] = None
        __props__['imported'] = None
        __props__['moid'] = None
        __props__['reboot_required'] = None
        __props__['uuid'] = None
        __props__['vapp_transports'] = None
        __props__['vmware_tools_status'] = None
        __props__['vmx_path'] = None

        super(VirtualMachine, __self__).__init__(
            'vsphere:index/virtualMachine:VirtualMachine',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

